
FreeRTOS_DSP_MX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e900  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800ea90  0800ea90  0001ea90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb30  0800eb30  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb30  0800eb30  0001eb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb38  0800eb38  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb38  0800eb38  0001eb38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb3c  0800eb3c  0001eb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800eb40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002408  20000094  0800ebd4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000249c  0800ebd4  0002249c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000373ba  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006011  00000000  00000000  0005747e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000029e0  00000000  00000000  0005d490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002750  00000000  00000000  0005fe70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000319d8  00000000  00000000  000625c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000241f1  00000000  00000000  00093f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00121cc2  00000000  00000000  000b8189  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d9e4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b520  00000000  00000000  001d9ec8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ea78 	.word	0x0800ea78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800ea78 	.word	0x0800ea78

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_Init+0x3c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a0b      	ldr	r2, [pc, #44]	; (800050c <HAL_Init+0x3c>)
 80004e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e6:	2003      	movs	r0, #3
 80004e8:	f001 f866 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004ec:	200f      	movs	r0, #15
 80004ee:	f000 f80f 	bl	8000510 <HAL_InitTick>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004f8:	2301      	movs	r3, #1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	e001      	b.n	8000502 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004fe:	f00d fa97 	bl	800da30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000502:	79fb      	ldrb	r3, [r7, #7]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40022000 	.word	0x40022000

08000510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <HAL_InitTick+0x68>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d022      	beq.n	800056a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <HAL_InitTick+0x6c>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <HAL_InitTick+0x68>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000530:	fbb1 f3f3 	udiv	r3, r1, r3
 8000534:	fbb2 f3f3 	udiv	r3, r2, r3
 8000538:	4618      	mov	r0, r3
 800053a:	f001 f872 	bl	8001622 <HAL_SYSTICK_Config>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d10f      	bne.n	8000564 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b0f      	cmp	r3, #15
 8000548:	d809      	bhi.n	800055e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800054a:	2200      	movs	r2, #0
 800054c:	6879      	ldr	r1, [r7, #4]
 800054e:	f04f 30ff 	mov.w	r0, #4294967295
 8000552:	f001 f83c 	bl	80015ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <HAL_InitTick+0x70>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	e007      	b.n	800056e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	73fb      	strb	r3, [r7, #15]
 8000562:	e004      	b.n	800056e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000564:	2301      	movs	r3, #1
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	e001      	b.n	800056e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800056e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000004 	.word	0x20000004
 800057c:	2000002c 	.word	0x2000002c
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_IncTick+0x1c>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <HAL_IncTick+0x20>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4413      	add	r3, r2
 8000592:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x1c>)
 8000594:	6013      	str	r3, [r2, #0]
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	20001988 	.word	0x20001988
 80005a4:	20000004 	.word	0x20000004

080005a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return uwTick;
 80005ac:	4b03      	ldr	r3, [pc, #12]	; (80005bc <HAL_GetTick+0x14>)
 80005ae:	681b      	ldr	r3, [r3, #0]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20001988 	.word	0x20001988

080005c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c8:	f7ff ffee 	bl	80005a8 <HAL_GetTick>
 80005cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d8:	d004      	beq.n	80005e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <HAL_Delay+0x40>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	4413      	add	r3, r2
 80005e2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e4:	bf00      	nop
 80005e6:	f7ff ffdf 	bl	80005a8 <HAL_GetTick>
 80005ea:	4602      	mov	r2, r0
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d8f7      	bhi.n	80005e6 <HAL_Delay+0x26>
  {
  }
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000004 	.word	0x20000004

08000604 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	431a      	orrs	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	609a      	str	r2, [r3, #8]
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	431a      	orrs	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	609a      	str	r2, [r3, #8]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800066c:	b490      	push	{r4, r7}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3360      	adds	r3, #96	; 0x60
 800067e:	461a      	mov	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000688:	6822      	ldr	r2, [r4, #0]
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <LL_ADC_SetOffset+0x40>)
 800068c:	4013      	ands	r3, r2
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	430a      	orrs	r2, r1
 8000698:	4313      	orrs	r3, r2
 800069a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800069e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc90      	pop	{r4, r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	03fff000 	.word	0x03fff000

080006b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80006b0:	b490      	push	{r4, r7}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3360      	adds	r3, #96	; 0x60
 80006be:	461a      	mov	r2, r3
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	4413      	add	r3, r2
 80006c6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80006c8:	6823      	ldr	r3, [r4, #0]
 80006ca:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc90      	pop	{r4, r7}
 80006d6:	4770      	bx	lr

080006d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80006d8:	b490      	push	{r4, r7}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3360      	adds	r3, #96	; 0x60
 80006e8:	461a      	mov	r2, r3
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80006f2:	6823      	ldr	r3, [r4, #0]
 80006f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bc90      	pop	{r4, r7}
 8000706:	4770      	bx	lr

08000708 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000708:	b490      	push	{r4, r7}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3330      	adds	r3, #48	; 0x30
 8000718:	461a      	mov	r2, r3
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	f003 030c 	and.w	r3, r3, #12
 8000724:	4413      	add	r3, r2
 8000726:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000728:	6822      	ldr	r2, [r4, #0]
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	f003 031f 	and.w	r3, r3, #31
 8000730:	211f      	movs	r1, #31
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43db      	mvns	r3, r3
 8000738:	401a      	ands	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	0e9b      	lsrs	r3, r3, #26
 800073e:	f003 011f 	and.w	r1, r3, #31
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	f003 031f 	and.w	r3, r3, #31
 8000748:	fa01 f303 	lsl.w	r3, r1, r3
 800074c:	4313      	orrs	r3, r2
 800074e:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bc90      	pop	{r4, r7}
 8000758:	4770      	bx	lr

0800075a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800075a:	b490      	push	{r4, r7}
 800075c:	b084      	sub	sp, #16
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	3314      	adds	r3, #20
 800076a:	461a      	mov	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	0e5b      	lsrs	r3, r3, #25
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	4413      	add	r3, r2
 8000778:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800077a:	6822      	ldr	r2, [r4, #0]
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	0d1b      	lsrs	r3, r3, #20
 8000780:	f003 031f 	and.w	r3, r3, #31
 8000784:	2107      	movs	r1, #7
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43db      	mvns	r3, r3
 800078c:	401a      	ands	r2, r3
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	0d1b      	lsrs	r3, r3, #20
 8000792:	f003 031f 	and.w	r3, r3, #31
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	fa01 f303 	lsl.w	r3, r1, r3
 800079c:	4313      	orrs	r3, r2
 800079e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc90      	pop	{r4, r7}
 80007a8:	4770      	bx	lr
	...

080007ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007c4:	43db      	mvns	r3, r3
 80007c6:	401a      	ands	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f003 0318 	and.w	r3, r3, #24
 80007ce:	4908      	ldr	r1, [pc, #32]	; (80007f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80007d0:	40d9      	lsrs	r1, r3
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	400b      	ands	r3, r1
 80007d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007da:	431a      	orrs	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	0007ffff 	.word	0x0007ffff

080007f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000804:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	6093      	str	r3, [r2, #8]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800082c:	d101      	bne.n	8000832 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800082e:	2301      	movs	r3, #1
 8000830:	e000      	b.n	8000834 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000850:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000854:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800087c:	d101      	bne.n	8000882 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800087e:	2301      	movs	r3, #1
 8000880:	e000      	b.n	8000884 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d101      	bne.n	80008a8 <LL_ADC_IsEnabled+0x18>
 80008a4:	2301      	movs	r3, #1
 80008a6:	e000      	b.n	80008aa <LL_ADC_IsEnabled+0x1a>
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d101      	bne.n	80008ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80008ca:	2301      	movs	r3, #1
 80008cc:	e000      	b.n	80008d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80008ce:	2300      	movs	r3, #0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f003 0308 	and.w	r3, r3, #8
 80008ec:	2b08      	cmp	r3, #8
 80008ee:	d101      	bne.n	80008f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80008f0:	2301      	movs	r3, #1
 80008f2:	e000      	b.n	80008f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800090c:	2300      	movs	r3, #0
 800090e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d101      	bne.n	800091e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e134      	b.n	8000b88 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	691b      	ldr	r3, [r3, #16]
 8000922:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000928:	2b00      	cmp	r3, #0
 800092a:	d109      	bne.n	8000940 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f00d f8a7 	bl	800da80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff67 	bl	8000818 <LL_ADC_IsDeepPowerDownEnabled>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d004      	beq.n	800095a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff4d 	bl	80007f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff82 	bl	8000868 <LL_ADC_IsInternalRegulatorEnabled>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d113      	bne.n	8000992 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff66 	bl	8000840 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000974:	4b86      	ldr	r3, [pc, #536]	; (8000b90 <HAL_ADC_Init+0x28c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	099b      	lsrs	r3, r3, #6
 800097a:	4a86      	ldr	r2, [pc, #536]	; (8000b94 <HAL_ADC_Init+0x290>)
 800097c:	fba2 2303 	umull	r2, r3, r2, r3
 8000980:	099b      	lsrs	r3, r3, #6
 8000982:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000984:	e002      	b.n	800098c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	3b01      	subs	r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1f9      	bne.n	8000986 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff66 	bl	8000868 <LL_ADC_IsInternalRegulatorEnabled>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10d      	bne.n	80009be <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009a6:	f043 0210 	orr.w	r2, r3, #16
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	f043 0201 	orr.w	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff77 	bl	80008b6 <LL_ADC_REG_IsConversionOngoing>
 80009c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009ce:	f003 0310 	and.w	r3, r3, #16
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f040 80cf 	bne.w	8000b76 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f040 80cb 	bne.w	8000b76 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80009e8:	f043 0202 	orr.w	r2, r3, #2
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff4b 	bl	8000890 <LL_ADC_IsEnabled>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d115      	bne.n	8000a2c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000a00:	4865      	ldr	r0, [pc, #404]	; (8000b98 <HAL_ADC_Init+0x294>)
 8000a02:	f7ff ff45 	bl	8000890 <LL_ADC_IsEnabled>
 8000a06:	4604      	mov	r4, r0
 8000a08:	4864      	ldr	r0, [pc, #400]	; (8000b9c <HAL_ADC_Init+0x298>)
 8000a0a:	f7ff ff41 	bl	8000890 <LL_ADC_IsEnabled>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	431c      	orrs	r4, r3
 8000a12:	4863      	ldr	r0, [pc, #396]	; (8000ba0 <HAL_ADC_Init+0x29c>)
 8000a14:	f7ff ff3c 	bl	8000890 <LL_ADC_IsEnabled>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4323      	orrs	r3, r4
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d105      	bne.n	8000a2c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	4619      	mov	r1, r3
 8000a26:	485f      	ldr	r0, [pc, #380]	; (8000ba4 <HAL_ADC_Init+0x2a0>)
 8000a28:	f7ff fdec 	bl	8000604 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7e5b      	ldrb	r3, [r3, #25]
 8000a30:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000a36:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000a3c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000a42:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a4a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d106      	bne.n	8000a68 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	045b      	lsls	r3, r3, #17
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d009      	beq.n	8000a84 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a74:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	68da      	ldr	r2, [r3, #12]
 8000a8a:	4b47      	ldr	r3, [pc, #284]	; (8000ba8 <HAL_ADC_Init+0x2a4>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	69b9      	ldr	r1, [r7, #24]
 8000a94:	430b      	orrs	r3, r1
 8000a96:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff0a 	bl	80008b6 <LL_ADC_REG_IsConversionOngoing>
 8000aa2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff17 	bl	80008dc <LL_ADC_INJ_IsConversionOngoing>
 8000aae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d13d      	bne.n	8000b32 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d13a      	bne.n	8000b32 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ac0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ac8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000aca:	4313      	orrs	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ad8:	f023 0302 	bic.w	r3, r3, #2
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	69b9      	ldr	r1, [r7, #24]
 8000ae2:	430b      	orrs	r3, r1
 8000ae4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d118      	bne.n	8000b22 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000afa:	f023 0304 	bic.w	r3, r3, #4
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b06:	4311      	orrs	r1, r2
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b0c:	4311      	orrs	r1, r2
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000b12:	430a      	orrs	r2, r1
 8000b14:	431a      	orrs	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f042 0201 	orr.w	r2, r2, #1
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	e007      	b.n	8000b32 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	691a      	ldr	r2, [r3, #16]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f022 0201 	bic.w	r2, r2, #1
 8000b30:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d10c      	bne.n	8000b54 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f023 010f 	bic.w	r1, r3, #15
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	1e5a      	subs	r2, r3, #1
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	631a      	str	r2, [r3, #48]	; 0x30
 8000b52:	e007      	b.n	8000b64 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 020f 	bic.w	r2, r2, #15
 8000b62:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b68:	f023 0303 	bic.w	r3, r3, #3
 8000b6c:	f043 0201 	orr.w	r2, r3, #1
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	655a      	str	r2, [r3, #84]	; 0x54
 8000b74:	e007      	b.n	8000b86 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b7a:	f043 0210 	orr.w	r2, r3, #16
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000b86:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3724      	adds	r7, #36	; 0x24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd90      	pop	{r4, r7, pc}
 8000b90:	2000002c 	.word	0x2000002c
 8000b94:	053e2d63 	.word	0x053e2d63
 8000b98:	50040000 	.word	0x50040000
 8000b9c:	50040100 	.word	0x50040100
 8000ba0:	50040200 	.word	0x50040200
 8000ba4:	50040300 	.word	0x50040300
 8000ba8:	fff0c007 	.word	0xfff0c007

08000bac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b0a6      	sub	sp, #152	; 0x98
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d101      	bne.n	8000bce <HAL_ADC_ConfigChannel+0x22>
 8000bca:	2302      	movs	r3, #2
 8000bcc:	e348      	b.n	8001260 <HAL_ADC_ConfigChannel+0x6b4>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fe6b 	bl	80008b6 <LL_ADC_REG_IsConversionOngoing>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8329 	bne.w	800123a <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d824      	bhi.n	8000c3a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	3b02      	subs	r3, #2
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d81b      	bhi.n	8000c32 <HAL_ADC_ConfigChannel+0x86>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <HAL_ADC_ConfigChannel+0x54>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c11 	.word	0x08000c11
 8000c04:	08000c19 	.word	0x08000c19
 8000c08:	08000c21 	.word	0x08000c21
 8000c0c:	08000c29 	.word	0x08000c29
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	220c      	movs	r2, #12
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	e011      	b.n	8000c3c <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2212      	movs	r2, #18
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	e00d      	b.n	8000c3c <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	2218      	movs	r2, #24
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	e009      	b.n	8000c3c <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	e004      	b.n	8000c3c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2206      	movs	r2, #6
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	e000      	b.n	8000c3c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000c3a:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6818      	ldr	r0, [r3, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	6859      	ldr	r1, [r3, #4]
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	f7ff fd5d 	bl	8000708 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fe2f 	bl	80008b6 <LL_ADC_REG_IsConversionOngoing>
 8000c58:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fe3b 	bl	80008dc <LL_ADC_INJ_IsConversionOngoing>
 8000c66:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f040 8148 	bne.w	8000f04 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f040 8143 	bne.w	8000f04 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	f7ff fd65 	bl	800075a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	695a      	ldr	r2, [r3, #20]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	08db      	lsrs	r3, r3, #3
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	d00a      	beq.n	8000cc8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	6919      	ldr	r1, [r3, #16]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000cc2:	f7ff fcd3 	bl	800066c <LL_ADC_SetOffset>
 8000cc6:	e11d      	b.n	8000f04 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fcee 	bl	80006b0 <LL_ADC_GetOffsetChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10a      	bne.n	8000cf4 <HAL_ADC_ConfigChannel+0x148>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fce3 	bl	80006b0 <LL_ADC_GetOffsetChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	0e9b      	lsrs	r3, r3, #26
 8000cee:	f003 021f 	and.w	r2, r3, #31
 8000cf2:	e012      	b.n	8000d1a <HAL_ADC_ConfigChannel+0x16e>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fcd8 	bl	80006b0 <LL_ADC_GetOffsetChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d0a:	fa93 f3a3 	rbit	r3, r3
 8000d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d12:	fab3 f383 	clz	r3, r3
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d105      	bne.n	8000d32 <HAL_ADC_ConfigChannel+0x186>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	0e9b      	lsrs	r3, r3, #26
 8000d2c:	f003 031f 	and.w	r3, r3, #31
 8000d30:	e00a      	b.n	8000d48 <HAL_ADC_ConfigChannel+0x19c>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d3a:	fa93 f3a3 	rbit	r3, r3
 8000d3e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d42:	fab3 f383 	clz	r3, r3
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d106      	bne.n	8000d5a <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fcbf 	bl	80006d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2101      	movs	r1, #1
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fca5 	bl	80006b0 <LL_ADC_GetOffsetChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10a      	bne.n	8000d86 <HAL_ADC_ConfigChannel+0x1da>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2101      	movs	r1, #1
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fc9a 	bl	80006b0 <LL_ADC_GetOffsetChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	0e9b      	lsrs	r3, r3, #26
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	e010      	b.n	8000da8 <HAL_ADC_ConfigChannel+0x1fc>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fc8f 	bl	80006b0 <LL_ADC_GetOffsetChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d98:	fa93 f3a3 	rbit	r3, r3
 8000d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000da0:	fab3 f383 	clz	r3, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	461a      	mov	r2, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d105      	bne.n	8000dc0 <HAL_ADC_ConfigChannel+0x214>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	0e9b      	lsrs	r3, r3, #26
 8000dba:	f003 031f 	and.w	r3, r3, #31
 8000dbe:	e00a      	b.n	8000dd6 <HAL_ADC_ConfigChannel+0x22a>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000dc8:	fa93 f3a3 	rbit	r3, r3
 8000dcc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000dce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dd0:	fab3 f383 	clz	r3, r3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d106      	bne.n	8000de8 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2200      	movs	r2, #0
 8000de0:	2101      	movs	r1, #1
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fc78 	bl	80006d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2102      	movs	r1, #2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fc5e 	bl	80006b0 <LL_ADC_GetOffsetChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10a      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x268>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2102      	movs	r1, #2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fc53 	bl	80006b0 <LL_ADC_GetOffsetChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	0e9b      	lsrs	r3, r3, #26
 8000e0e:	f003 021f 	and.w	r2, r3, #31
 8000e12:	e010      	b.n	8000e36 <HAL_ADC_ConfigChannel+0x28a>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2102      	movs	r1, #2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fc48 	bl	80006b0 <LL_ADC_GetOffsetChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e26:	fa93 f3a3 	rbit	r3, r3
 8000e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e2e:	fab3 f383 	clz	r3, r3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d105      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x2a2>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	0e9b      	lsrs	r3, r3, #26
 8000e48:	f003 031f 	and.w	r3, r3, #31
 8000e4c:	e00a      	b.n	8000e64 <HAL_ADC_ConfigChannel+0x2b8>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e56:	fa93 f3a3 	rbit	r3, r3
 8000e5a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e5e:	fab3 f383 	clz	r3, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d106      	bne.n	8000e76 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2102      	movs	r1, #2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fc31 	bl	80006d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fc17 	bl	80006b0 <LL_ADC_GetOffsetChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d10a      	bne.n	8000ea2 <HAL_ADC_ConfigChannel+0x2f6>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2103      	movs	r1, #3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fc0c 	bl	80006b0 <LL_ADC_GetOffsetChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	0e9b      	lsrs	r3, r3, #26
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	e010      	b.n	8000ec4 <HAL_ADC_ConfigChannel+0x318>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fc01 	bl	80006b0 <LL_ADC_GetOffsetChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000eb4:	fa93 f3a3 	rbit	r3, r3
 8000eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ebc:	fab3 f383 	clz	r3, r3
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d105      	bne.n	8000edc <HAL_ADC_ConfigChannel+0x330>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	0e9b      	lsrs	r3, r3, #26
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	e00a      	b.n	8000ef2 <HAL_ADC_ConfigChannel+0x346>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ee4:	fa93 f3a3 	rbit	r3, r3
 8000ee8:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eec:	fab3 f383 	clz	r3, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d106      	bne.n	8000f04 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2200      	movs	r2, #0
 8000efc:	2103      	movs	r1, #3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fbea 	bl	80006d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fcc1 	bl	8000890 <LL_ADC_IsEnabled>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f040 810c 	bne.w	800112e <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6818      	ldr	r0, [r3, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	6819      	ldr	r1, [r3, #0]
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	461a      	mov	r2, r3
 8000f24:	f7ff fc42 	bl	80007ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	4aad      	ldr	r2, [pc, #692]	; (80011e4 <HAL_ADC_ConfigChannel+0x638>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	f040 80fd 	bne.w	800112e <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10b      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x3b0>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	0e9b      	lsrs	r3, r3, #26
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	f003 031f 	and.w	r3, r3, #31
 8000f50:	2b09      	cmp	r3, #9
 8000f52:	bf94      	ite	ls
 8000f54:	2301      	movls	r3, #1
 8000f56:	2300      	movhi	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	e012      	b.n	8000f82 <HAL_ADC_ConfigChannel+0x3d6>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f64:	fa93 f3a3 	rbit	r3, r3
 8000f68:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f6c:	fab3 f383 	clz	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	3301      	adds	r3, #1
 8000f74:	f003 031f 	and.w	r3, r3, #31
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	bf94      	ite	ls
 8000f7c:	2301      	movls	r3, #1
 8000f7e:	2300      	movhi	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d064      	beq.n	8001050 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d107      	bne.n	8000fa2 <HAL_ADC_ConfigChannel+0x3f6>
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	0e9b      	lsrs	r3, r3, #26
 8000f98:	3301      	adds	r3, #1
 8000f9a:	069b      	lsls	r3, r3, #26
 8000f9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fa0:	e00e      	b.n	8000fc0 <HAL_ADC_ConfigChannel+0x414>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000faa:	fa93 f3a3 	rbit	r3, r3
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb2:	fab3 f383 	clz	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	3301      	adds	r3, #1
 8000fba:	069b      	lsls	r3, r3, #26
 8000fbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d109      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x434>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	0e9b      	lsrs	r3, r3, #26
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	f003 031f 	and.w	r3, r3, #31
 8000fd8:	2101      	movs	r1, #1
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	e010      	b.n	8001002 <HAL_ADC_ConfigChannel+0x456>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff0:	fab3 f383 	clz	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	ea42 0103 	orr.w	r1, r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10a      	bne.n	8001028 <HAL_ADC_ConfigChannel+0x47c>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	0e9b      	lsrs	r3, r3, #26
 8001018:	3301      	adds	r3, #1
 800101a:	f003 021f 	and.w	r2, r3, #31
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	051b      	lsls	r3, r3, #20
 8001026:	e011      	b.n	800104c <HAL_ADC_ConfigChannel+0x4a0>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	fab3 f383 	clz	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	3301      	adds	r3, #1
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800104c:	430b      	orrs	r3, r1
 800104e:	e069      	b.n	8001124 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001058:	2b00      	cmp	r3, #0
 800105a:	d107      	bne.n	800106c <HAL_ADC_ConfigChannel+0x4c0>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	0e9b      	lsrs	r3, r3, #26
 8001062:	3301      	adds	r3, #1
 8001064:	069b      	lsls	r3, r3, #26
 8001066:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800106a:	e00e      	b.n	800108a <HAL_ADC_ConfigChannel+0x4de>
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	fa93 f3a3 	rbit	r3, r3
 8001078:	61fb      	str	r3, [r7, #28]
  return result;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3301      	adds	r3, #1
 8001084:	069b      	lsls	r3, r3, #26
 8001086:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001092:	2b00      	cmp	r3, #0
 8001094:	d109      	bne.n	80010aa <HAL_ADC_ConfigChannel+0x4fe>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0e9b      	lsrs	r3, r3, #26
 800109c:	3301      	adds	r3, #1
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	2101      	movs	r1, #1
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	e010      	b.n	80010cc <HAL_ADC_ConfigChannel+0x520>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	617b      	str	r3, [r7, #20]
  return result;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fab3 f383 	clz	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	3301      	adds	r3, #1
 80010c2:	f003 031f 	and.w	r3, r3, #31
 80010c6:	2101      	movs	r1, #1
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	ea42 0103 	orr.w	r1, r2, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10d      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x54c>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0e9b      	lsrs	r3, r3, #26
 80010e2:	3301      	adds	r3, #1
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	3b1e      	subs	r3, #30
 80010f0:	051b      	lsls	r3, r3, #20
 80010f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010f6:	e014      	b.n	8001122 <HAL_ADC_ConfigChannel+0x576>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	60fb      	str	r3, [r7, #12]
  return result;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	3301      	adds	r3, #1
 8001110:	f003 021f 	and.w	r2, r3, #31
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	3b1e      	subs	r3, #30
 800111c:	051b      	lsls	r3, r3, #20
 800111e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001122:	430b      	orrs	r3, r1
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	6892      	ldr	r2, [r2, #8]
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fb16 	bl	800075a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <HAL_ADC_ConfigChannel+0x63c>)
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 808c 	beq.w	8001254 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800113c:	482b      	ldr	r0, [pc, #172]	; (80011ec <HAL_ADC_ConfigChannel+0x640>)
 800113e:	f7ff fa87 	bl	8000650 <LL_ADC_GetCommonPathInternalCh>
 8001142:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a29      	ldr	r2, [pc, #164]	; (80011f0 <HAL_ADC_ConfigChannel+0x644>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d12b      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x5fc>
 8001150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d125      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <HAL_ADC_ConfigChannel+0x648>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d004      	beq.n	8001170 <HAL_ADC_ConfigChannel+0x5c4>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <HAL_ADC_ConfigChannel+0x64c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d16e      	bne.n	800124e <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001174:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001178:	4619      	mov	r1, r3
 800117a:	481c      	ldr	r0, [pc, #112]	; (80011ec <HAL_ADC_ConfigChannel+0x640>)
 800117c:	f7ff fa55 	bl	800062a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HAL_ADC_ConfigChannel+0x650>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	099b      	lsrs	r3, r3, #6
 8001186:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <HAL_ADC_ConfigChannel+0x654>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	099a      	lsrs	r2, r3, #6
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001198:	e002      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	3b01      	subs	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f9      	bne.n	800119a <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80011a6:	e052      	b.n	800124e <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a15      	ldr	r2, [pc, #84]	; (8001204 <HAL_ADC_ConfigChannel+0x658>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d12a      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x65c>
 80011b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d124      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <HAL_ADC_ConfigChannel+0x648>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d004      	beq.n	80011d2 <HAL_ADC_ConfigChannel+0x626>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_ADC_ConfigChannel+0x64c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d13f      	bne.n	8001252 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011da:	4619      	mov	r1, r3
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <HAL_ADC_ConfigChannel+0x640>)
 80011de:	f7ff fa24 	bl	800062a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80011e2:	e036      	b.n	8001252 <HAL_ADC_ConfigChannel+0x6a6>
 80011e4:	407f0000 	.word	0x407f0000
 80011e8:	80080000 	.word	0x80080000
 80011ec:	50040300 	.word	0x50040300
 80011f0:	c7520000 	.word	0xc7520000
 80011f4:	50040000 	.word	0x50040000
 80011f8:	50040200 	.word	0x50040200
 80011fc:	2000002c 	.word	0x2000002c
 8001200:	053e2d63 	.word	0x053e2d63
 8001204:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a16      	ldr	r2, [pc, #88]	; (8001268 <HAL_ADC_ConfigChannel+0x6bc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d120      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001212:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d11a      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <HAL_ADC_ConfigChannel+0x6c0>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d115      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800122c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001230:	4619      	mov	r1, r3
 8001232:	480f      	ldr	r0, [pc, #60]	; (8001270 <HAL_ADC_ConfigChannel+0x6c4>)
 8001234:	f7ff f9f9 	bl	800062a <LL_ADC_SetCommonPathInternalCh>
 8001238:	e00c      	b.n	8001254 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	f043 0220 	orr.w	r2, r3, #32
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800124c:	e002      	b.n	8001254 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800124e:	bf00      	nop
 8001250:	e000      	b.n	8001254 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001252:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800125c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001260:	4618      	mov	r0, r3
 8001262:	3798      	adds	r7, #152	; 0x98
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	80000001 	.word	0x80000001
 800126c:	50040000 	.word	0x50040000
 8001270:	50040300 	.word	0x50040300

08001274 <LL_ADC_IsEnabled>:
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b01      	cmp	r3, #1
 8001286:	d101      	bne.n	800128c <LL_ADC_IsEnabled+0x18>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <LL_ADC_IsEnabled+0x1a>
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_ADC_REG_IsConversionOngoing>:
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d101      	bne.n	80012b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b09f      	sub	sp, #124	; 0x7c
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d101      	bne.n	80012de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80012da:	2302      	movs	r3, #2
 80012dc:	e08f      	b.n	80013fe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a47      	ldr	r2, [pc, #284]	; (8001408 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d102      	bne.n	80012f6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80012f0:	4b46      	ldr	r3, [pc, #280]	; (800140c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	e001      	b.n	80012fa <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10b      	bne.n	8001318 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001304:	f043 0220 	orr.w	r2, r3, #32
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e072      	b.n	80013fe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ffbd 	bl	800129a <LL_ADC_REG_IsConversionOngoing>
 8001320:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ffb7 	bl	800129a <LL_ADC_REG_IsConversionOngoing>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d154      	bne.n	80013dc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001334:	2b00      	cmp	r3, #0
 8001336:	d151      	bne.n	80013dc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800133a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d02c      	beq.n	800139e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001356:	035b      	lsls	r3, r3, #13
 8001358:	430b      	orrs	r3, r1
 800135a:	431a      	orrs	r2, r3
 800135c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800135e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001360:	4829      	ldr	r0, [pc, #164]	; (8001408 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001362:	f7ff ff87 	bl	8001274 <LL_ADC_IsEnabled>
 8001366:	4604      	mov	r4, r0
 8001368:	4828      	ldr	r0, [pc, #160]	; (800140c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800136a:	f7ff ff83 	bl	8001274 <LL_ADC_IsEnabled>
 800136e:	4603      	mov	r3, r0
 8001370:	431c      	orrs	r4, r3
 8001372:	4828      	ldr	r0, [pc, #160]	; (8001414 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001374:	f7ff ff7e 	bl	8001274 <LL_ADC_IsEnabled>
 8001378:	4603      	mov	r3, r0
 800137a:	4323      	orrs	r3, r4
 800137c:	2b00      	cmp	r3, #0
 800137e:	d137      	bne.n	80013f0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001388:	f023 030f 	bic.w	r3, r3, #15
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	6811      	ldr	r1, [r2, #0]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	6892      	ldr	r2, [r2, #8]
 8001394:	430a      	orrs	r2, r1
 8001396:	431a      	orrs	r2, r3
 8001398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800139a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800139c:	e028      	b.n	80013f0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800139e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013a8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013aa:	4817      	ldr	r0, [pc, #92]	; (8001408 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80013ac:	f7ff ff62 	bl	8001274 <LL_ADC_IsEnabled>
 80013b0:	4604      	mov	r4, r0
 80013b2:	4816      	ldr	r0, [pc, #88]	; (800140c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80013b4:	f7ff ff5e 	bl	8001274 <LL_ADC_IsEnabled>
 80013b8:	4603      	mov	r3, r0
 80013ba:	431c      	orrs	r4, r3
 80013bc:	4815      	ldr	r0, [pc, #84]	; (8001414 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80013be:	f7ff ff59 	bl	8001274 <LL_ADC_IsEnabled>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4323      	orrs	r3, r4
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d112      	bne.n	80013f0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80013ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80013d2:	f023 030f 	bic.w	r3, r3, #15
 80013d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013d8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80013da:	e009      	b.n	80013f0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e0:	f043 0220 	orr.w	r2, r3, #32
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80013ee:	e000      	b.n	80013f2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80013f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80013fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80013fe:	4618      	mov	r0, r3
 8001400:	377c      	adds	r7, #124	; 0x7c
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	50040000 	.word	0x50040000
 800140c:	50040100 	.word	0x50040100
 8001410:	50040300 	.word	0x50040300
 8001414:	50040200 	.word	0x50040200

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	60d3      	str	r3, [r2, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4907      	ldr	r1, [pc, #28]	; (80014b4 <__NVIC_EnableIRQ+0x38>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff8e 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff29 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff ff3e 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff8e 	bl	800150c <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff5d 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff31 	bl	800147c <__NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffa2 	bl	8001574 <SysTick_Config>
 8001630:	4603      	mov	r3, r0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e014      	b.n	8001676 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	791b      	ldrb	r3, [r3, #4]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d105      	bne.n	8001662 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f00c fa7d 	bl	800db5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2202      	movs	r2, #2
 8001666:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b088      	sub	sp, #32
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	795b      	ldrb	r3, [r3, #5]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_DAC_ConfigChannel+0x1c>
 8001696:	2302      	movs	r3, #2
 8001698:	e107      	b.n	80018aa <HAL_DAC_ConfigChannel+0x22c>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2201      	movs	r2, #1
 800169e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2202      	movs	r2, #2
 80016a4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d174      	bne.n	8001798 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d137      	bne.n	8001724 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80016b4:	f7fe ff78 	bl	80005a8 <HAL_GetTick>
 80016b8:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80016ba:	e011      	b.n	80016e0 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80016bc:	f7fe ff74 	bl	80005a8 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d90a      	bls.n	80016e0 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f043 0208 	orr.w	r2, r3, #8
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2203      	movs	r2, #3
 80016da:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e0e4      	b.n	80018aa <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1e6      	bne.n	80016bc <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f7fe ff66 	bl	80005c0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	6992      	ldr	r2, [r2, #24]
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
 80016fe:	e01e      	b.n	800173e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001700:	f7fe ff52 	bl	80005a8 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d90a      	bls.n	8001724 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f043 0208 	orr.w	r2, r3, #8
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2203      	movs	r2, #3
 800171e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0c2      	b.n	80018aa <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172a:	2b00      	cmp	r3, #0
 800172c:	dbe8      	blt.n	8001700 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800172e:	2001      	movs	r0, #1
 8001730:	f7fe ff46 	bl	80005c0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	6992      	ldr	r2, [r2, #24]
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	ea02 0103 	and.w	r1, r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	69da      	ldr	r2, [r3, #28]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	409a      	lsls	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	21ff      	movs	r1, #255	; 0xff
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	ea02 0103 	and.w	r1, r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	409a      	lsls	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d11d      	bne.n	80017dc <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a6:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	221f      	movs	r2, #31
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2207      	movs	r2, #7
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	431a      	orrs	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43da      	mvns	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	400a      	ands	r2, r1
 8001840:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	22c0      	movs	r2, #192	; 0xc0
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	400a      	ands	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e098      	b.n	80019f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <HAL_DMA_Init+0x150>)
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d80f      	bhi.n	80018f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <HAL_DMA_Init+0x154>)
 80018da:	4413      	add	r3, r2
 80018dc:	4a4b      	ldr	r2, [pc, #300]	; (8001a0c <HAL_DMA_Init+0x158>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	091b      	lsrs	r3, r3, #4
 80018e4:	009a      	lsls	r2, r3, #2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a48      	ldr	r2, [pc, #288]	; (8001a10 <HAL_DMA_Init+0x15c>)
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
 80018f0:	e00e      	b.n	8001910 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b46      	ldr	r3, [pc, #280]	; (8001a14 <HAL_DMA_Init+0x160>)
 80018fa:	4413      	add	r3, r2
 80018fc:	4a43      	ldr	r2, [pc, #268]	; (8001a0c <HAL_DMA_Init+0x158>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	009a      	lsls	r2, r3, #2
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a42      	ldr	r2, [pc, #264]	; (8001a18 <HAL_DMA_Init+0x164>)
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800192a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800196a:	d039      	beq.n	80019e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	4a27      	ldr	r2, [pc, #156]	; (8001a10 <HAL_DMA_Init+0x15c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d11a      	bne.n	80019ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_DMA_Init+0x168>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f003 031c 	and.w	r3, r3, #28
 8001982:	210f      	movs	r1, #15
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	4924      	ldr	r1, [pc, #144]	; (8001a1c <HAL_DMA_Init+0x168>)
 800198c:	4013      	ands	r3, r2
 800198e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_DMA_Init+0x168>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6859      	ldr	r1, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	f003 031c 	and.w	r3, r3, #28
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	491d      	ldr	r1, [pc, #116]	; (8001a1c <HAL_DMA_Init+0x168>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
 80019aa:	e019      	b.n	80019e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_DMA_Init+0x16c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f003 031c 	and.w	r3, r3, #28
 80019b8:	210f      	movs	r1, #15
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	4917      	ldr	r1, [pc, #92]	; (8001a20 <HAL_DMA_Init+0x16c>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_DMA_Init+0x16c>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6859      	ldr	r1, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f003 031c 	and.w	r3, r3, #28
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	4911      	ldr	r1, [pc, #68]	; (8001a20 <HAL_DMA_Init+0x16c>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40020407 	.word	0x40020407
 8001a08:	bffdfff8 	.word	0xbffdfff8
 8001a0c:	cccccccd 	.word	0xcccccccd
 8001a10:	40020000 	.word	0x40020000
 8001a14:	bffdfbf8 	.word	0xbffdfbf8
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	400200a8 	.word	0x400200a8
 8001a20:	400204a8 	.word	0x400204a8

08001a24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	f003 031c 	and.w	r3, r3, #28
 8001a44:	2204      	movs	r2, #4
 8001a46:	409a      	lsls	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d026      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x7a>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d021      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d107      	bne.n	8001a78 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0204 	bic.w	r2, r2, #4
 8001a76:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	f003 021c 	and.w	r2, r3, #28
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	2104      	movs	r1, #4
 8001a86:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d071      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001a9c:	e06c      	b.n	8001b78 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f003 031c 	and.w	r3, r3, #28
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d02e      	beq.n	8001b10 <HAL_DMA_IRQHandler+0xec>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d029      	beq.n	8001b10 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 020a 	bic.w	r2, r2, #10
 8001ad8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f003 021c 	and.w	r2, r3, #28
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	2102      	movs	r1, #2
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d038      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b0e:	e033      	b.n	8001b78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	f003 031c 	and.w	r3, r3, #28
 8001b18:	2208      	movs	r2, #8
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d02a      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x156>
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d025      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 020e 	bic.w	r2, r2, #14
 8001b3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f003 021c 	and.w	r2, r3, #28
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
}
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b92:	e17f      	b.n	8001e94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2101      	movs	r1, #1
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8171 	beq.w	8001e8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d00b      	beq.n	8001bcc <HAL_GPIO_Init+0x48>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d007      	beq.n	8001bcc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bc0:	2b11      	cmp	r3, #17
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b12      	cmp	r3, #18
 8001bca:	d130      	bne.n	8001c2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c02:	2201      	movs	r2, #1
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	091b      	lsrs	r3, r3, #4
 8001c18:	f003 0201 	and.w	r2, r3, #1
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d118      	bne.n	8001c6c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c40:	2201      	movs	r2, #1
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	f003 0201 	and.w	r2, r3, #1
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x128>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b12      	cmp	r3, #18
 8001caa:	d123      	bne.n	8001cf4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	08da      	lsrs	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3208      	adds	r2, #8
 8001cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	08da      	lsrs	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3208      	adds	r2, #8
 8001cee:	6939      	ldr	r1, [r7, #16]
 8001cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0203 	and.w	r2, r3, #3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80ac 	beq.w	8001e8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	4b5e      	ldr	r3, [pc, #376]	; (8001eb0 <HAL_GPIO_Init+0x32c>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	4a5d      	ldr	r2, [pc, #372]	; (8001eb0 <HAL_GPIO_Init+0x32c>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6613      	str	r3, [r2, #96]	; 0x60
 8001d42:	4b5b      	ldr	r3, [pc, #364]	; (8001eb0 <HAL_GPIO_Init+0x32c>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d4e:	4a59      	ldr	r2, [pc, #356]	; (8001eb4 <HAL_GPIO_Init+0x330>)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	3302      	adds	r3, #2
 8001d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	220f      	movs	r2, #15
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d78:	d025      	beq.n	8001dc6 <HAL_GPIO_Init+0x242>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4e      	ldr	r2, [pc, #312]	; (8001eb8 <HAL_GPIO_Init+0x334>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d01f      	beq.n	8001dc2 <HAL_GPIO_Init+0x23e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4d      	ldr	r2, [pc, #308]	; (8001ebc <HAL_GPIO_Init+0x338>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d019      	beq.n	8001dbe <HAL_GPIO_Init+0x23a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4c      	ldr	r2, [pc, #304]	; (8001ec0 <HAL_GPIO_Init+0x33c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0x236>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4b      	ldr	r2, [pc, #300]	; (8001ec4 <HAL_GPIO_Init+0x340>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00d      	beq.n	8001db6 <HAL_GPIO_Init+0x232>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4a      	ldr	r2, [pc, #296]	; (8001ec8 <HAL_GPIO_Init+0x344>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d007      	beq.n	8001db2 <HAL_GPIO_Init+0x22e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a49      	ldr	r2, [pc, #292]	; (8001ecc <HAL_GPIO_Init+0x348>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_GPIO_Init+0x22a>
 8001daa:	2306      	movs	r3, #6
 8001dac:	e00c      	b.n	8001dc8 <HAL_GPIO_Init+0x244>
 8001dae:	2307      	movs	r3, #7
 8001db0:	e00a      	b.n	8001dc8 <HAL_GPIO_Init+0x244>
 8001db2:	2305      	movs	r3, #5
 8001db4:	e008      	b.n	8001dc8 <HAL_GPIO_Init+0x244>
 8001db6:	2304      	movs	r3, #4
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x244>
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e004      	b.n	8001dc8 <HAL_GPIO_Init+0x244>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e002      	b.n	8001dc8 <HAL_GPIO_Init+0x244>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_GPIO_Init+0x244>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	f002 0203 	and.w	r2, r2, #3
 8001dce:	0092      	lsls	r2, r2, #2
 8001dd0:	4093      	lsls	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dd8:	4936      	ldr	r1, [pc, #216]	; (8001eb4 <HAL_GPIO_Init+0x330>)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	3302      	adds	r3, #2
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001de6:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <HAL_GPIO_Init+0x34c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e0a:	4a31      	ldr	r2, [pc, #196]	; (8001ed0 <HAL_GPIO_Init+0x34c>)
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e10:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <HAL_GPIO_Init+0x34c>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e34:	4a26      	ldr	r2, [pc, #152]	; (8001ed0 <HAL_GPIO_Init+0x34c>)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e3a:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <HAL_GPIO_Init+0x34c>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <HAL_GPIO_Init+0x34c>)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <HAL_GPIO_Init+0x34c>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e88:	4a11      	ldr	r2, [pc, #68]	; (8001ed0 <HAL_GPIO_Init+0x34c>)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3301      	adds	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f47f ae78 	bne.w	8001b94 <HAL_GPIO_Init+0x10>
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	48000400 	.word	0x48000400
 8001ebc:	48000800 	.word	0x48000800
 8001ec0:	48000c00 	.word	0x48000c00
 8001ec4:	48001000 	.word	0x48001000
 8001ec8:	48001400 	.word	0x48001400
 8001ecc:	48001800 	.word	0x48001800
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f06:	b08f      	sub	sp, #60	; 0x3c
 8001f08:	af0a      	add	r7, sp, #40	; 0x28
 8001f0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e054      	b.n	8001fc0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d106      	bne.n	8001f36 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f00c f9bd 	bl	800e2b0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2203      	movs	r2, #3
 8001f3a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f005 fa98 	bl	800748a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	687e      	ldr	r6, [r7, #4]
 8001f62:	466d      	mov	r5, sp
 8001f64:	f106 0410 	add.w	r4, r6, #16
 8001f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f74:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f78:	1d33      	adds	r3, r6, #4
 8001f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f7c:	6838      	ldr	r0, [r7, #0]
 8001f7e:	f005 fa21 	bl	80073c4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2101      	movs	r1, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f005 fa8f 	bl	80074ac <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	687e      	ldr	r6, [r7, #4]
 8001f96:	466d      	mov	r5, sp
 8001f98:	f106 0410 	add.w	r4, r6, #16
 8001f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fac:	1d33      	adds	r3, r6, #4
 8001fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb0:	6838      	ldr	r0, [r7, #0]
 8001fb2:	f005 fb9d 	bl	80076f0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fc8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af04      	add	r7, sp, #16
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	70fb      	strb	r3, [r7, #3]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	70bb      	strb	r3, [r7, #2]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_HCD_HC_Init+0x28>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e07f      	b.n	80020f0 <HAL_HCD_HC_Init+0x128>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	333d      	adds	r3, #61	; 0x3d
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	3338      	adds	r3, #56	; 0x38
 800201c:	787a      	ldrb	r2, [r7, #1]
 800201e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	3340      	adds	r3, #64	; 0x40
 8002030:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002032:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	3339      	adds	r3, #57	; 0x39
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	333f      	adds	r3, #63	; 0x3f
 8002058:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800205c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	78bb      	ldrb	r3, [r7, #2]
 8002062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002066:	b2d8      	uxtb	r0, r3
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	440b      	add	r3, r1
 8002074:	333a      	adds	r3, #58	; 0x3a
 8002076:	4602      	mov	r2, r0
 8002078:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800207a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800207e:	2b00      	cmp	r3, #0
 8002080:	da0a      	bge.n	8002098 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	333b      	adds	r3, #59	; 0x3b
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	e009      	b.n	80020ac <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	440b      	add	r3, r1
 80020a6:	333b      	adds	r3, #59	; 0x3b
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80020ac:	78fa      	ldrb	r2, [r7, #3]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	333c      	adds	r3, #60	; 0x3c
 80020bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80020c0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	787c      	ldrb	r4, [r7, #1]
 80020c8:	78ba      	ldrb	r2, [r7, #2]
 80020ca:	78f9      	ldrb	r1, [r7, #3]
 80020cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020ce:	9302      	str	r3, [sp, #8]
 80020d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	4623      	mov	r3, r4
 80020de:	f005 fc4b 	bl	8007978 <USB_HC_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd90      	pop	{r4, r7, pc}

080020f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_HCD_HC_Halt+0x1e>
 8002112:	2302      	movs	r3, #2
 8002114:	e00f      	b.n	8002136 <HAL_HCD_HC_Halt+0x3e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f005 fe29 	bl	8007d7e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	4608      	mov	r0, r1
 800214a:	4611      	mov	r1, r2
 800214c:	461a      	mov	r2, r3
 800214e:	4603      	mov	r3, r0
 8002150:	70fb      	strb	r3, [r7, #3]
 8002152:	460b      	mov	r3, r1
 8002154:	70bb      	strb	r3, [r7, #2]
 8002156:	4613      	mov	r3, r2
 8002158:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	333b      	adds	r3, #59	; 0x3b
 800216a:	78ba      	ldrb	r2, [r7, #2]
 800216c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	333f      	adds	r3, #63	; 0x3f
 800217e:	787a      	ldrb	r2, [r7, #1]
 8002180:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002182:	7c3b      	ldrb	r3, [r7, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d114      	bne.n	80021b2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	3342      	adds	r3, #66	; 0x42
 8002198:	2203      	movs	r2, #3
 800219a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	333d      	adds	r3, #61	; 0x3d
 80021ac:	7f3a      	ldrb	r2, [r7, #28]
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e009      	b.n	80021c6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	440b      	add	r3, r1
 80021c0:	3342      	adds	r3, #66	; 0x42
 80021c2:	2202      	movs	r2, #2
 80021c4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80021c6:	787b      	ldrb	r3, [r7, #1]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	f200 80d6 	bhi.w	800237a <HAL_HCD_HC_SubmitRequest+0x23a>
 80021ce:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	08002365 	.word	0x08002365
 80021dc:	08002251 	.word	0x08002251
 80021e0:	080022db 	.word	0x080022db
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80021e4:	7c3b      	ldrb	r3, [r7, #16]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	f040 80c9 	bne.w	800237e <HAL_HCD_HC_SubmitRequest+0x23e>
 80021ec:	78bb      	ldrb	r3, [r7, #2]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 80c5 	bne.w	800237e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80021f4:	8b3b      	ldrh	r3, [r7, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	3351      	adds	r3, #81	; 0x51
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	3351      	adds	r3, #81	; 0x51
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	3342      	adds	r3, #66	; 0x42
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002238:	e0a1      	b.n	800237e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	3342      	adds	r3, #66	; 0x42
 800224a:	2202      	movs	r2, #2
 800224c:	701a      	strb	r2, [r3, #0]
      break;
 800224e:	e096      	b.n	800237e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002250:	78bb      	ldrb	r3, [r7, #2]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d120      	bne.n	8002298 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	3351      	adds	r3, #81	; 0x51
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	3342      	adds	r3, #66	; 0x42
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002280:	e07e      	b.n	8002380 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	3342      	adds	r3, #66	; 0x42
 8002292:	2202      	movs	r2, #2
 8002294:	701a      	strb	r2, [r3, #0]
      break;
 8002296:	e073      	b.n	8002380 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	3350      	adds	r3, #80	; 0x50
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10a      	bne.n	80022c4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	3342      	adds	r3, #66	; 0x42
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
      break;
 80022c2:	e05d      	b.n	8002380 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	3342      	adds	r3, #66	; 0x42
 80022d4:	2202      	movs	r2, #2
 80022d6:	701a      	strb	r2, [r3, #0]
      break;
 80022d8:	e052      	b.n	8002380 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80022da:	78bb      	ldrb	r3, [r7, #2]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d120      	bne.n	8002322 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	3351      	adds	r3, #81	; 0x51
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10a      	bne.n	800230c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	3342      	adds	r3, #66	; 0x42
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800230a:	e039      	b.n	8002380 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	3342      	adds	r3, #66	; 0x42
 800231c:	2202      	movs	r2, #2
 800231e:	701a      	strb	r2, [r3, #0]
      break;
 8002320:	e02e      	b.n	8002380 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	3350      	adds	r3, #80	; 0x50
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3342      	adds	r3, #66	; 0x42
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
      break;
 800234c:	e018      	b.n	8002380 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	3342      	adds	r3, #66	; 0x42
 800235e:	2202      	movs	r2, #2
 8002360:	701a      	strb	r2, [r3, #0]
      break;
 8002362:	e00d      	b.n	8002380 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	3342      	adds	r3, #66	; 0x42
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
      break;
 8002378:	e002      	b.n	8002380 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800237a:	bf00      	nop
 800237c:	e000      	b.n	8002380 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800237e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	3344      	adds	r3, #68	; 0x44
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	8b39      	ldrh	r1, [r7, #24]
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4403      	add	r3, r0
 80023a4:	3348      	adds	r3, #72	; 0x48
 80023a6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	335c      	adds	r3, #92	; 0x5c
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	334c      	adds	r3, #76	; 0x4c
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	3339      	adds	r3, #57	; 0x39
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	335d      	adds	r3, #93	; 0x5d
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	3338      	adds	r3, #56	; 0x38
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	4619      	mov	r1, r3
 800240e:	f005 fba5 	bl	8007b5c <USB_HC_StartXfer>
 8002412:	4603      	mov	r3, r0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f005 f919 	bl	800766a <USB_GetMode>
 8002438:	4603      	mov	r3, r0
 800243a:	2b01      	cmp	r3, #1
 800243c:	f040 80ef 	bne.w	800261e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f005 f8fd 	bl	8007644 <USB_ReadInterrupts>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80e5 	beq.w	800261c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f005 f8f4 	bl	8007644 <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002466:	d104      	bne.n	8002472 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002470:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f005 f8e4 	bl	8007644 <USB_ReadInterrupts>
 800247c:	4603      	mov	r3, r0
 800247e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002486:	d104      	bne.n	8002492 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002490:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f005 f8d4 	bl	8007644 <USB_ReadInterrupts>
 800249c:	4603      	mov	r3, r0
 800249e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024a6:	d104      	bne.n	80024b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f005 f8c4 	bl	8007644 <USB_ReadInterrupts>
 80024bc:	4603      	mov	r3, r0
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d103      	bne.n	80024ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2202      	movs	r2, #2
 80024cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f005 f8b6 	bl	8007644 <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e2:	d115      	bne.n	8002510 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80024ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d108      	bne.n	8002510 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f00b ff58 	bl	800e3b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2101      	movs	r1, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f005 f96e 	bl	80077ec <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f005 f895 	bl	8007644 <USB_ReadInterrupts>
 800251a:	4603      	mov	r3, r0
 800251c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002524:	d102      	bne.n	800252c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f001 f8aa 	bl	8003680 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f005 f887 	bl	8007644 <USB_ReadInterrupts>
 8002536:	4603      	mov	r3, r0
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b08      	cmp	r3, #8
 800253e:	d106      	bne.n	800254e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f00b ff1b 	bl	800e37c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2208      	movs	r2, #8
 800254c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f005 f876 	bl	8007644 <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002562:	d138      	bne.n	80025d6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f005 fbf7 	bl	8007d5c <USB_HC_ReadInterrupt>
 800256e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e025      	b.n	80025c2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d018      	beq.n	80025bc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800259c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a0:	d106      	bne.n	80025b0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f8cf 	bl	800274c <HCD_HC_IN_IRQHandler>
 80025ae:	e005      	b.n	80025bc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	4619      	mov	r1, r3
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fc61 	bl	8002e7e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3301      	adds	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d3d4      	bcc.n	8002576 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f005 f832 	bl	8007644 <USB_ReadInterrupts>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d101      	bne.n	80025ee <HAL_HCD_IRQHandler+0x1d2>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_HCD_IRQHandler+0x1d4>
 80025ee:	2300      	movs	r3, #0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d014      	beq.n	800261e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0210 	bic.w	r2, r2, #16
 8002602:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 ff8f 	bl	8003528 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699a      	ldr	r2, [r3, #24]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0210 	orr.w	r2, r2, #16
 8002618:	619a      	str	r2, [r3, #24]
 800261a:	e000      	b.n	800261e <HAL_HCD_IRQHandler+0x202>
      return;
 800261c:	bf00      	nop
    }
  }
}
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_HCD_Start+0x16>
 8002636:	2302      	movs	r3, #2
 8002638:	e013      	b.n	8002662 <HAL_HCD_Start+0x3e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f004 ff0e 	bl	8007468 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	4618      	mov	r0, r3
 8002654:	f005 f92e 	bl	80078b4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_HCD_Stop+0x16>
 800267c:	2302      	movs	r3, #2
 800267e:	e00d      	b.n	800269c <HAL_HCD_Stop+0x32>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f005 fc75 	bl	8007f7c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f005 f8d5 	bl	8007860 <USB_ResetPort>
 80026b6:	4603      	mov	r3, r0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	440b      	add	r3, r1
 80026da:	335c      	adds	r3, #92	; 0x5c
 80026dc:	781b      	ldrb	r3, [r3, #0]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80026f6:	78fa      	ldrb	r2, [r7, #3]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	334c      	adds	r3, #76	; 0x4c
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f005 f917 	bl	8007954 <USB_GetCurrentFrame>
 8002726:	4603      	mov	r3, r0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f005 f8f2 	bl	8007926 <USB_GetHostSpeed>
 8002742:	4603      	mov	r3, r0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b04      	cmp	r3, #4
 800277a:	d119      	bne.n	80027b0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	461a      	mov	r2, r3
 800278a:	2304      	movs	r3, #4
 800278c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	0151      	lsls	r1, r2, #5
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	440a      	add	r2, r1
 80027a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	60d3      	str	r3, [r2, #12]
 80027ae:	e095      	b.n	80028dc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d109      	bne.n	80027da <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	461a      	mov	r2, r3
 80027d4:	2320      	movs	r3, #32
 80027d6:	6093      	str	r3, [r2, #8]
 80027d8:	e080      	b.n	80028dc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d134      	bne.n	800285a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	0151      	lsls	r1, r2, #5
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	440a      	add	r2, r1
 8002806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800280a:	f043 0302 	orr.w	r3, r3, #2
 800280e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	335d      	adds	r3, #93	; 0x5d
 8002820:	2205      	movs	r2, #5
 8002822:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	2310      	movs	r3, #16
 8002834:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	461a      	mov	r2, r3
 8002844:	2308      	movs	r3, #8
 8002846:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f005 fa93 	bl	8007d7e <USB_HC_Halt>
 8002858:	e040      	b.n	80028dc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002870:	d134      	bne.n	80028dc <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	0151      	lsls	r1, r2, #5
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	440a      	add	r2, r1
 8002888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f005 fa6e 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ae:	461a      	mov	r2, r3
 80028b0:	2310      	movs	r3, #16
 80028b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	335d      	adds	r3, #93	; 0x5d
 80028c4:	2208      	movs	r2, #8
 80028c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d4:	461a      	mov	r2, r3
 80028d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028da:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f2:	d122      	bne.n	800293a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	0151      	lsls	r1, r2, #5
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	440a      	add	r2, r1
 800290a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800290e:	f043 0302 	orr.w	r3, r3, #2
 8002912:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f005 fa2d 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	461a      	mov	r2, r3
 8002932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002936:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002938:	e29d      	b.n	8002e76 <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	f040 80c7 	bne.w	8002ae0 <HCD_HC_IN_IRQHandler+0x394>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	335d      	adds	r3, #93	; 0x5d
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	3358      	adds	r3, #88	; 0x58
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	461a      	mov	r2, r3
 8002988:	2301      	movs	r3, #1
 800298a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	333f      	adds	r3, #63	; 0x3f
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	333f      	adds	r3, #63	; 0x3f
 80029b2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d121      	bne.n	80029fc <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	0151      	lsls	r1, r2, #5
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	440a      	add	r2, r1
 80029ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f005 f9cb 	bl	8007d7e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	461a      	mov	r2, r3
 80029f6:	2310      	movs	r3, #16
 80029f8:	6093      	str	r3, [r2, #8]
 80029fa:	e05a      	b.n	8002ab2 <HCD_HC_IN_IRQHandler+0x366>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	333f      	adds	r3, #63	; 0x3f
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d12a      	bne.n	8002a68 <HCD_HC_IN_IRQHandler+0x31c>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	0151      	lsls	r1, r2, #5
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	440a      	add	r2, r1
 8002a28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a30:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	335c      	adds	r3, #92	; 0x5c
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	b2d8      	uxtb	r0, r3
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	335c      	adds	r3, #92	; 0x5c
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4601      	mov	r1, r0
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f00b fcb5 	bl	800e3d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a66:	e024      	b.n	8002ab2 <HCD_HC_IN_IRQHandler+0x366>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	333f      	adds	r3, #63	; 0x3f
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d119      	bne.n	8002ab2 <HCD_HC_IN_IRQHandler+0x366>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	335c      	adds	r3, #92	; 0x5c
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	b2d8      	uxtb	r0, r3
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	440b      	add	r3, r1
 8002aa4:	335c      	adds	r3, #92	; 0x5c
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4601      	mov	r1, r0
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f00b fc8f 	bl	800e3d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	3350      	adds	r3, #80	; 0x50
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	f083 0301 	eor.w	r3, r3, #1
 8002ac8:	b2d8      	uxtb	r0, r3
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3350      	adds	r3, #80	; 0x50
 8002ada:	4602      	mov	r2, r0
 8002adc:	701a      	strb	r2, [r3, #0]
}
 8002ade:	e1ca      	b.n	8002e76 <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	f040 80f1 	bne.w	8002cda <HCD_HC_IN_IRQHandler+0x58e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	0151      	lsls	r1, r2, #5
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	440a      	add	r2, r1
 8002b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b12:	f023 0302 	bic.w	r3, r3, #2
 8002b16:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	440b      	add	r3, r1
 8002b26:	335d      	adds	r3, #93	; 0x5d
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d10a      	bne.n	8002b44 <HCD_HC_IN_IRQHandler+0x3f8>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	440b      	add	r3, r1
 8002b3c:	335c      	adds	r3, #92	; 0x5c
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
 8002b42:	e0b0      	b.n	8002ca6 <HCD_HC_IN_IRQHandler+0x55a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	335d      	adds	r3, #93	; 0x5d
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d10a      	bne.n	8002b70 <HCD_HC_IN_IRQHandler+0x424>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	440b      	add	r3, r1
 8002b68:	335c      	adds	r3, #92	; 0x5c
 8002b6a:	2205      	movs	r2, #5
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e09a      	b.n	8002ca6 <HCD_HC_IN_IRQHandler+0x55a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	335d      	adds	r3, #93	; 0x5d
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b06      	cmp	r3, #6
 8002b84:	d00a      	beq.n	8002b9c <HCD_HC_IN_IRQHandler+0x450>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	440b      	add	r3, r1
 8002b94:	335d      	adds	r3, #93	; 0x5d
 8002b96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d156      	bne.n	8002c4a <HCD_HC_IN_IRQHandler+0x4fe>
      hhcd->hc[ch_num].ErrCnt++;
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	440b      	add	r3, r1
 8002baa:	3358      	adds	r3, #88	; 0x58
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	1c59      	adds	r1, r3, #1
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4403      	add	r3, r0
 8002bbe:	3358      	adds	r3, #88	; 0x58
 8002bc0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	3358      	adds	r3, #88	; 0x58
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d914      	bls.n	8002c02 <HCD_HC_IN_IRQHandler+0x4b6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	3358      	adds	r3, #88	; 0x58
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	335c      	adds	r3, #92	; 0x5c
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e009      	b.n	8002c16 <HCD_HC_IN_IRQHandler+0x4ca>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	335c      	adds	r3, #92	; 0x5c
 8002c12:	2202      	movs	r2, #2
 8002c14:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c2c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c34:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c42:	461a      	mov	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	e02d      	b.n	8002ca6 <HCD_HC_IN_IRQHandler+0x55a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	440b      	add	r3, r1
 8002c58:	335d      	adds	r3, #93	; 0x5d
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d122      	bne.n	8002ca6 <HCD_HC_IN_IRQHandler+0x55a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	335c      	adds	r3, #92	; 0x5c
 8002c70:	2202      	movs	r2, #2
 8002c72:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c8a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c92:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	b2d8      	uxtb	r0, r3
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	440b      	add	r3, r1
 8002cca:	335c      	adds	r3, #92	; 0x5c
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	4601      	mov	r1, r0
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f00b fb7c 	bl	800e3d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cd8:	e0cd      	b.n	8002e76 <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cec:	2b80      	cmp	r3, #128	; 0x80
 8002cee:	d13e      	bne.n	8002d6e <HCD_HC_IN_IRQHandler+0x622>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	0151      	lsls	r1, r2, #5
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	440a      	add	r2, r1
 8002d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3358      	adds	r3, #88	; 0x58
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	1c59      	adds	r1, r3, #1
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4403      	add	r3, r0
 8002d32:	3358      	adds	r3, #88	; 0x58
 8002d34:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	440b      	add	r3, r1
 8002d44:	335d      	adds	r3, #93	; 0x5d
 8002d46:	2206      	movs	r2, #6
 8002d48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f005 f812 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	461a      	mov	r2, r3
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	6093      	str	r3, [r2, #8]
}
 8002d6c:	e083      	b.n	8002e76 <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d178      	bne.n	8002e76 <HCD_HC_IN_IRQHandler+0x72a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	333f      	adds	r3, #63	; 0x3f
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d122      	bne.n	8002de0 <HCD_HC_IN_IRQHandler+0x694>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	440b      	add	r3, r1
 8002da8:	3358      	adds	r3, #88	; 0x58
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	0151      	lsls	r1, r2, #5
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	440a      	add	r2, r1
 8002dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f004 ffd0 	bl	8007d7e <USB_HC_Halt>
 8002dde:	e041      	b.n	8002e64 <HCD_HC_IN_IRQHandler+0x718>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	333f      	adds	r3, #63	; 0x3f
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HCD_HC_IN_IRQHandler+0x6c0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	333f      	adds	r3, #63	; 0x3f
 8002e06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d12b      	bne.n	8002e64 <HCD_HC_IN_IRQHandler+0x718>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	3358      	adds	r3, #88	; 0x58
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	335d      	adds	r3, #93	; 0x5d
 8002e30:	2203      	movs	r2, #3
 8002e32:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	0151      	lsls	r1, r2, #5
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	440a      	add	r2, r1
 8002e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e4e:	f043 0302 	orr.w	r3, r3, #2
 8002e52:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f004 ff8d 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	461a      	mov	r2, r3
 8002e72:	2310      	movs	r3, #16
 8002e74:	6093      	str	r3, [r2, #8]
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d119      	bne.n	8002ee2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	0151      	lsls	r1, r2, #5
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	440a      	add	r2, r1
 8002ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eda:	f043 0302 	orr.w	r3, r3, #2
 8002ede:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002ee0:	e31e      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d141      	bne.n	8002f7c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	461a      	mov	r2, r3
 8002f06:	2320      	movs	r3, #32
 8002f08:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	440b      	add	r3, r1
 8002f18:	333d      	adds	r3, #61	; 0x3d
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	f040 82ff 	bne.w	8003520 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	440b      	add	r3, r1
 8002f30:	333d      	adds	r3, #61	; 0x3d
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	440b      	add	r3, r1
 8002f44:	335c      	adds	r3, #92	; 0x5c
 8002f46:	2202      	movs	r2, #2
 8002f48:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	0151      	lsls	r1, r2, #5
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	440a      	add	r2, r1
 8002f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f004 ff02 	bl	8007d7e <USB_HC_Halt>
}
 8002f7a:	e2d1      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	d13f      	bne.n	8003012 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	335d      	adds	r3, #93	; 0x5d
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	333d      	adds	r3, #61	; 0x3d
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3358      	adds	r3, #88	; 0x58
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	0151      	lsls	r1, r2, #5
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	440a      	add	r2, r1
 8002fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f004 fec0 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300a:	461a      	mov	r2, r3
 800300c:	2340      	movs	r3, #64	; 0x40
 800300e:	6093      	str	r3, [r2, #8]
}
 8003010:	e286      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003028:	d122      	bne.n	8003070 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	0151      	lsls	r1, r2, #5
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	440a      	add	r2, r1
 8003040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f004 fe92 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	461a      	mov	r2, r3
 8003068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800306c:	6093      	str	r3, [r2, #8]
}
 800306e:	e257      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d135      	bne.n	80030f2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	3358      	adds	r3, #88	; 0x58
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	0151      	lsls	r1, r2, #5
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	440a      	add	r2, r1
 80030b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030b4:	f043 0302 	orr.w	r3, r3, #2
 80030b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f004 fe5a 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d6:	461a      	mov	r2, r3
 80030d8:	2301      	movs	r3, #1
 80030da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	335d      	adds	r3, #93	; 0x5d
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]
}
 80030f0:	e216      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b08      	cmp	r3, #8
 8003106:	d12b      	bne.n	8003160 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003114:	461a      	mov	r2, r3
 8003116:	2308      	movs	r3, #8
 8003118:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	0151      	lsls	r1, r2, #5
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	440a      	add	r2, r1
 8003130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f004 fe1a 	bl	8007d7e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	335d      	adds	r3, #93	; 0x5d
 800315a:	2205      	movs	r2, #5
 800315c:	701a      	strb	r2, [r3, #0]
}
 800315e:	e1df      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4413      	add	r3, r2
 8003168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b10      	cmp	r3, #16
 8003174:	d135      	bne.n	80031e2 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	440b      	add	r3, r1
 8003184:	3358      	adds	r3, #88	; 0x58
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	440b      	add	r3, r1
 8003198:	335d      	adds	r3, #93	; 0x5d
 800319a:	2203      	movs	r2, #3
 800319c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	0151      	lsls	r1, r2, #5
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	440a      	add	r2, r1
 80031b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f004 fdd8 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031da:	461a      	mov	r2, r3
 80031dc:	2310      	movs	r3, #16
 80031de:	6093      	str	r3, [r2, #8]
}
 80031e0:	e19e      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	2b80      	cmp	r3, #128	; 0x80
 80031f6:	d12b      	bne.n	8003250 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	0151      	lsls	r1, r2, #5
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	440a      	add	r2, r1
 800320e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003212:	f043 0302 	orr.w	r3, r3, #2
 8003216:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f004 fdab 	bl	8007d7e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	440b      	add	r3, r1
 8003236:	335d      	adds	r3, #93	; 0x5d
 8003238:	2206      	movs	r2, #6
 800323a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003248:	461a      	mov	r2, r3
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	6093      	str	r3, [r2, #8]
}
 800324e:	e167      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4413      	add	r3, r2
 8003258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003266:	d135      	bne.n	80032d4 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	0151      	lsls	r1, r2, #5
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	440a      	add	r2, r1
 800327e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f004 fd73 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a4:	461a      	mov	r2, r3
 80032a6:	2310      	movs	r3, #16
 80032a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b6:	461a      	mov	r2, r3
 80032b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	440b      	add	r3, r1
 80032cc:	335d      	adds	r3, #93	; 0x5d
 80032ce:	2208      	movs	r2, #8
 80032d0:	701a      	strb	r2, [r3, #0]
}
 80032d2:	e125      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	f040 811a 	bne.w	8003520 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	0151      	lsls	r1, r2, #5
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	440a      	add	r2, r1
 8003302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003306:	f023 0302 	bic.w	r3, r3, #2
 800330a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	440b      	add	r3, r1
 800331a:	335d      	adds	r3, #93	; 0x5d
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d137      	bne.n	8003392 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	440b      	add	r3, r1
 8003330:	335c      	adds	r3, #92	; 0x5c
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	333f      	adds	r3, #63	; 0x3f
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d00b      	beq.n	8003364 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	440b      	add	r3, r1
 800335a:	333f      	adds	r3, #63	; 0x3f
 800335c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800335e:	2b03      	cmp	r3, #3
 8003360:	f040 80c5 	bne.w	80034ee <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	3351      	adds	r3, #81	; 0x51
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	f083 0301 	eor.w	r3, r3, #1
 800337a:	b2d8      	uxtb	r0, r3
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	440b      	add	r3, r1
 800338a:	3351      	adds	r3, #81	; 0x51
 800338c:	4602      	mov	r2, r0
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e0ad      	b.n	80034ee <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	440b      	add	r3, r1
 80033a0:	335d      	adds	r3, #93	; 0x5d
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d10a      	bne.n	80033be <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	335c      	adds	r3, #92	; 0x5c
 80033b8:	2202      	movs	r2, #2
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e097      	b.n	80034ee <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	335d      	adds	r3, #93	; 0x5d
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d10a      	bne.n	80033ea <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	335c      	adds	r3, #92	; 0x5c
 80033e4:	2202      	movs	r2, #2
 80033e6:	701a      	strb	r2, [r3, #0]
 80033e8:	e081      	b.n	80034ee <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	440b      	add	r3, r1
 80033f8:	335d      	adds	r3, #93	; 0x5d
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d10a      	bne.n	8003416 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	335c      	adds	r3, #92	; 0x5c
 8003410:	2205      	movs	r2, #5
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e06b      	b.n	80034ee <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	440b      	add	r3, r1
 8003424:	335d      	adds	r3, #93	; 0x5d
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b06      	cmp	r3, #6
 800342a:	d00a      	beq.n	8003442 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	440b      	add	r3, r1
 800343a:	335d      	adds	r3, #93	; 0x5d
 800343c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800343e:	2b08      	cmp	r3, #8
 8003440:	d155      	bne.n	80034ee <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	440b      	add	r3, r1
 8003450:	3358      	adds	r3, #88	; 0x58
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	1c59      	adds	r1, r3, #1
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4403      	add	r3, r0
 8003464:	3358      	adds	r3, #88	; 0x58
 8003466:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	440b      	add	r3, r1
 8003476:	3358      	adds	r3, #88	; 0x58
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b03      	cmp	r3, #3
 800347c:	d914      	bls.n	80034a8 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	440b      	add	r3, r1
 800348c:	3358      	adds	r3, #88	; 0x58
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	440b      	add	r3, r1
 80034a0:	335c      	adds	r3, #92	; 0x5c
 80034a2:	2204      	movs	r2, #4
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e009      	b.n	80034bc <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	440b      	add	r3, r1
 80034b6:	335c      	adds	r3, #92	; 0x5c
 80034b8:	2202      	movs	r2, #2
 80034ba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034d2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034da:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e8:	461a      	mov	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fa:	461a      	mov	r2, r3
 80034fc:	2302      	movs	r3, #2
 80034fe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	b2d8      	uxtb	r0, r3
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	335c      	adds	r3, #92	; 0x5c
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	4601      	mov	r1, r0
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f00a ff58 	bl	800e3d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003520:	bf00      	nop
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	0c5b      	lsrs	r3, r3, #17
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800355c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d003      	beq.n	800356c <HCD_RXQLVL_IRQHandler+0x44>
 8003564:	2b05      	cmp	r3, #5
 8003566:	f000 8082 	beq.w	800366e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800356a:	e083      	b.n	8003674 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d07f      	beq.n	8003672 <HCD_RXQLVL_IRQHandler+0x14a>
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	3344      	adds	r3, #68	; 0x44
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d074      	beq.n	8003672 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	440b      	add	r3, r1
 800359a:	3344      	adds	r3, #68	; 0x44
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	b292      	uxth	r2, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	f004 f825 	bl	80075f2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	440b      	add	r3, r1
 80035b6:	3344      	adds	r3, #68	; 0x44
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	18d1      	adds	r1, r2, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4403      	add	r3, r0
 80035cc:	3344      	adds	r3, #68	; 0x44
 80035ce:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	440b      	add	r3, r1
 80035de:	334c      	adds	r3, #76	; 0x4c
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	18d1      	adds	r1, r2, r3
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4403      	add	r3, r0
 80035f4:	334c      	adds	r3, #76	; 0x4c
 80035f6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	4b1d      	ldr	r3, [pc, #116]	; (800367c <HCD_RXQLVL_IRQHandler+0x154>)
 8003608:	4013      	ands	r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d031      	beq.n	8003672 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003624:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800362c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	4413      	add	r3, r2
 8003636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363a:	461a      	mov	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	3350      	adds	r3, #80	; 0x50
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	f083 0301 	eor.w	r3, r3, #1
 8003656:	b2d8      	uxtb	r0, r3
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	3350      	adds	r3, #80	; 0x50
 8003668:	4602      	mov	r2, r0
 800366a:	701a      	strb	r2, [r3, #0]
      break;
 800366c:	e001      	b.n	8003672 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003672:	bf00      	nop
  }
}
 8003674:	bf00      	nop
 8003676:	3728      	adds	r7, #40	; 0x28
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	1ff80000 	.word	0x1ff80000

08003680 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80036ac:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d10b      	bne.n	80036d0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d102      	bne.n	80036c8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f00a fe68 	bl	800e398 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f043 0302 	orr.w	r3, r3, #2
 80036ce:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d132      	bne.n	8003740 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f043 0308 	orr.w	r3, r3, #8
 80036e0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d126      	bne.n	800373a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d113      	bne.n	800371c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80036fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036fe:	d106      	bne.n	800370e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2102      	movs	r1, #2
 8003706:	4618      	mov	r0, r3
 8003708:	f004 f870 	bl	80077ec <USB_InitFSLSPClkSel>
 800370c:	e011      	b.n	8003732 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2101      	movs	r1, #1
 8003714:	4618      	mov	r0, r3
 8003716:	f004 f869 	bl	80077ec <USB_InitFSLSPClkSel>
 800371a:	e00a      	b.n	8003732 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d106      	bne.n	8003732 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800372a:	461a      	mov	r2, r3
 800372c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003730:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f00a fe5e 	bl	800e3f4 <HAL_HCD_PortEnabled_Callback>
 8003738:	e002      	b.n	8003740 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f00a fe68 	bl	800e410 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b20      	cmp	r3, #32
 8003748:	d103      	bne.n	8003752 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f043 0320 	orr.w	r3, r3, #32
 8003750:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003758:	461a      	mov	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	6013      	str	r3, [r2, #0]
}
 800375e:	bf00      	nop
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e081      	b.n	800387c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f00a fa23 	bl	800dbd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2224      	movs	r2, #36	; 0x24
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037dc:	609a      	str	r2, [r3, #8]
 80037de:	e006      	b.n	80037ee <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d104      	bne.n	8003800 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800380e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003812:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003822:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	ea42 0103 	orr.w	r1, r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	021a      	lsls	r2, r3, #8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69d9      	ldr	r1, [r3, #28]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1a      	ldr	r2, [r3, #32]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b20      	cmp	r3, #32
 8003898:	d138      	bne.n	800390c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e032      	b.n	800390e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6819      	ldr	r1, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	e000      	b.n	800390e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800390c:	2302      	movs	r3, #2
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800391a:	b480      	push	{r7}
 800391c:	b085      	sub	sp, #20
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b20      	cmp	r3, #32
 800392e:	d139      	bne.n	80039a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800393a:	2302      	movs	r3, #2
 800393c:	e033      	b.n	80039a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2224      	movs	r2, #36	; 0x24
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800396c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e000      	b.n	80039a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
  }
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e0af      	b.n	8003b26 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f00a f970 	bl	800dcc0 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	e00a      	b.n	8003a14 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	3304      	adds	r3, #4
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	3301      	adds	r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2b0f      	cmp	r3, #15
 8003a18:	d9f1      	bls.n	80039fe <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0204 	orr.w	r2, r2, #4
 8003a28:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <HAL_LCD_Init+0x17c>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6851      	ldr	r1, [r2, #4]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6892      	ldr	r2, [r2, #8]
 8003a3c:	4311      	orrs	r1, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a42:	4311      	orrs	r1, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a48:	4311      	orrs	r1, r2
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	69d2      	ldr	r2, [r2, #28]
 8003a4e:	4311      	orrs	r1, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6a12      	ldr	r2, [r2, #32]
 8003a54:	4311      	orrs	r1, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6992      	ldr	r2, [r2, #24]
 8003a5a:	4311      	orrs	r1, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a60:	4311      	orrs	r1, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	430b      	orrs	r3, r1
 8003a68:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f862 	bl	8003b34 <LCD_WaitForSynchro>
 8003a70:	4603      	mov	r3, r0
 8003a72:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_LCD_Init+0xca>
  {
    return status;
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	e053      	b.n	8003b26 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003ab6:	f7fc fd77 	bl	80005a8 <HAL_GetTick>
 8003aba:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8003abc:	e00c      	b.n	8003ad8 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8003abe:	f7fc fd73 	bl	80005a8 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003acc:	d904      	bls.n	8003ad8 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e026      	b.n	8003b26 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d1eb      	bne.n	8003abe <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003ae6:	f7fc fd5f 	bl	80005a8 <HAL_GetTick>
 8003aea:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8003aec:	e00c      	b.n	8003b08 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8003aee:	f7fc fd5b 	bl	80005a8 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003afc:	d904      	bls.n	8003b08 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2210      	movs	r2, #16
 8003b02:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e00e      	b.n	8003b26 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d1eb      	bne.n	8003aee <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	fc00000e 	.word	0xfc00000e

08003b34 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003b3c:	f7fc fd34 	bl	80005a8 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8003b42:	e00c      	b.n	8003b5e <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8003b44:	f7fc fd30 	bl	80005a8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b52:	d904      	bls.n	8003b5e <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e007      	b.n	8003b6e <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d1eb      	bne.n	8003b44 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a04      	ldr	r2, [pc, #16]	; (8003b94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b86:	6013      	str	r3, [r2, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40007000 	.word	0x40007000

08003b98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40007000 	.word	0x40007000

08003bb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc2:	d130      	bne.n	8003c26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bc4:	4b23      	ldr	r3, [pc, #140]	; (8003c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd0:	d038      	beq.n	8003c44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bd2:	4b20      	ldr	r3, [pc, #128]	; (8003c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bda:	4a1e      	ldr	r2, [pc, #120]	; (8003c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003be2:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2232      	movs	r2, #50	; 0x32
 8003be8:	fb02 f303 	mul.w	r3, r2, r3
 8003bec:	4a1b      	ldr	r2, [pc, #108]	; (8003c5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	0c9b      	lsrs	r3, r3, #18
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bf8:	e002      	b.n	8003c00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c00:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0c:	d102      	bne.n	8003c14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f2      	bne.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c14:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c20:	d110      	bne.n	8003c44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e00f      	b.n	8003c46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c32:	d007      	beq.n	8003c44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c34:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c3c:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40007000 	.word	0x40007000
 8003c58:	2000002c 	.word	0x2000002c
 8003c5c:	431bde83 	.word	0x431bde83

08003c60 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c6e:	6053      	str	r3, [r2, #4]
}
 8003c70:	bf00      	nop
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40007000 	.word	0x40007000

08003c80 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c88:	f7fc fc8e 	bl	80005a8 <HAL_GetTick>
 8003c8c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e06f      	b.n	8003d78 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_QSPI_Init+0x28>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e067      	b.n	8003d78 <HAL_QSPI_Init+0xf8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f00a f89d 	bl	800de04 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003cca:	f241 3188 	movw	r1, #5000	; 0x1388
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f858 	bl	8003d84 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	021a      	lsls	r2, r3, #8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2120      	movs	r1, #32
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f850 	bl	8003da0 <QSPI_WaitFlagStateUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003d04:	7afb      	ldrb	r3, [r7, #11]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d131      	bne.n	8003d6e <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d14:	f023 0310 	bic.w	r3, r3, #16
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6852      	ldr	r2, [r2, #4]
 8003d1c:	0611      	lsls	r1, r2, #24
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68d2      	ldr	r2, [r2, #12]
 8003d22:	4311      	orrs	r1, r2
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <HAL_QSPI_Init+0x100>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6912      	ldr	r2, [r2, #16]
 8003d3a:	0411      	lsls	r1, r2, #16
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6952      	ldr	r2, [r2, #20]
 8003d40:	4311      	orrs	r1, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6992      	ldr	r2, [r2, #24]
 8003d46:	4311      	orrs	r1, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003d76:	7afb      	ldrb	r3, [r7, #11]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	ffe0f8fe 	.word	0xffe0f8fe

08003d84 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	4613      	mov	r3, r2
 8003dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003db0:	e01a      	b.n	8003de8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d016      	beq.n	8003de8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dba:	f7fc fbf5 	bl	80005a8 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d302      	bcc.n	8003dd0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ddc:	f043 0201 	orr.w	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e00e      	b.n	8003e06 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d1d6      	bne.n	8003db2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e3d4      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e22:	4ba1      	ldr	r3, [pc, #644]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e2c:	4b9e      	ldr	r3, [pc, #632]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80e4 	beq.w	800400c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <HAL_RCC_OscConfig+0x4a>
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	f040 808b 	bne.w	8003f68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	f040 8087 	bne.w	8003f68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e5a:	4b93      	ldr	r3, [pc, #588]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d005      	beq.n	8003e72 <HAL_RCC_OscConfig+0x62>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e3ac      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1a      	ldr	r2, [r3, #32]
 8003e76:	4b8c      	ldr	r3, [pc, #560]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d004      	beq.n	8003e8c <HAL_RCC_OscConfig+0x7c>
 8003e82:	4b89      	ldr	r3, [pc, #548]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e8a:	e005      	b.n	8003e98 <HAL_RCC_OscConfig+0x88>
 8003e8c:	4b86      	ldr	r3, [pc, #536]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e92:	091b      	lsrs	r3, r3, #4
 8003e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d223      	bcs.n	8003ee4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fd3f 	bl	8004924 <RCC_SetFlashLatencyFromMSIRange>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e38d      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eb0:	4b7d      	ldr	r3, [pc, #500]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a7c      	ldr	r2, [pc, #496]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003eb6:	f043 0308 	orr.w	r3, r3, #8
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b7a      	ldr	r3, [pc, #488]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	4977      	ldr	r1, [pc, #476]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ece:	4b76      	ldr	r3, [pc, #472]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	4972      	ldr	r1, [pc, #456]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	604b      	str	r3, [r1, #4]
 8003ee2:	e025      	b.n	8003f30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ee4:	4b70      	ldr	r3, [pc, #448]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a6f      	ldr	r2, [pc, #444]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003eea:	f043 0308 	orr.w	r3, r3, #8
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	4b6d      	ldr	r3, [pc, #436]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	496a      	ldr	r1, [pc, #424]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f02:	4b69      	ldr	r3, [pc, #420]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	4965      	ldr	r1, [pc, #404]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d109      	bne.n	8003f30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fcff 	bl	8004924 <RCC_SetFlashLatencyFromMSIRange>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e34d      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f30:	f000 fc36 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8003f34:	4601      	mov	r1, r0
 8003f36:	4b5c      	ldr	r3, [pc, #368]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	4a5a      	ldr	r2, [pc, #360]	; (80040ac <HAL_RCC_OscConfig+0x29c>)
 8003f42:	5cd3      	ldrb	r3, [r2, r3]
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	fa21 f303 	lsr.w	r3, r1, r3
 8003f4c:	4a58      	ldr	r2, [pc, #352]	; (80040b0 <HAL_RCC_OscConfig+0x2a0>)
 8003f4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f50:	4b58      	ldr	r3, [pc, #352]	; (80040b4 <HAL_RCC_OscConfig+0x2a4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fc fadb 	bl	8000510 <HAL_InitTick>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d052      	beq.n	800400a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	e331      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d032      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f70:	4b4d      	ldr	r3, [pc, #308]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a4c      	ldr	r2, [pc, #304]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f7c:	f7fc fb14 	bl	80005a8 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f84:	f7fc fb10 	bl	80005a8 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e31a      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f96:	4b44      	ldr	r3, [pc, #272]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fa2:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a40      	ldr	r2, [pc, #256]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003fa8:	f043 0308 	orr.w	r3, r3, #8
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	4b3e      	ldr	r3, [pc, #248]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	493b      	ldr	r1, [pc, #236]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fc0:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	4936      	ldr	r1, [pc, #216]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]
 8003fd4:	e01a      	b.n	800400c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fd6:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a33      	ldr	r2, [pc, #204]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fe2:	f7fc fae1 	bl	80005a8 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fea:	f7fc fadd 	bl	80005a8 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e2e7      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ffc:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f0      	bne.n	8003fea <HAL_RCC_OscConfig+0x1da>
 8004008:	e000      	b.n	800400c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800400a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d074      	beq.n	8004102 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b08      	cmp	r3, #8
 800401c:	d005      	beq.n	800402a <HAL_RCC_OscConfig+0x21a>
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b0c      	cmp	r3, #12
 8004022:	d10e      	bne.n	8004042 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2b03      	cmp	r3, #3
 8004028:	d10b      	bne.n	8004042 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800402a:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d064      	beq.n	8004100 <HAL_RCC_OscConfig+0x2f0>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d160      	bne.n	8004100 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e2c4      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404a:	d106      	bne.n	800405a <HAL_RCC_OscConfig+0x24a>
 800404c:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8004052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	e01d      	b.n	8004096 <HAL_RCC_OscConfig+0x286>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004062:	d10c      	bne.n	800407e <HAL_RCC_OscConfig+0x26e>
 8004064:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a0f      	ldr	r2, [pc, #60]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 800406a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a0c      	ldr	r2, [pc, #48]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8004076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	e00b      	b.n	8004096 <HAL_RCC_OscConfig+0x286>
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8004084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a06      	ldr	r2, [pc, #24]	; (80040a8 <HAL_RCC_OscConfig+0x298>)
 8004090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004094:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d01c      	beq.n	80040d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409e:	f7fc fa83 	bl	80005a8 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a4:	e011      	b.n	80040ca <HAL_RCC_OscConfig+0x2ba>
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	0800eae8 	.word	0x0800eae8
 80040b0:	2000002c 	.word	0x2000002c
 80040b4:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fc fa76 	bl	80005a8 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e280      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ca:	4baf      	ldr	r3, [pc, #700]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x2a8>
 80040d6:	e014      	b.n	8004102 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fc fa66 	bl	80005a8 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fc fa62 	bl	80005a8 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e26c      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040f2:	4ba5      	ldr	r3, [pc, #660]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x2d0>
 80040fe:	e000      	b.n	8004102 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d060      	beq.n	80041d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b04      	cmp	r3, #4
 8004112:	d005      	beq.n	8004120 <HAL_RCC_OscConfig+0x310>
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b0c      	cmp	r3, #12
 8004118:	d119      	bne.n	800414e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b02      	cmp	r3, #2
 800411e:	d116      	bne.n	800414e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004120:	4b99      	ldr	r3, [pc, #612]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_OscConfig+0x328>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e249      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004138:	4b93      	ldr	r3, [pc, #588]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	4990      	ldr	r1, [pc, #576]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800414c:	e040      	b.n	80041d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d023      	beq.n	800419e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004156:	4b8c      	ldr	r3, [pc, #560]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a8b      	ldr	r2, [pc, #556]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004162:	f7fc fa21 	bl	80005a8 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800416a:	f7fc fa1d 	bl	80005a8 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e227      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800417c:	4b82      	ldr	r3, [pc, #520]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004188:	4b7f      	ldr	r3, [pc, #508]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	061b      	lsls	r3, r3, #24
 8004196:	497c      	ldr	r1, [pc, #496]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004198:	4313      	orrs	r3, r2
 800419a:	604b      	str	r3, [r1, #4]
 800419c:	e018      	b.n	80041d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800419e:	4b7a      	ldr	r3, [pc, #488]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a79      	ldr	r2, [pc, #484]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80041a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fc f9fd 	bl	80005a8 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b2:	f7fc f9f9 	bl	80005a8 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e203      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c4:	4b70      	ldr	r3, [pc, #448]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1f0      	bne.n	80041b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d03c      	beq.n	8004256 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01c      	beq.n	800421e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e4:	4b68      	ldr	r3, [pc, #416]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80041e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ea:	4a67      	ldr	r2, [pc, #412]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fc f9d8 	bl	80005a8 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fc:	f7fc f9d4 	bl	80005a8 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e1de      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800420e:	4b5e      	ldr	r3, [pc, #376]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ef      	beq.n	80041fc <HAL_RCC_OscConfig+0x3ec>
 800421c:	e01b      	b.n	8004256 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800421e:	4b5a      	ldr	r3, [pc, #360]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004224:	4a58      	ldr	r2, [pc, #352]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422e:	f7fc f9bb 	bl	80005a8 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004236:	f7fc f9b7 	bl	80005a8 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e1c1      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004248:	4b4f      	ldr	r3, [pc, #316]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800424a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1ef      	bne.n	8004236 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 80a6 	beq.w	80043b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004264:	2300      	movs	r3, #0
 8004266:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004268:	4b47      	ldr	r3, [pc, #284]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10d      	bne.n	8004290 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004274:	4b44      	ldr	r3, [pc, #272]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004278:	4a43      	ldr	r2, [pc, #268]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800427a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427e:	6593      	str	r3, [r2, #88]	; 0x58
 8004280:	4b41      	ldr	r3, [pc, #260]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800428c:	2301      	movs	r3, #1
 800428e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004290:	4b3e      	ldr	r3, [pc, #248]	; (800438c <HAL_RCC_OscConfig+0x57c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d118      	bne.n	80042ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800429c:	4b3b      	ldr	r3, [pc, #236]	; (800438c <HAL_RCC_OscConfig+0x57c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a3a      	ldr	r2, [pc, #232]	; (800438c <HAL_RCC_OscConfig+0x57c>)
 80042a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a8:	f7fc f97e 	bl	80005a8 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b0:	f7fc f97a 	bl	80005a8 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e184      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c2:	4b32      	ldr	r3, [pc, #200]	; (800438c <HAL_RCC_OscConfig+0x57c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d108      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4d8>
 80042d6:	4b2c      	ldr	r3, [pc, #176]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	4a2a      	ldr	r2, [pc, #168]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e6:	e024      	b.n	8004332 <HAL_RCC_OscConfig+0x522>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b05      	cmp	r3, #5
 80042ee:	d110      	bne.n	8004312 <HAL_RCC_OscConfig+0x502>
 80042f0:	4b25      	ldr	r3, [pc, #148]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	4a24      	ldr	r2, [pc, #144]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 80042f8:	f043 0304 	orr.w	r3, r3, #4
 80042fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004300:	4b21      	ldr	r3, [pc, #132]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	4a20      	ldr	r2, [pc, #128]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004310:	e00f      	b.n	8004332 <HAL_RCC_OscConfig+0x522>
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004322:	4b19      	ldr	r3, [pc, #100]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	4a17      	ldr	r2, [pc, #92]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800432a:	f023 0304 	bic.w	r3, r3, #4
 800432e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d016      	beq.n	8004368 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433a:	f7fc f935 	bl	80005a8 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004340:	e00a      	b.n	8004358 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004342:	f7fc f931 	bl	80005a8 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004350:	4293      	cmp	r3, r2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e139      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_OscConfig+0x578>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0ed      	beq.n	8004342 <HAL_RCC_OscConfig+0x532>
 8004366:	e01a      	b.n	800439e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004368:	f7fc f91e 	bl	80005a8 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800436e:	e00f      	b.n	8004390 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004370:	f7fc f91a 	bl	80005a8 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d906      	bls.n	8004390 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e122      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000
 800438c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004390:	4b90      	ldr	r3, [pc, #576]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e8      	bne.n	8004370 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800439e:	7ffb      	ldrb	r3, [r7, #31]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d105      	bne.n	80043b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a4:	4b8b      	ldr	r3, [pc, #556]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	4a8a      	ldr	r2, [pc, #552]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 80043aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8108 	beq.w	80045ca <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	2b02      	cmp	r3, #2
 80043c0:	f040 80d0 	bne.w	8004564 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043c4:	4b83      	ldr	r3, [pc, #524]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f003 0203 	and.w	r2, r3, #3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d130      	bne.n	800443a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	3b01      	subs	r3, #1
 80043e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d127      	bne.n	800443a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d11f      	bne.n	800443a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004404:	2a07      	cmp	r2, #7
 8004406:	bf14      	ite	ne
 8004408:	2201      	movne	r2, #1
 800440a:	2200      	moveq	r2, #0
 800440c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800440e:	4293      	cmp	r3, r2
 8004410:	d113      	bne.n	800443a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	3b01      	subs	r3, #1
 8004420:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d109      	bne.n	800443a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	3b01      	subs	r3, #1
 8004434:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004436:	429a      	cmp	r2, r3
 8004438:	d06e      	beq.n	8004518 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b0c      	cmp	r3, #12
 800443e:	d069      	beq.n	8004514 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004440:	4b64      	ldr	r3, [pc, #400]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d105      	bne.n	8004458 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800444c:	4b61      	ldr	r3, [pc, #388]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0b7      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800445c:	4b5d      	ldr	r3, [pc, #372]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a5c      	ldr	r2, [pc, #368]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004466:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004468:	f7fc f89e 	bl	80005a8 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004470:	f7fc f89a 	bl	80005a8 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e0a4      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004482:	4b54      	ldr	r3, [pc, #336]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800448e:	4b51      	ldr	r3, [pc, #324]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	4b51      	ldr	r3, [pc, #324]	; (80045d8 <HAL_RCC_OscConfig+0x7c8>)
 8004494:	4013      	ands	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800449e:	3a01      	subs	r2, #1
 80044a0:	0112      	lsls	r2, r2, #4
 80044a2:	4311      	orrs	r1, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044a8:	0212      	lsls	r2, r2, #8
 80044aa:	4311      	orrs	r1, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044b0:	0852      	lsrs	r2, r2, #1
 80044b2:	3a01      	subs	r2, #1
 80044b4:	0552      	lsls	r2, r2, #21
 80044b6:	4311      	orrs	r1, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044bc:	0852      	lsrs	r2, r2, #1
 80044be:	3a01      	subs	r2, #1
 80044c0:	0652      	lsls	r2, r2, #25
 80044c2:	4311      	orrs	r1, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044c8:	0912      	lsrs	r2, r2, #4
 80044ca:	0452      	lsls	r2, r2, #17
 80044cc:	430a      	orrs	r2, r1
 80044ce:	4941      	ldr	r1, [pc, #260]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044d4:	4b3f      	ldr	r3, [pc, #252]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a3e      	ldr	r2, [pc, #248]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 80044da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044e0:	4b3c      	ldr	r3, [pc, #240]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a3b      	ldr	r2, [pc, #236]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 80044e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044ec:	f7fc f85c 	bl	80005a8 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fc f858 	bl	80005a8 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e062      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004506:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004512:	e05a      	b.n	80045ca <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e059      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004518:	4b2e      	ldr	r3, [pc, #184]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d152      	bne.n	80045ca <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004524:	4b2b      	ldr	r3, [pc, #172]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 800452a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800452e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004530:	4b28      	ldr	r3, [pc, #160]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4a27      	ldr	r2, [pc, #156]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800453a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800453c:	f7fc f834 	bl	80005a8 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004544:	f7fc f830 	bl	80005a8 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e03a      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004556:	4b1f      	ldr	r3, [pc, #124]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x734>
 8004562:	e032      	b.n	80045ca <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b0c      	cmp	r3, #12
 8004568:	d02d      	beq.n	80045c6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456a:	4b1a      	ldr	r3, [pc, #104]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a19      	ldr	r2, [pc, #100]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004574:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004576:	4b17      	ldr	r3, [pc, #92]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d105      	bne.n	800458e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004582:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004588:	f023 0303 	bic.w	r3, r3, #3
 800458c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	4a10      	ldr	r2, [pc, #64]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 8004594:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fc f803 	bl	80005a8 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a6:	f7fb ffff 	bl	80005a8 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e009      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <HAL_RCC_OscConfig+0x7c4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x796>
 80045c4:	e001      	b.n	80045ca <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40021000 	.word	0x40021000
 80045d8:	f99d808c 	.word	0xf99d808c

080045dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0c8      	b.n	8004782 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045f0:	4b66      	ldr	r3, [pc, #408]	; (800478c <HAL_RCC_ClockConfig+0x1b0>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d910      	bls.n	8004620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b63      	ldr	r3, [pc, #396]	; (800478c <HAL_RCC_ClockConfig+0x1b0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 0207 	bic.w	r2, r3, #7
 8004606:	4961      	ldr	r1, [pc, #388]	; (800478c <HAL_RCC_ClockConfig+0x1b0>)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b5f      	ldr	r3, [pc, #380]	; (800478c <HAL_RCC_ClockConfig+0x1b0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d001      	beq.n	8004620 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0b0      	b.n	8004782 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d04c      	beq.n	80046c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b03      	cmp	r3, #3
 8004632:	d107      	bne.n	8004644 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004634:	4b56      	ldr	r3, [pc, #344]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d121      	bne.n	8004684 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e09e      	b.n	8004782 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d107      	bne.n	800465c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800464c:	4b50      	ldr	r3, [pc, #320]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d115      	bne.n	8004684 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e092      	b.n	8004782 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d107      	bne.n	8004674 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004664:	4b4a      	ldr	r3, [pc, #296]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d109      	bne.n	8004684 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e086      	b.n	8004782 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004674:	4b46      	ldr	r3, [pc, #280]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e07e      	b.n	8004782 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004684:	4b42      	ldr	r3, [pc, #264]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 0203 	bic.w	r2, r3, #3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	493f      	ldr	r1, [pc, #252]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004696:	f7fb ff87 	bl	80005a8 <HAL_GetTick>
 800469a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469e:	f7fb ff83 	bl	80005a8 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e066      	b.n	8004782 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b4:	4b36      	ldr	r3, [pc, #216]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 020c 	and.w	r2, r3, #12
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d1eb      	bne.n	800469e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d2:	4b2f      	ldr	r3, [pc, #188]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	492c      	ldr	r1, [pc, #176]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e4:	4b29      	ldr	r3, [pc, #164]	; (800478c <HAL_RCC_ClockConfig+0x1b0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d210      	bcs.n	8004714 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	4b26      	ldr	r3, [pc, #152]	; (800478c <HAL_RCC_ClockConfig+0x1b0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 0207 	bic.w	r2, r3, #7
 80046fa:	4924      	ldr	r1, [pc, #144]	; (800478c <HAL_RCC_ClockConfig+0x1b0>)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	4313      	orrs	r3, r2
 8004700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b22      	ldr	r3, [pc, #136]	; (800478c <HAL_RCC_ClockConfig+0x1b0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e036      	b.n	8004782 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004720:	4b1b      	ldr	r3, [pc, #108]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4918      	ldr	r1, [pc, #96]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800473e:	4b14      	ldr	r3, [pc, #80]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4910      	ldr	r1, [pc, #64]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004752:	f000 f825 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8004756:	4601      	mov	r1, r0
 8004758:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <HAL_RCC_ClockConfig+0x1b4>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	4a0c      	ldr	r2, [pc, #48]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 8004764:	5cd3      	ldrb	r3, [r2, r3]
 8004766:	f003 031f 	and.w	r3, r3, #31
 800476a:	fa21 f303 	lsr.w	r3, r1, r3
 800476e:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fb feca 	bl	8000510 <HAL_InitTick>
 800477c:	4603      	mov	r3, r0
 800477e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004780:	7afb      	ldrb	r3, [r7, #11]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40022000 	.word	0x40022000
 8004790:	40021000 	.word	0x40021000
 8004794:	0800eae8 	.word	0x0800eae8
 8004798:	2000002c 	.word	0x2000002c
 800479c:	20000000 	.word	0x20000000

080047a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b089      	sub	sp, #36	; 0x24
 80047a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	2300      	movs	r3, #0
 80047ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ae:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047b8:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq+0x34>
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d121      	bne.n	8004812 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d11e      	bne.n	8004812 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047d4:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d107      	bne.n	80047f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047e0:	4b30      	ldr	r3, [pc, #192]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80047e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	e005      	b.n	80047fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047f0:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047fc:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004804:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10d      	bne.n	8004828 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b04      	cmp	r3, #4
 8004816:	d102      	bne.n	800481e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004818:	4b24      	ldr	r3, [pc, #144]	; (80048ac <HAL_RCC_GetSysClockFreq+0x10c>)
 800481a:	61bb      	str	r3, [r7, #24]
 800481c:	e004      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d101      	bne.n	8004828 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004824:	4b22      	ldr	r3, [pc, #136]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004826:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b0c      	cmp	r3, #12
 800482c:	d133      	bne.n	8004896 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800482e:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d002      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0xa4>
 800483e:	2b03      	cmp	r3, #3
 8004840:	d003      	beq.n	800484a <HAL_RCC_GetSysClockFreq+0xaa>
 8004842:	e005      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004844:	4b19      	ldr	r3, [pc, #100]	; (80048ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8004846:	617b      	str	r3, [r7, #20]
      break;
 8004848:	e005      	b.n	8004856 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800484a:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800484c:	617b      	str	r3, [r7, #20]
      break;
 800484e:	e002      	b.n	8004856 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	617b      	str	r3, [r7, #20]
      break;
 8004854:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	091b      	lsrs	r3, r3, #4
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	3301      	adds	r3, #1
 8004862:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004864:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	0a1b      	lsrs	r3, r3, #8
 800486a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	fb02 f203 	mul.w	r2, r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800487c:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x104>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	0e5b      	lsrs	r3, r3, #25
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	3301      	adds	r3, #1
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004896:	69bb      	ldr	r3, [r7, #24]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3724      	adds	r7, #36	; 0x24
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40021000 	.word	0x40021000
 80048a8:	0800eb00 	.word	0x0800eb00
 80048ac:	00f42400 	.word	0x00f42400
 80048b0:	007a1200 	.word	0x007a1200

080048b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	2000002c 	.word	0x2000002c

080048cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048d0:	f7ff fff0 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048d4:	4601      	mov	r1, r0
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048e2:	5cd3      	ldrb	r3, [r2, r3]
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021000 	.word	0x40021000
 80048f4:	0800eaf8 	.word	0x0800eaf8

080048f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048fc:	f7ff ffda 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 8004900:	4601      	mov	r1, r0
 8004902:	4b06      	ldr	r3, [pc, #24]	; (800491c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	0adb      	lsrs	r3, r3, #11
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	4a04      	ldr	r2, [pc, #16]	; (8004920 <HAL_RCC_GetPCLK2Freq+0x28>)
 800490e:	5cd3      	ldrb	r3, [r2, r3]
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40021000 	.word	0x40021000
 8004920:	0800eaf8 	.word	0x0800eaf8

08004924 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800492c:	2300      	movs	r3, #0
 800492e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004930:	4b2a      	ldr	r3, [pc, #168]	; (80049dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800493c:	f7ff f92c 	bl	8003b98 <HAL_PWREx_GetVoltageRange>
 8004940:	6178      	str	r0, [r7, #20]
 8004942:	e014      	b.n	800496e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	4a24      	ldr	r2, [pc, #144]	; (80049dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800494a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494e:	6593      	str	r3, [r2, #88]	; 0x58
 8004950:	4b22      	ldr	r3, [pc, #136]	; (80049dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800495c:	f7ff f91c 	bl	8003b98 <HAL_PWREx_GetVoltageRange>
 8004960:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800496c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004974:	d10b      	bne.n	800498e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b80      	cmp	r3, #128	; 0x80
 800497a:	d919      	bls.n	80049b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2ba0      	cmp	r3, #160	; 0xa0
 8004980:	d902      	bls.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004982:	2302      	movs	r3, #2
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	e013      	b.n	80049b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004988:	2301      	movs	r3, #1
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	e010      	b.n	80049b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b80      	cmp	r3, #128	; 0x80
 8004992:	d902      	bls.n	800499a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004994:	2303      	movs	r3, #3
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	e00a      	b.n	80049b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b80      	cmp	r3, #128	; 0x80
 800499e:	d102      	bne.n	80049a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049a0:	2302      	movs	r3, #2
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	e004      	b.n	80049b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b70      	cmp	r3, #112	; 0x70
 80049aa:	d101      	bne.n	80049b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049ac:	2301      	movs	r3, #1
 80049ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f023 0207 	bic.w	r2, r3, #7
 80049b8:	4909      	ldr	r1, [pc, #36]	; (80049e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d001      	beq.n	80049d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40022000 	.word	0x40022000

080049e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049ec:	2300      	movs	r3, #0
 80049ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049f0:	2300      	movs	r3, #0
 80049f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d03f      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a08:	d01c      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a0e:	d802      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00e      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004a14:	e01f      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004a16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a1a:	d003      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004a1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a20:	d01c      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004a22:	e018      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a24:	4b85      	ldr	r3, [pc, #532]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a84      	ldr	r2, [pc, #528]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a30:	e015      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 ff4f 	bl	80058dc <RCCEx_PLLSAI1_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a42:	e00c      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3320      	adds	r3, #32
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f001 f836 	bl	8005abc <RCCEx_PLLSAI2_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a54:	e003      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	74fb      	strb	r3, [r7, #19]
      break;
 8004a5a:	e000      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a64:	4b75      	ldr	r3, [pc, #468]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a72:	4972      	ldr	r1, [pc, #456]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a7a:	e001      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	7cfb      	ldrb	r3, [r7, #19]
 8004a7e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d03f      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a94:	d01c      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a9a:	d802      	bhi.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00e      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004aa0:	e01f      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004aa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aa6:	d003      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004aa8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aac:	d01c      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004aae:	e018      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ab0:	4b62      	ldr	r3, [pc, #392]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a61      	ldr	r2, [pc, #388]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004abc:	e015      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 ff09 	bl	80058dc <RCCEx_PLLSAI1_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ace:	e00c      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3320      	adds	r3, #32
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fff0 	bl	8005abc <RCCEx_PLLSAI2_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ae0:	e003      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ae6:	e000      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10b      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004af0:	4b52      	ldr	r3, [pc, #328]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004afe:	494f      	ldr	r1, [pc, #316]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b06:	e001      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b08:	7cfb      	ldrb	r3, [r7, #19]
 8004b0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80a0 	beq.w	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b1e:	4b47      	ldr	r3, [pc, #284]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00d      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b34:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	4a40      	ldr	r2, [pc, #256]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b40:	4b3e      	ldr	r3, [pc, #248]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b50:	4b3b      	ldr	r3, [pc, #236]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a3a      	ldr	r2, [pc, #232]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b5c:	f7fb fd24 	bl	80005a8 <HAL_GetTick>
 8004b60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b62:	e009      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b64:	f7fb fd20 	bl	80005a8 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d902      	bls.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	74fb      	strb	r3, [r7, #19]
        break;
 8004b76:	e005      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b78:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0ef      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004b84:	7cfb      	ldrb	r3, [r7, #19]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d15c      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b8a:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01f      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d019      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ba8:	4b24      	ldr	r3, [pc, #144]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bb4:	4b21      	ldr	r3, [pc, #132]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	4a20      	ldr	r2, [pc, #128]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bc4:	4b1d      	ldr	r3, [pc, #116]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	4a1c      	ldr	r2, [pc, #112]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bd4:	4a19      	ldr	r2, [pc, #100]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d016      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be6:	f7fb fcdf 	bl	80005a8 <HAL_GetTick>
 8004bea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bec:	e00b      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bee:	f7fb fcdb 	bl	80005a8 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d902      	bls.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	74fb      	strb	r3, [r7, #19]
            break;
 8004c04:	e006      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c06:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0ec      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004c14:	7cfb      	ldrb	r3, [r7, #19]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10c      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c1a:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2a:	4904      	ldr	r1, [pc, #16]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c32:	e009      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	74bb      	strb	r3, [r7, #18]
 8004c38:	e006      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c44:	7cfb      	ldrb	r3, [r7, #19]
 8004c46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c48:	7c7b      	ldrb	r3, [r7, #17]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4e:	4b9e      	ldr	r3, [pc, #632]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c52:	4a9d      	ldr	r2, [pc, #628]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c66:	4b98      	ldr	r3, [pc, #608]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f023 0203 	bic.w	r2, r3, #3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	4994      	ldr	r1, [pc, #592]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c88:	4b8f      	ldr	r3, [pc, #572]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f023 020c 	bic.w	r2, r3, #12
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	498c      	ldr	r1, [pc, #560]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004caa:	4b87      	ldr	r3, [pc, #540]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	4983      	ldr	r1, [pc, #524]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ccc:	4b7e      	ldr	r3, [pc, #504]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cda:	497b      	ldr	r1, [pc, #492]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cee:	4b76      	ldr	r3, [pc, #472]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfc:	4972      	ldr	r1, [pc, #456]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d10:	4b6d      	ldr	r3, [pc, #436]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1e:	496a      	ldr	r1, [pc, #424]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d32:	4b65      	ldr	r3, [pc, #404]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d40:	4961      	ldr	r1, [pc, #388]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d54:	4b5c      	ldr	r3, [pc, #368]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d62:	4959      	ldr	r1, [pc, #356]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d76:	4b54      	ldr	r3, [pc, #336]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d84:	4950      	ldr	r1, [pc, #320]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d98:	4b4b      	ldr	r3, [pc, #300]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	4948      	ldr	r1, [pc, #288]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dba:	4b43      	ldr	r3, [pc, #268]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc8:	493f      	ldr	r1, [pc, #252]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d028      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ddc:	4b3a      	ldr	r3, [pc, #232]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dea:	4937      	ldr	r1, [pc, #220]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dfa:	d106      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dfc:	4b32      	ldr	r3, [pc, #200]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4a31      	ldr	r2, [pc, #196]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e06:	60d3      	str	r3, [r2, #12]
 8004e08:	e011      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e12:	d10c      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3304      	adds	r3, #4
 8004e18:	2101      	movs	r1, #1
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fd5e 	bl	80058dc <RCCEx_PLLSAI1_Config>
 8004e20:	4603      	mov	r3, r0
 8004e22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e24:	7cfb      	ldrb	r3, [r7, #19]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004e2a:	7cfb      	ldrb	r3, [r7, #19]
 8004e2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d028      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e3a:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e48:	491f      	ldr	r1, [pc, #124]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e58:	d106      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e64:	60d3      	str	r3, [r2, #12]
 8004e66:	e011      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3304      	adds	r3, #4
 8004e76:	2101      	movs	r1, #1
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fd2f 	bl	80058dc <RCCEx_PLLSAI1_Config>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e82:	7cfb      	ldrb	r3, [r7, #19]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004e88:	7cfb      	ldrb	r3, [r7, #19]
 8004e8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d02b      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea6:	4908      	ldr	r1, [pc, #32]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb6:	d109      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4a02      	ldr	r2, [pc, #8]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec2:	60d3      	str	r3, [r2, #12]
 8004ec4:	e014      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004ec6:	bf00      	nop
 8004ec8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	2101      	movs	r1, #1
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fcfd 	bl	80058dc <RCCEx_PLLSAI1_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ee6:	7cfb      	ldrb	r3, [r7, #19]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d02f      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004efc:	4b2b      	ldr	r3, [pc, #172]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f0a:	4928      	ldr	r1, [pc, #160]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f1a:	d10d      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	2102      	movs	r1, #2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fcda 	bl	80058dc <RCCEx_PLLSAI1_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f2c:	7cfb      	ldrb	r3, [r7, #19]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d014      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004f32:	7cfb      	ldrb	r3, [r7, #19]
 8004f34:	74bb      	strb	r3, [r7, #18]
 8004f36:	e011      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3320      	adds	r3, #32
 8004f46:	2102      	movs	r1, #2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fdb7 	bl	8005abc <RCCEx_PLLSAI2_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f52:	7cfb      	ldrb	r3, [r7, #19]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004f58:	7cfb      	ldrb	r3, [r7, #19]
 8004f5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f68:	4b10      	ldr	r3, [pc, #64]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f76:	490d      	ldr	r1, [pc, #52]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00b      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f8a:	4b08      	ldr	r3, [pc, #32]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9a:	4904      	ldr	r1, [pc, #16]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fa2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40021000 	.word	0x40021000

08004fb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fc2:	d137      	bne.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004fc4:	4bb8      	ldr	r3, [pc, #736]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fce:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd6:	d014      	beq.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fdc:	d01e      	beq.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8004fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004fe4:	f000 bc60 	b.w	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004fe8:	4baf      	ldr	r3, [pc, #700]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	f040 8453 	bne.w	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
        frequency = LSE_VALUE;
 8004ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffc:	61fb      	str	r3, [r7, #28]
      break;
 8004ffe:	f000 bc4e 	b.w	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005002:	4ba9      	ldr	r3, [pc, #676]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	f040 8448 	bne.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = LSI_VALUE;
 8005012:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005016:	61fb      	str	r3, [r7, #28]
      break;
 8005018:	f000 bc43 	b.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800501c:	4ba2      	ldr	r3, [pc, #648]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005028:	f040 843d 	bne.w	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
        frequency = HSE_VALUE / 32U;
 800502c:	4b9f      	ldr	r3, [pc, #636]	; (80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800502e:	61fb      	str	r3, [r7, #28]
      break;
 8005030:	f000 bc39 	b.w	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005034:	4b9c      	ldr	r3, [pc, #624]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d023      	beq.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005044:	2b03      	cmp	r3, #3
 8005046:	d02e      	beq.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005048:	2b01      	cmp	r3, #1
 800504a:	d139      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800504c:	4b96      	ldr	r3, [pc, #600]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b02      	cmp	r3, #2
 8005056:	d116      	bne.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005058:	4b93      	ldr	r3, [pc, #588]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8005064:	4b90      	ldr	r3, [pc, #576]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	e005      	b.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005070:	4b8d      	ldr	r3, [pc, #564]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005076:	0a1b      	lsrs	r3, r3, #8
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	4a8c      	ldr	r2, [pc, #560]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800507e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005082:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005084:	e01f      	b.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]
      break;
 800508a:	e01c      	b.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800508c:	4b86      	ldr	r3, [pc, #536]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005098:	d102      	bne.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 800509a:	4b86      	ldr	r3, [pc, #536]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800509c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800509e:	e012      	b.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
      break;
 80050a4:	e00f      	b.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050a6:	4b80      	ldr	r3, [pc, #512]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050b2:	d102      	bne.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 80050b4:	4b80      	ldr	r3, [pc, #512]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80050b6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80050b8:	e005      	b.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61bb      	str	r3, [r7, #24]
      break;
 80050be:	e002      	b.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61bb      	str	r3, [r7, #24]
      break;
 80050c4:	bf00      	nop
    }

    switch(PeriphClk)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050cc:	f000 8345 	beq.w	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 80050d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d4:	d825      	bhi.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	f000 81df 	beq.w	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80050dc:	2b10      	cmp	r3, #16
 80050de:	d80f      	bhi.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	f000 8128 	beq.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d803      	bhi.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	f000 80ec 	beq.w	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80050f0:	e3da      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	f000 8169 	beq.w	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	f000 819a 	beq.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 80050fe:	e3d3      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8005100:	2b40      	cmp	r3, #64	; 0x40
 8005102:	f000 82c1 	beq.w	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d803      	bhi.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800510a:	2b20      	cmp	r3, #32
 800510c:	f000 81fd 	beq.w	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8005110:	e3ca      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8005112:	2b80      	cmp	r3, #128	; 0x80
 8005114:	f000 82db 	beq.w	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
 8005118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511c:	f000 82fa 	beq.w	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
      break;
 8005120:	e3c2      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8005122:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005126:	f000 822d 	beq.w	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800512a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800512e:	d811      	bhi.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005134:	d021      	beq.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8005136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513a:	d804      	bhi.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800513c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005140:	f000 834c 	beq.w	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      break;
 8005144:	e3b0      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8005146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514a:	d01d      	beq.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800514c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005150:	d021      	beq.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8005152:	e3a9      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	f000 8285 	beq.w	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800515c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005160:	d804      	bhi.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005166:	f000 837e 	beq.w	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
      break;
 800516a:	e39d      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 800516c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005170:	d011      	beq.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005172:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005176:	d00e      	beq.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8005178:	e396      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800517a:	69b9      	ldr	r1, [r7, #24]
 800517c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005180:	f000 fd76 	bl	8005c70 <RCCEx_GetSAIxPeriphCLKFreq>
 8005184:	61f8      	str	r0, [r7, #28]
      break;
 8005186:	e38f      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005188:	69b9      	ldr	r1, [r7, #24]
 800518a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800518e:	f000 fd6f 	bl	8005c70 <RCCEx_GetSAIxPeriphCLKFreq>
 8005192:	61f8      	str	r0, [r7, #28]
      break;
 8005194:	e388      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005196:	4b44      	ldr	r3, [pc, #272]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80051a0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a8:	d023      	beq.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 80051aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80051ae:	d003      	beq.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80051b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051b4:	d04a      	beq.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 80051b6:	e086      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80051b8:	4b3b      	ldr	r3, [pc, #236]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d17b      	bne.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80051c4:	4b38      	ldr	r3, [pc, #224]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80051d0:	4b35      	ldr	r3, [pc, #212]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	e005      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 80051dc:	4b32      	ldr	r3, [pc, #200]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80051de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	4a31      	ldr	r2, [pc, #196]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80051ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ee:	61fb      	str	r3, [r7, #28]
          break;
 80051f0:	e064      	b.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80051f2:	4b2d      	ldr	r3, [pc, #180]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051fe:	d15f      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005200:	4b29      	ldr	r3, [pc, #164]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800520c:	d158      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800520e:	4b26      	ldr	r3, [pc, #152]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	0a1b      	lsrs	r3, r3, #8
 8005214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005218:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	fb02 f203 	mul.w	r2, r2, r3
 8005222:	4b21      	ldr	r3, [pc, #132]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	091b      	lsrs	r3, r3, #4
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	3301      	adds	r3, #1
 800522e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005232:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005234:	4b1c      	ldr	r3, [pc, #112]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	0d5b      	lsrs	r3, r3, #21
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	3301      	adds	r3, #1
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	fbb2 f3f3 	udiv	r3, r2, r3
 8005248:	61fb      	str	r3, [r7, #28]
          break;
 800524a:	e039      	b.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800524c:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005258:	d134      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005266:	d12d      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005268:	4b0f      	ldr	r3, [pc, #60]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005272:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	fb02 f203 	mul.w	r2, r2, r3
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	091b      	lsrs	r3, r3, #4
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	3301      	adds	r3, #1
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800528e:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	0d5b      	lsrs	r3, r3, #21
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	3301      	adds	r3, #1
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a2:	61fb      	str	r3, [r7, #28]
          break;
 80052a4:	e00e      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000
 80052ac:	0003d090 	.word	0x0003d090
 80052b0:	0800eb00 	.word	0x0800eb00
 80052b4:	00f42400 	.word	0x00f42400
 80052b8:	007a1200 	.word	0x007a1200
          break;
 80052bc:	bf00      	nop
 80052be:	e2f3      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80052c0:	bf00      	nop
 80052c2:	e2f1      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80052c4:	bf00      	nop
        break;
 80052c6:	e2ef      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80052c8:	4bac      	ldr	r3, [pc, #688]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d827      	bhi.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80052da:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	080052f1 	.word	0x080052f1
 80052e4:	080052f9 	.word	0x080052f9
 80052e8:	08005301 	.word	0x08005301
 80052ec:	08005315 	.word	0x08005315
          frequency = HAL_RCC_GetPCLK2Freq();
 80052f0:	f7ff fb02 	bl	80048f8 <HAL_RCC_GetPCLK2Freq>
 80052f4:	61f8      	str	r0, [r7, #28]
          break;
 80052f6:	e01d      	b.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 80052f8:	f7ff fa52 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 80052fc:	61f8      	str	r0, [r7, #28]
          break;
 80052fe:	e019      	b.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005300:	4b9e      	ldr	r3, [pc, #632]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530c:	d10f      	bne.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 800530e:	4b9c      	ldr	r3, [pc, #624]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005310:	61fb      	str	r3, [r7, #28]
          break;
 8005312:	e00c      	b.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005314:	4b99      	ldr	r3, [pc, #612]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d107      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8005322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005326:	61fb      	str	r3, [r7, #28]
          break;
 8005328:	e003      	b.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 800532a:	bf00      	nop
 800532c:	e2bc      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800532e:	bf00      	nop
 8005330:	e2ba      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005332:	bf00      	nop
        break;
 8005334:	e2b8      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005336:	4b91      	ldr	r3, [pc, #580]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533c:	f003 030c 	and.w	r3, r3, #12
 8005340:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b0c      	cmp	r3, #12
 8005346:	d83a      	bhi.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005385 	.word	0x08005385
 8005354:	080053bf 	.word	0x080053bf
 8005358:	080053bf 	.word	0x080053bf
 800535c:	080053bf 	.word	0x080053bf
 8005360:	0800538d 	.word	0x0800538d
 8005364:	080053bf 	.word	0x080053bf
 8005368:	080053bf 	.word	0x080053bf
 800536c:	080053bf 	.word	0x080053bf
 8005370:	08005395 	.word	0x08005395
 8005374:	080053bf 	.word	0x080053bf
 8005378:	080053bf 	.word	0x080053bf
 800537c:	080053bf 	.word	0x080053bf
 8005380:	080053a9 	.word	0x080053a9
          frequency = HAL_RCC_GetPCLK1Freq();
 8005384:	f7ff faa2 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8005388:	61f8      	str	r0, [r7, #28]
          break;
 800538a:	e01d      	b.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 800538c:	f7ff fa08 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8005390:	61f8      	str	r0, [r7, #28]
          break;
 8005392:	e019      	b.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005394:	4b79      	ldr	r3, [pc, #484]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a0:	d10f      	bne.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 80053a2:	4b77      	ldr	r3, [pc, #476]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80053a4:	61fb      	str	r3, [r7, #28]
          break;
 80053a6:	e00c      	b.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053a8:	4b74      	ldr	r3, [pc, #464]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d107      	bne.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 80053b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ba:	61fb      	str	r3, [r7, #28]
          break;
 80053bc:	e003      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 80053be:	bf00      	nop
 80053c0:	e272      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80053c2:	bf00      	nop
 80053c4:	e270      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80053c6:	bf00      	nop
        break;
 80053c8:	e26e      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80053ca:	4b6c      	ldr	r3, [pc, #432]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053d4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d00d      	beq.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 80053dc:	2b10      	cmp	r3, #16
 80053de:	d802      	bhi.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 80053e4:	e024      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d00a      	beq.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80053ea:	2b30      	cmp	r3, #48	; 0x30
 80053ec:	d012      	beq.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 80053ee:	e01f      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053f0:	f7ff fa6c 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 80053f4:	61f8      	str	r0, [r7, #28]
          break;
 80053f6:	e01b      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 80053f8:	f7ff f9d2 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 80053fc:	61f8      	str	r0, [r7, #28]
          break;
 80053fe:	e017      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005400:	4b5e      	ldr	r3, [pc, #376]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540c:	d10d      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 800540e:	4b5c      	ldr	r3, [pc, #368]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005410:	61fb      	str	r3, [r7, #28]
          break;
 8005412:	e00a      	b.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005414:	4b59      	ldr	r3, [pc, #356]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b02      	cmp	r3, #2
 8005420:	d105      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8005422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005426:	61fb      	str	r3, [r7, #28]
          break;
 8005428:	e001      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800542a:	bf00      	nop
 800542c:	e23c      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800542e:	bf00      	nop
        break;
 8005430:	e23a      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005432:	4b52      	ldr	r3, [pc, #328]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005438:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800543c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d00d      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d802      	bhi.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 800544c:	e024      	b.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 800544e:	2b80      	cmp	r3, #128	; 0x80
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005452:	2bc0      	cmp	r3, #192	; 0xc0
 8005454:	d012      	beq.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 8005456:	e01f      	b.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005458:	f7ff fa38 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 800545c:	61f8      	str	r0, [r7, #28]
          break;
 800545e:	e01b      	b.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005460:	f7ff f99e 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8005464:	61f8      	str	r0, [r7, #28]
          break;
 8005466:	e017      	b.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005468:	4b44      	ldr	r3, [pc, #272]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005474:	d10d      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 8005476:	4b42      	ldr	r3, [pc, #264]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005478:	61fb      	str	r3, [r7, #28]
          break;
 800547a:	e00a      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800547c:	4b3f      	ldr	r3, [pc, #252]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b02      	cmp	r3, #2
 8005488:	d105      	bne.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 800548a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800548e:	61fb      	str	r3, [r7, #28]
          break;
 8005490:	e001      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 8005492:	bf00      	nop
 8005494:	e208      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005496:	bf00      	nop
        break;
 8005498:	e206      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800549a:	4b38      	ldr	r3, [pc, #224]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ac:	d010      	beq.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80054ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b2:	d802      	bhi.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 80054b8:	e026      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 80054ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054be:	d00b      	beq.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80054c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c4:	d012      	beq.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 80054c6:	e01f      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 80054c8:	f7ff fa00 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 80054cc:	61f8      	str	r0, [r7, #28]
          break;
 80054ce:	e01b      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 80054d0:	f7ff f966 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 80054d4:	61f8      	str	r0, [r7, #28]
          break;
 80054d6:	e017      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054d8:	4b28      	ldr	r3, [pc, #160]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e4:	d10d      	bne.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 80054e6:	4b26      	ldr	r3, [pc, #152]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80054e8:	61fb      	str	r3, [r7, #28]
          break;
 80054ea:	e00a      	b.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80054ec:	4b23      	ldr	r3, [pc, #140]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d105      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 80054fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054fe:	61fb      	str	r3, [r7, #28]
          break;
 8005500:	e001      	b.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 8005502:	bf00      	nop
 8005504:	e1d0      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005506:	bf00      	nop
        break;
 8005508:	e1ce      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800550a:	4b1c      	ldr	r3, [pc, #112]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005514:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551c:	d010      	beq.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800551e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005522:	d802      	bhi.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d007      	beq.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8005528:	e026      	b.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 800552a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552e:	d00b      	beq.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005530:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005534:	d012      	beq.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8005536:	e01f      	b.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005538:	f7ff f9c8 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 800553c:	61f8      	str	r0, [r7, #28]
          break;
 800553e:	e01b      	b.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005540:	f7ff f92e 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8005544:	61f8      	str	r0, [r7, #28]
          break;
 8005546:	e017      	b.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005554:	d10d      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 8005556:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005558:	61fb      	str	r3, [r7, #28]
          break;
 800555a:	e00a      	b.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800555c:	4b07      	ldr	r3, [pc, #28]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b02      	cmp	r3, #2
 8005568:	d105      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 800556a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800556e:	61fb      	str	r3, [r7, #28]
          break;
 8005570:	e001      	b.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 8005572:	bf00      	nop
 8005574:	e198      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005576:	bf00      	nop
        break;
 8005578:	e196      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800557a:	bf00      	nop
 800557c:	40021000 	.word	0x40021000
 8005580:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005584:	4bad      	ldr	r3, [pc, #692]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800558e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005596:	d036      	beq.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 8005598:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800559c:	d003      	beq.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800559e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055a2:	d004      	beq.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 80055a4:	e05e      	b.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetSysClockFreq();
 80055a6:	f7ff f8fb 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 80055aa:	61f8      	str	r0, [r7, #28]
          break;
 80055ac:	e05a      	b.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80055ae:	4ba3      	ldr	r3, [pc, #652]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ba:	d150      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80055bc:	4b9f      	ldr	r3, [pc, #636]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d04a      	beq.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80055c8:	4b9c      	ldr	r3, [pc, #624]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	fb02 f203 	mul.w	r2, r2, r3
 80055dc:	4b97      	ldr	r3, [pc, #604]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	3301      	adds	r3, #1
 80055e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ec:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80055ee:	4b93      	ldr	r3, [pc, #588]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	0e5b      	lsrs	r3, r3, #25
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	3301      	adds	r3, #1
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005602:	61fb      	str	r3, [r7, #28]
          break;
 8005604:	e02b      	b.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8005606:	4b8d      	ldr	r3, [pc, #564]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800560e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005612:	d126      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8005614:	4b89      	ldr	r3, [pc, #548]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d020      	beq.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005620:	4b86      	ldr	r3, [pc, #536]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	0a1b      	lsrs	r3, r3, #8
 8005626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800562a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	fb02 f203 	mul.w	r2, r2, r3
 8005634:	4b81      	ldr	r3, [pc, #516]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	3301      	adds	r3, #1
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005646:	4b7d      	ldr	r3, [pc, #500]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	0e5b      	lsrs	r3, r3, #25
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	3301      	adds	r3, #1
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	61fb      	str	r3, [r7, #28]
          break;
 800565c:	e001      	b.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          break;
 800565e:	bf00      	nop
 8005660:	e122      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005662:	bf00      	nop
        break;
 8005664:	e120      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005666:	4b75      	ldr	r3, [pc, #468]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005670:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005678:	f7ff f93e 	bl	80048f8 <HAL_RCC_GetPCLK2Freq>
 800567c:	61f8      	str	r0, [r7, #28]
        break;
 800567e:	e113      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005680:	f7ff f88e 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8005684:	61f8      	str	r0, [r7, #28]
        break;
 8005686:	e10f      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005688:	4b6c      	ldr	r3, [pc, #432]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005692:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569a:	d009      	beq.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800569c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a0:	d00a      	beq.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d000      	beq.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          break;
 80056a6:	e011      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056a8:	f7ff f910 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 80056ac:	61f8      	str	r0, [r7, #28]
          break;
 80056ae:	e00d      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetSysClockFreq();
 80056b0:	f7ff f876 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 80056b4:	61f8      	str	r0, [r7, #28]
          break;
 80056b6:	e009      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056b8:	4b60      	ldr	r3, [pc, #384]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c4:	d101      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
            frequency = HSI_VALUE;
 80056c6:	4b5e      	ldr	r3, [pc, #376]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80056c8:	61fb      	str	r3, [r7, #28]
          break;
 80056ca:	bf00      	nop
        break;
 80056cc:	e0ec      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80056ce:	4b5b      	ldr	r3, [pc, #364]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056d8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e0:	d009      	beq.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80056e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e6:	d00a      	beq.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d000      	beq.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          break;
 80056ec:	e011      	b.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056ee:	f7ff f8ed 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 80056f2:	61f8      	str	r0, [r7, #28]
          break;
 80056f4:	e00d      	b.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetSysClockFreq();
 80056f6:	f7ff f853 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 80056fa:	61f8      	str	r0, [r7, #28]
          break;
 80056fc:	e009      	b.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056fe:	4b4f      	ldr	r3, [pc, #316]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570a:	d101      	bne.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
            frequency = HSI_VALUE;
 800570c:	4b4c      	ldr	r3, [pc, #304]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800570e:	61fb      	str	r3, [r7, #28]
          break;
 8005710:	bf00      	nop
        break;
 8005712:	e0c9      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005714:	4b49      	ldr	r3, [pc, #292]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800571e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005726:	d009      	beq.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005728:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800572c:	d00a      	beq.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800572e:	2b00      	cmp	r3, #0
 8005730:	d000      	beq.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          break;
 8005732:	e011      	b.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005734:	f7ff f8ca 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8005738:	61f8      	str	r0, [r7, #28]
          break;
 800573a:	e00d      	b.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetSysClockFreq();
 800573c:	f7ff f830 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8005740:	61f8      	str	r0, [r7, #28]
          break;
 8005742:	e009      	b.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005744:	4b3d      	ldr	r3, [pc, #244]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800574c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005750:	d101      	bne.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            frequency = HSI_VALUE;
 8005752:	4b3b      	ldr	r3, [pc, #236]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005754:	61fb      	str	r3, [r7, #28]
          break;
 8005756:	bf00      	nop
        break;
 8005758:	e0a6      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800575a:	4b38      	ldr	r3, [pc, #224]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800575c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005760:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005764:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800576c:	d010      	beq.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 800576e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005772:	d802      	bhi.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d007      	beq.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
          break;
 8005778:	e02f      	b.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        switch(srcclk)
 800577a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800577e:	d012      	beq.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 8005780:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005784:	d019      	beq.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          break;
 8005786:	e028      	b.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005788:	f7ff f8a0 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 800578c:	61f8      	str	r0, [r7, #28]
          break;
 800578e:	e024      	b.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005790:	4b2a      	ldr	r3, [pc, #168]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b02      	cmp	r3, #2
 800579c:	d118      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
              frequency = LSI_VALUE;
 800579e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80057a2:	61fb      	str	r3, [r7, #28]
          break;
 80057a4:	e014      	b.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057a6:	4b25      	ldr	r3, [pc, #148]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b2:	d10f      	bne.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 80057b4:	4b22      	ldr	r3, [pc, #136]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80057b6:	61fb      	str	r3, [r7, #28]
          break;
 80057b8:	e00c      	b.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057ba:	4b20      	ldr	r3, [pc, #128]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80057bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d107      	bne.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
            frequency = LSE_VALUE;
 80057c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057cc:	61fb      	str	r3, [r7, #28]
          break;
 80057ce:	e003      	b.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80057d0:	bf00      	nop
 80057d2:	e069      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80057d4:	bf00      	nop
 80057d6:	e067      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80057d8:	bf00      	nop
        break;
 80057da:	e065      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80057dc:	4b17      	ldr	r3, [pc, #92]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80057e6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ee:	d010      	beq.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 80057f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f4:	d802      	bhi.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 80057fa:	e033      	b.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        switch(srcclk)
 80057fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005800:	d012      	beq.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 8005802:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005806:	d01d      	beq.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          break;
 8005808:	e02c      	b.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800580a:	f7ff f85f 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 800580e:	61f8      	str	r0, [r7, #28]
          break;
 8005810:	e028      	b.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005812:	4b0a      	ldr	r3, [pc, #40]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b02      	cmp	r3, #2
 800581e:	d11c      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
              frequency = LSI_VALUE;
 8005820:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005824:	61fb      	str	r3, [r7, #28]
          break;
 8005826:	e018      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005828:	4b04      	ldr	r3, [pc, #16]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005834:	d113      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
            frequency = HSI_VALUE;
 8005836:	4b02      	ldr	r3, [pc, #8]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005838:	61fb      	str	r3, [r7, #28]
          break;
 800583a:	e010      	b.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800583c:	40021000 	.word	0x40021000
 8005840:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005844:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b02      	cmp	r3, #2
 8005850:	d107      	bne.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
            frequency = LSE_VALUE;
 8005852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005856:	61fb      	str	r3, [r7, #28]
          break;
 8005858:	e003      	b.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 800585a:	bf00      	nop
 800585c:	e024      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800585e:	bf00      	nop
 8005860:	e022      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005862:	bf00      	nop
        break;
 8005864:	e020      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005866:	4b13      	ldr	r3, [pc, #76]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005870:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8005878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587c:	d004      	beq.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          break;
 800587e:	e00d      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005880:	f7ff f824 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8005884:	61f8      	str	r0, [r7, #28]
          break;
 8005886:	e009      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005894:	d101      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 8005896:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
 8005898:	61fb      	str	r3, [r7, #28]
          break;
 800589a:	bf00      	nop
        break;
 800589c:	e004      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 800589e:	bf00      	nop
 80058a0:	e002      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 80058a2:	bf00      	nop
 80058a4:	e000      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 80058a6:	bf00      	nop
    }
  }

  return(frequency);
 80058a8:	69fb      	ldr	r3, [r7, #28]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40021000 	.word	0x40021000
 80058b8:	00f42400 	.word	0x00f42400

080058bc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80058c0:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80058c6:	f043 0304 	orr.w	r3, r3, #4
 80058ca:	6013      	str	r3, [r2, #0]
}
 80058cc:	bf00      	nop
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40021000 	.word	0x40021000

080058dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058ea:	4b73      	ldr	r3, [pc, #460]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d018      	beq.n	8005928 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058f6:	4b70      	ldr	r3, [pc, #448]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0203 	and.w	r2, r3, #3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d10d      	bne.n	8005922 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
       ||
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800590e:	4b6a      	ldr	r3, [pc, #424]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	091b      	lsrs	r3, r3, #4
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
       ||
 800591e:	429a      	cmp	r2, r3
 8005920:	d044      	beq.n	80059ac <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	73fb      	strb	r3, [r7, #15]
 8005926:	e041      	b.n	80059ac <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d00c      	beq.n	800594a <RCCEx_PLLSAI1_Config+0x6e>
 8005930:	2b03      	cmp	r3, #3
 8005932:	d013      	beq.n	800595c <RCCEx_PLLSAI1_Config+0x80>
 8005934:	2b01      	cmp	r3, #1
 8005936:	d120      	bne.n	800597a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005938:	4b5f      	ldr	r3, [pc, #380]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d11d      	bne.n	8005980 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005948:	e01a      	b.n	8005980 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800594a:	4b5b      	ldr	r3, [pc, #364]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005952:	2b00      	cmp	r3, #0
 8005954:	d116      	bne.n	8005984 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800595a:	e013      	b.n	8005984 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800595c:	4b56      	ldr	r3, [pc, #344]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10f      	bne.n	8005988 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005968:	4b53      	ldr	r3, [pc, #332]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005978:	e006      	b.n	8005988 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	73fb      	strb	r3, [r7, #15]
      break;
 800597e:	e004      	b.n	800598a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005980:	bf00      	nop
 8005982:	e002      	b.n	800598a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005984:	bf00      	nop
 8005986:	e000      	b.n	800598a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005988:	bf00      	nop
    }

    if(status == HAL_OK)
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10d      	bne.n	80059ac <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005990:	4b49      	ldr	r3, [pc, #292]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6819      	ldr	r1, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	430b      	orrs	r3, r1
 80059a6:	4944      	ldr	r1, [pc, #272]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d17d      	bne.n	8005aae <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059b2:	4b41      	ldr	r3, [pc, #260]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a40      	ldr	r2, [pc, #256]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059be:	f7fa fdf3 	bl	80005a8 <HAL_GetTick>
 80059c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059c4:	e009      	b.n	80059da <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059c6:	f7fa fdef 	bl	80005a8 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d902      	bls.n	80059da <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	73fb      	strb	r3, [r7, #15]
        break;
 80059d8:	e005      	b.n	80059e6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059da:	4b37      	ldr	r3, [pc, #220]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1ef      	bne.n	80059c6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d160      	bne.n	8005aae <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d111      	bne.n	8005a16 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059f2:	4b31      	ldr	r3, [pc, #196]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6892      	ldr	r2, [r2, #8]
 8005a02:	0211      	lsls	r1, r2, #8
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	68d2      	ldr	r2, [r2, #12]
 8005a08:	0912      	lsrs	r2, r2, #4
 8005a0a:	0452      	lsls	r2, r2, #17
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	492a      	ldr	r1, [pc, #168]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	610b      	str	r3, [r1, #16]
 8005a14:	e027      	b.n	8005a66 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d112      	bne.n	8005a42 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a1c:	4b26      	ldr	r3, [pc, #152]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6892      	ldr	r2, [r2, #8]
 8005a2c:	0211      	lsls	r1, r2, #8
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6912      	ldr	r2, [r2, #16]
 8005a32:	0852      	lsrs	r2, r2, #1
 8005a34:	3a01      	subs	r2, #1
 8005a36:	0552      	lsls	r2, r2, #21
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	491f      	ldr	r1, [pc, #124]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	610b      	str	r3, [r1, #16]
 8005a40:	e011      	b.n	8005a66 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a42:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6892      	ldr	r2, [r2, #8]
 8005a52:	0211      	lsls	r1, r2, #8
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6952      	ldr	r2, [r2, #20]
 8005a58:	0852      	lsrs	r2, r2, #1
 8005a5a:	3a01      	subs	r2, #1
 8005a5c:	0652      	lsls	r2, r2, #25
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	4915      	ldr	r1, [pc, #84]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a66:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a72:	f7fa fd99 	bl	80005a8 <HAL_GetTick>
 8005a76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a78:	e009      	b.n	8005a8e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a7a:	f7fa fd95 	bl	80005a8 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d902      	bls.n	8005a8e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	73fb      	strb	r3, [r7, #15]
          break;
 8005a8c:	e005      	b.n	8005a9a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a8e:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0ef      	beq.n	8005a7a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d106      	bne.n	8005aae <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	4903      	ldr	r1, [pc, #12]	; (8005ab8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40021000 	.word	0x40021000

08005abc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005aca:	4b68      	ldr	r3, [pc, #416]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d018      	beq.n	8005b08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ad6:	4b65      	ldr	r3, [pc, #404]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f003 0203 	and.w	r2, r3, #3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d10d      	bne.n	8005b02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
       ||
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d009      	beq.n	8005b02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005aee:	4b5f      	ldr	r3, [pc, #380]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	091b      	lsrs	r3, r3, #4
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
       ||
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d044      	beq.n	8005b8c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	73fb      	strb	r3, [r7, #15]
 8005b06:	e041      	b.n	8005b8c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d00c      	beq.n	8005b2a <RCCEx_PLLSAI2_Config+0x6e>
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d013      	beq.n	8005b3c <RCCEx_PLLSAI2_Config+0x80>
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d120      	bne.n	8005b5a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b18:	4b54      	ldr	r3, [pc, #336]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d11d      	bne.n	8005b60 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b28:	e01a      	b.n	8005b60 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b2a:	4b50      	ldr	r3, [pc, #320]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d116      	bne.n	8005b64 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b3a:	e013      	b.n	8005b64 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b3c:	4b4b      	ldr	r3, [pc, #300]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10f      	bne.n	8005b68 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b48:	4b48      	ldr	r3, [pc, #288]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d109      	bne.n	8005b68 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b58:	e006      	b.n	8005b68 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5e:	e004      	b.n	8005b6a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b60:	bf00      	nop
 8005b62:	e002      	b.n	8005b6a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b64:	bf00      	nop
 8005b66:	e000      	b.n	8005b6a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b68:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10d      	bne.n	8005b8c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b70:	4b3e      	ldr	r3, [pc, #248]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6819      	ldr	r1, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	430b      	orrs	r3, r1
 8005b86:	4939      	ldr	r1, [pc, #228]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d167      	bne.n	8005c62 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b92:	4b36      	ldr	r3, [pc, #216]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a35      	ldr	r2, [pc, #212]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b9e:	f7fa fd03 	bl	80005a8 <HAL_GetTick>
 8005ba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ba4:	e009      	b.n	8005bba <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ba6:	f7fa fcff 	bl	80005a8 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d902      	bls.n	8005bba <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	73fb      	strb	r3, [r7, #15]
        break;
 8005bb8:	e005      	b.n	8005bc6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bba:	4b2c      	ldr	r3, [pc, #176]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1ef      	bne.n	8005ba6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d14a      	bne.n	8005c62 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d111      	bne.n	8005bf6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bd2:	4b26      	ldr	r3, [pc, #152]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6892      	ldr	r2, [r2, #8]
 8005be2:	0211      	lsls	r1, r2, #8
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	68d2      	ldr	r2, [r2, #12]
 8005be8:	0912      	lsrs	r2, r2, #4
 8005bea:	0452      	lsls	r2, r2, #17
 8005bec:	430a      	orrs	r2, r1
 8005bee:	491f      	ldr	r1, [pc, #124]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	614b      	str	r3, [r1, #20]
 8005bf4:	e011      	b.n	8005c1a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bf6:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6892      	ldr	r2, [r2, #8]
 8005c06:	0211      	lsls	r1, r2, #8
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6912      	ldr	r2, [r2, #16]
 8005c0c:	0852      	lsrs	r2, r2, #1
 8005c0e:	3a01      	subs	r2, #1
 8005c10:	0652      	lsls	r2, r2, #25
 8005c12:	430a      	orrs	r2, r1
 8005c14:	4915      	ldr	r1, [pc, #84]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c1a:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c26:	f7fa fcbf 	bl	80005a8 <HAL_GetTick>
 8005c2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c2c:	e009      	b.n	8005c42 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c2e:	f7fa fcbb 	bl	80005a8 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d902      	bls.n	8005c42 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	73fb      	strb	r3, [r7, #15]
          break;
 8005c40:	e005      	b.n	8005c4e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c42:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0ef      	beq.n	8005c2e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c56:	695a      	ldr	r2, [r3, #20]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	4903      	ldr	r1, [pc, #12]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40021000 	.word	0x40021000

08005c70 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b089      	sub	sp, #36	; 0x24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8c:	d10c      	bne.n	8005ca8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005c8e:	4b6e      	ldr	r3, [pc, #440]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c94:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005c98:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ca0:	d112      	bne.n	8005cc8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005ca2:	4b6a      	ldr	r3, [pc, #424]	; (8005e4c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005ca4:	61fb      	str	r3, [r7, #28]
 8005ca6:	e00f      	b.n	8005cc8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cae:	d10b      	bne.n	8005cc8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005cb0:	4b65      	ldr	r3, [pc, #404]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005cba:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cc2:	d101      	bne.n	8005cc8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005cc4:	4b61      	ldr	r3, [pc, #388]	; (8005e4c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005cc6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f040 80b4 	bne.w	8005e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cda:	d003      	beq.n	8005ce4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ce2:	d135      	bne.n	8005d50 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005ce4:	4b58      	ldr	r3, [pc, #352]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cf0:	f040 80a1 	bne.w	8005e36 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005cf4:	4b54      	ldr	r3, [pc, #336]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 809a 	beq.w	8005e36 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005d02:	4b51      	ldr	r3, [pc, #324]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	091b      	lsrs	r3, r3, #4
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d14:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005d16:	4b4c      	ldr	r3, [pc, #304]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	0a1b      	lsrs	r3, r3, #8
 8005d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d20:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005d28:	4b47      	ldr	r3, [pc, #284]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005d34:	2311      	movs	r3, #17
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	e001      	b.n	8005d3e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8005d3a:	2307      	movs	r3, #7
 8005d3c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	fb02 f203 	mul.w	r2, r2, r3
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005d4e:	e072      	b.n	8005e36 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d133      	bne.n	8005dbe <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005d56:	4b3c      	ldr	r3, [pc, #240]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d62:	d169      	bne.n	8005e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005d64:	4b38      	ldr	r3, [pc, #224]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d063      	beq.n	8005e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005d70:	4b35      	ldr	r3, [pc, #212]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d82:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005d84:	4b30      	ldr	r3, [pc, #192]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	0a1b      	lsrs	r3, r3, #8
 8005d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005d96:	4b2c      	ldr	r3, [pc, #176]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8005da2:	2311      	movs	r3, #17
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	e001      	b.n	8005dac <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005da8:	2307      	movs	r3, #7
 8005daa:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	fb02 f203 	mul.w	r2, r2, r3
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	e03c      	b.n	8005e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dc4:	d003      	beq.n	8005dce <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dcc:	d134      	bne.n	8005e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005dce:	4b1e      	ldr	r3, [pc, #120]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dda:	d12d      	bne.n	8005e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005ddc:	4b1a      	ldr	r3, [pc, #104]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d027      	beq.n	8005e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005de8:	4b17      	ldr	r3, [pc, #92]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	3301      	adds	r3, #1
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfa:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005dfc:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	0a1b      	lsrs	r3, r3, #8
 8005e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e06:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005e0e:	4b0e      	ldr	r3, [pc, #56]	; (8005e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005e1a:	2311      	movs	r3, #17
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	e001      	b.n	8005e24 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005e20:	2307      	movs	r3, #7
 8005e22:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	fb02 f203 	mul.w	r2, r2, r3
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	e000      	b.n	8005e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005e36:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005e38:	69fb      	ldr	r3, [r7, #28]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3724      	adds	r7, #36	; 0x24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	001fff68 	.word	0x001fff68

08005e50 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e153      	b.n	800610a <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f008 f8b0 	bl	800dfdc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f957 	bl	8006130 <SAI_Disable>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e13e      	b.n	800610a <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d007      	beq.n	8005eac <HAL_SAI_Init+0x5c>
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d302      	bcc.n	8005ea6 <HAL_SAI_Init+0x56>
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d006      	beq.n	8005eb2 <HAL_SAI_Init+0x62>
 8005ea4:	e008      	b.n	8005eb8 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
      break;
 8005eaa:	e008      	b.n	8005ebe <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005eac:	2310      	movs	r3, #16
 8005eae:	61fb      	str	r3, [r7, #28]
      break;
 8005eb0:	e005      	b.n	8005ebe <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005eb2:	2320      	movs	r3, #32
 8005eb4:	61fb      	str	r3, [r7, #28]
      break;
 8005eb6:	e002      	b.n	8005ebe <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61fb      	str	r3, [r7, #28]
      break;
 8005ebc:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d81d      	bhi.n	8005f02 <HAL_SAI_Init+0xb2>
 8005ec6:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <HAL_SAI_Init+0x7c>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005edd 	.word	0x08005edd
 8005ed0:	08005ee3 	.word	0x08005ee3
 8005ed4:	08005eeb 	.word	0x08005eeb
 8005ed8:	08005ef3 	.word	0x08005ef3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
      break;
 8005ee0:	e012      	b.n	8005f08 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee6:	617b      	str	r3, [r7, #20]
      break;
 8005ee8:	e00e      	b.n	8005f08 <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005eee:	617b      	str	r3, [r7, #20]
      break;
 8005ef0:	e00a      	b.n	8005f08 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ef6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	61fb      	str	r3, [r7, #28]
      break;
 8005f00:	e002      	b.n	8005f08 <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
      break;
 8005f06:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a81      	ldr	r2, [pc, #516]	; (8006114 <HAL_SAI_Init+0x2c4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d004      	beq.n	8005f1c <HAL_SAI_Init+0xcc>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a80      	ldr	r2, [pc, #512]	; (8006118 <HAL_SAI_Init+0x2c8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d103      	bne.n	8005f24 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005f1c:	4a7f      	ldr	r2, [pc, #508]	; (800611c <HAL_SAI_Init+0x2cc>)
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	e002      	b.n	8005f2a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005f24:	4a7e      	ldr	r2, [pc, #504]	; (8006120 <HAL_SAI_Init+0x2d0>)
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d041      	beq.n	8005fb6 <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a77      	ldr	r2, [pc, #476]	; (8006114 <HAL_SAI_Init+0x2c4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d004      	beq.n	8005f46 <HAL_SAI_Init+0xf6>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a75      	ldr	r2, [pc, #468]	; (8006118 <HAL_SAI_Init+0x2c8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d105      	bne.n	8005f52 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005f46:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f4a:	f7ff f831 	bl	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f4e:	6138      	str	r0, [r7, #16]
 8005f50:	e004      	b.n	8005f5c <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005f52:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005f56:	f7ff f82b 	bl	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f5a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	461a      	mov	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	025b      	lsls	r3, r3, #9
 8005f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f72:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4a6b      	ldr	r2, [pc, #428]	; (8006124 <HAL_SAI_Init+0x2d4>)
 8005f78:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7c:	08da      	lsrs	r2, r3, #3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005f82:	68f9      	ldr	r1, [r7, #12]
 8005f84:	4b67      	ldr	r3, [pc, #412]	; (8006124 <HAL_SAI_Init+0x2d4>)
 8005f86:	fba3 2301 	umull	r2, r3, r3, r1
 8005f8a:	08da      	lsrs	r2, r3, #3
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	1aca      	subs	r2, r1, r3
 8005f96:	2a08      	cmp	r2, #8
 8005f98:	d904      	bls.n	8005fa4 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d104      	bne.n	8005fb6 <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	085a      	lsrs	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_SAI_Init+0x176>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d109      	bne.n	8005fda <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_SAI_Init+0x182>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e001      	b.n	8005fd6 <HAL_SAI_Init+0x186>
 8005fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	e008      	b.n	8005fec <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d102      	bne.n	8005fe8 <HAL_SAI_Init+0x198>
 8005fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe6:	e000      	b.n	8005fea <HAL_SAI_Init+0x19a>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6819      	ldr	r1, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4b4c      	ldr	r3, [pc, #304]	; (8006128 <HAL_SAI_Init+0x2d8>)
 8005ff8:	400b      	ands	r3, r1
 8005ffa:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6819      	ldr	r1, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006010:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	431a      	orrs	r2, r3
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8006024:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006030:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	051b      	lsls	r3, r3, #20
 8006038:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006050:	f023 030f 	bic.w	r3, r3, #15
 8006054:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6859      	ldr	r1, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006064:	431a      	orrs	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6899      	ldr	r1, [r3, #8]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b2b      	ldr	r3, [pc, #172]	; (800612c <HAL_SAI_Init+0x2dc>)
 8006080:	400b      	ands	r3, r1
 8006082:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6899      	ldr	r1, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006094:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800609a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80060a0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	3b01      	subs	r3, #1
 80060a8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80060aa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68d9      	ldr	r1, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	f24f 0320 	movw	r3, #61472	; 0xf020
 80060c2:	400b      	ands	r3, r1
 80060c4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68d9      	ldr	r1, [r3, #12]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060da:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80060dc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e2:	3b01      	subs	r3, #1
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40015404 	.word	0x40015404
 8006118:	40015424 	.word	0x40015424
 800611c:	40015400 	.word	0x40015400
 8006120:	40015800 	.word	0x40015800
 8006124:	cccccccd 	.word	0xcccccccd
 8006128:	ff05c010 	.word	0xff05c010
 800612c:	fff88000 	.word	0xfff88000

08006130 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006130:	b490      	push	{r4, r7}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006138:	4b15      	ldr	r3, [pc, #84]	; (8006190 <SAI_Disable+0x60>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a15      	ldr	r2, [pc, #84]	; (8006194 <SAI_Disable+0x64>)
 800613e:	fba2 2303 	umull	r2, r3, r2, r3
 8006142:	0b1b      	lsrs	r3, r3, #12
 8006144:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006158:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800615a:	2c00      	cmp	r4, #0
 800615c:	d10a      	bne.n	8006174 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006164:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	73fb      	strb	r3, [r7, #15]
      break;
 8006172:	e007      	b.n	8006184 <SAI_Disable+0x54>
    }
    count--;
 8006174:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1ea      	bne.n	800615a <SAI_Disable+0x2a>

  return status;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bc90      	pop	{r4, r7}
 800618e:	4770      	bx	lr
 8006190:	2000002c 	.word	0x2000002c
 8006194:	95cbec1b 	.word	0x95cbec1b

08006198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e07c      	b.n	80062a4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d106      	bne.n	80061ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f007 fe61 	bl	800de8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061ea:	d902      	bls.n	80061f2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	e002      	b.n	80061f8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006200:	d007      	beq.n	8006212 <HAL_SPI_Init+0x7a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800620a:	d002      	beq.n	8006212 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006222:	d903      	bls.n	800622c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	631a      	str	r2, [r3, #48]	; 0x30
 800622a:	e002      	b.n	8006232 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	ea42 0103 	orr.w	r1, r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	f003 0204 	and.w	r2, r3, #4
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	431a      	orrs	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	ea42 0103 	orr.w	r1, r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	430a      	orrs	r2, r1
 8006292:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e01d      	b.n	80062fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f007 fe1e 	bl	800df14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3304      	adds	r3, #4
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f000 f904 	bl	80064f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <HAL_TIM_ConfigClockSource+0x18>
 8006316:	2302      	movs	r3, #2
 8006318:	e0a8      	b.n	800646c <HAL_TIM_ConfigClockSource+0x16a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2202      	movs	r2, #2
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006338:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800633c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006344:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b40      	cmp	r3, #64	; 0x40
 8006354:	d067      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x124>
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d80b      	bhi.n	8006372 <HAL_TIM_ConfigClockSource+0x70>
 800635a:	2b10      	cmp	r3, #16
 800635c:	d073      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x144>
 800635e:	2b10      	cmp	r3, #16
 8006360:	d802      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x66>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d06f      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006366:	e078      	b.n	800645a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006368:	2b20      	cmp	r3, #32
 800636a:	d06c      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x144>
 800636c:	2b30      	cmp	r3, #48	; 0x30
 800636e:	d06a      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006370:	e073      	b.n	800645a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006372:	2b70      	cmp	r3, #112	; 0x70
 8006374:	d00d      	beq.n	8006392 <HAL_TIM_ConfigClockSource+0x90>
 8006376:	2b70      	cmp	r3, #112	; 0x70
 8006378:	d804      	bhi.n	8006384 <HAL_TIM_ConfigClockSource+0x82>
 800637a:	2b50      	cmp	r3, #80	; 0x50
 800637c:	d033      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0xe4>
 800637e:	2b60      	cmp	r3, #96	; 0x60
 8006380:	d041      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006382:	e06a      	b.n	800645a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006388:	d066      	beq.n	8006458 <HAL_TIM_ConfigClockSource+0x156>
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638e:	d017      	beq.n	80063c0 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006390:	e063      	b.n	800645a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	6899      	ldr	r1, [r3, #8]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f000 fa45 	bl	8006830 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	609a      	str	r2, [r3, #8]
      break;
 80063be:	e04c      	b.n	800645a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	6899      	ldr	r1, [r3, #8]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f000 fa2e 	bl	8006830 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063e2:	609a      	str	r2, [r3, #8]
      break;
 80063e4:	e039      	b.n	800645a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6859      	ldr	r1, [r3, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	461a      	mov	r2, r3
 80063f4:	f000 f9a2 	bl	800673c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2150      	movs	r1, #80	; 0x50
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 f9fb 	bl	80067fa <TIM_ITRx_SetConfig>
      break;
 8006404:	e029      	b.n	800645a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6859      	ldr	r1, [r3, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	461a      	mov	r2, r3
 8006414:	f000 f9c1 	bl	800679a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2160      	movs	r1, #96	; 0x60
 800641e:	4618      	mov	r0, r3
 8006420:	f000 f9eb 	bl	80067fa <TIM_ITRx_SetConfig>
      break;
 8006424:	e019      	b.n	800645a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	6859      	ldr	r1, [r3, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	461a      	mov	r2, r3
 8006434:	f000 f982 	bl	800673c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2140      	movs	r1, #64	; 0x40
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f9db 	bl	80067fa <TIM_ITRx_SetConfig>
      break;
 8006444:	e009      	b.n	800645a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	f000 f9d2 	bl	80067fa <TIM_ITRx_SetConfig>
      break;
 8006456:	e000      	b.n	800645a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8006458:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006488:	2302      	movs	r3, #2
 800648a:	e031      	b.n	80064f0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f8c4 	bl	800662c <TIM_SlaveTimer_SetConfig>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e018      	b.n	80064f0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064cc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064dc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a40      	ldr	r2, [pc, #256]	; (800660c <TIM_Base_SetConfig+0x114>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d013      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006516:	d00f      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a3d      	ldr	r2, [pc, #244]	; (8006610 <TIM_Base_SetConfig+0x118>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00b      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a3c      	ldr	r2, [pc, #240]	; (8006614 <TIM_Base_SetConfig+0x11c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d007      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a3b      	ldr	r2, [pc, #236]	; (8006618 <TIM_Base_SetConfig+0x120>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_Base_SetConfig+0x40>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a3a      	ldr	r2, [pc, #232]	; (800661c <TIM_Base_SetConfig+0x124>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d108      	bne.n	800654a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a2f      	ldr	r2, [pc, #188]	; (800660c <TIM_Base_SetConfig+0x114>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d01f      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006558:	d01b      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a2c      	ldr	r2, [pc, #176]	; (8006610 <TIM_Base_SetConfig+0x118>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d017      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a2b      	ldr	r2, [pc, #172]	; (8006614 <TIM_Base_SetConfig+0x11c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d013      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a2a      	ldr	r2, [pc, #168]	; (8006618 <TIM_Base_SetConfig+0x120>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00f      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a29      	ldr	r2, [pc, #164]	; (800661c <TIM_Base_SetConfig+0x124>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00b      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a28      	ldr	r2, [pc, #160]	; (8006620 <TIM_Base_SetConfig+0x128>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d007      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a27      	ldr	r2, [pc, #156]	; (8006624 <TIM_Base_SetConfig+0x12c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d003      	beq.n	8006592 <TIM_Base_SetConfig+0x9a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a26      	ldr	r2, [pc, #152]	; (8006628 <TIM_Base_SetConfig+0x130>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d108      	bne.n	80065a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a10      	ldr	r2, [pc, #64]	; (800660c <TIM_Base_SetConfig+0x114>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00f      	beq.n	80065f0 <TIM_Base_SetConfig+0xf8>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a12      	ldr	r2, [pc, #72]	; (800661c <TIM_Base_SetConfig+0x124>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00b      	beq.n	80065f0 <TIM_Base_SetConfig+0xf8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a11      	ldr	r2, [pc, #68]	; (8006620 <TIM_Base_SetConfig+0x128>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d007      	beq.n	80065f0 <TIM_Base_SetConfig+0xf8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a10      	ldr	r2, [pc, #64]	; (8006624 <TIM_Base_SetConfig+0x12c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_Base_SetConfig+0xf8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a0f      	ldr	r2, [pc, #60]	; (8006628 <TIM_Base_SetConfig+0x130>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d103      	bne.n	80065f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	615a      	str	r2, [r3, #20]
}
 80065fe:	bf00      	nop
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	40012c00 	.word	0x40012c00
 8006610:	40000400 	.word	0x40000400
 8006614:	40000800 	.word	0x40000800
 8006618:	40000c00 	.word	0x40000c00
 800661c:	40013400 	.word	0x40013400
 8006620:	40014000 	.word	0x40014000
 8006624:	40014400 	.word	0x40014400
 8006628:	40014800 	.word	0x40014800

0800662c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006644:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006656:	f023 0307 	bic.w	r3, r3, #7
 800665a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b30      	cmp	r3, #48	; 0x30
 8006674:	d05c      	beq.n	8006730 <TIM_SlaveTimer_SetConfig+0x104>
 8006676:	2b30      	cmp	r3, #48	; 0x30
 8006678:	d806      	bhi.n	8006688 <TIM_SlaveTimer_SetConfig+0x5c>
 800667a:	2b10      	cmp	r3, #16
 800667c:	d058      	beq.n	8006730 <TIM_SlaveTimer_SetConfig+0x104>
 800667e:	2b20      	cmp	r3, #32
 8006680:	d056      	beq.n	8006730 <TIM_SlaveTimer_SetConfig+0x104>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d054      	beq.n	8006730 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006686:	e054      	b.n	8006732 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8006688:	2b50      	cmp	r3, #80	; 0x50
 800668a:	d03d      	beq.n	8006708 <TIM_SlaveTimer_SetConfig+0xdc>
 800668c:	2b50      	cmp	r3, #80	; 0x50
 800668e:	d802      	bhi.n	8006696 <TIM_SlaveTimer_SetConfig+0x6a>
 8006690:	2b40      	cmp	r3, #64	; 0x40
 8006692:	d010      	beq.n	80066b6 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8006694:	e04d      	b.n	8006732 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8006696:	2b60      	cmp	r3, #96	; 0x60
 8006698:	d040      	beq.n	800671c <TIM_SlaveTimer_SetConfig+0xf0>
 800669a:	2b70      	cmp	r3, #112	; 0x70
 800669c:	d000      	beq.n	80066a0 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 800669e:	e048      	b.n	8006732 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	68d9      	ldr	r1, [r3, #12]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f000 f8be 	bl	8006830 <TIM_ETR_SetConfig>
      break;
 80066b4:	e03d      	b.n	8006732 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b05      	cmp	r3, #5
 80066bc:	d101      	bne.n	80066c2 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e038      	b.n	8006734 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6a1a      	ldr	r2, [r3, #32]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0201 	bic.w	r2, r2, #1
 80066d8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066e8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	621a      	str	r2, [r3, #32]
      break;
 8006706:	e014      	b.n	8006732 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	6899      	ldr	r1, [r3, #8]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	461a      	mov	r2, r3
 8006716:	f000 f811 	bl	800673c <TIM_TI1_ConfigInputStage>
      break;
 800671a:	e00a      	b.n	8006732 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	6899      	ldr	r1, [r3, #8]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	461a      	mov	r2, r3
 800672a:	f000 f836 	bl	800679a <TIM_TI2_ConfigInputStage>
      break;
 800672e:	e000      	b.n	8006732 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8006730:	bf00      	nop
  }
  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	f023 0201 	bic.w	r2, r3, #1
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f023 030a 	bic.w	r3, r3, #10
 8006778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	621a      	str	r2, [r3, #32]
}
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800679a:	b480      	push	{r7}
 800679c:	b087      	sub	sp, #28
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	f023 0210 	bic.w	r2, r3, #16
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	031b      	lsls	r3, r3, #12
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	011b      	lsls	r3, r3, #4
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	621a      	str	r2, [r3, #32]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	f043 0307 	orr.w	r3, r3, #7
 800681c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	609a      	str	r2, [r3, #8]
}
 8006824:	bf00      	nop
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800684a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	021a      	lsls	r2, r3, #8
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	431a      	orrs	r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4313      	orrs	r3, r2
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	609a      	str	r2, [r3, #8]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006884:	2302      	movs	r3, #2
 8006886:	e068      	b.n	800695a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a2e      	ldr	r2, [pc, #184]	; (8006968 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d004      	beq.n	80068bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a2d      	ldr	r2, [pc, #180]	; (800696c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d108      	bne.n	80068ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a1e      	ldr	r2, [pc, #120]	; (8006968 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d01d      	beq.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fa:	d018      	beq.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1b      	ldr	r2, [pc, #108]	; (8006970 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d013      	beq.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a1a      	ldr	r2, [pc, #104]	; (8006974 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00e      	beq.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a18      	ldr	r2, [pc, #96]	; (8006978 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d009      	beq.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a13      	ldr	r2, [pc, #76]	; (800696c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d004      	beq.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a14      	ldr	r2, [pc, #80]	; (800697c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d10c      	bne.n	8006948 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	4313      	orrs	r3, r2
 800693e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40012c00 	.word	0x40012c00
 800696c:	40013400 	.word	0x40013400
 8006970:	40000400 	.word	0x40000400
 8006974:	40000800 	.word	0x40000800
 8006978:	40000c00 	.word	0x40000c00
 800697c:	40014000 	.word	0x40014000

08006980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e040      	b.n	8006a14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006996:	2b00      	cmp	r3, #0
 8006998:	d106      	bne.n	80069a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f007 fad6 	bl	800df54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2224      	movs	r2, #36	; 0x24
 80069ac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0201 	bic.w	r2, r2, #1
 80069bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f82c 	bl	8006a1c <UART_SetConfig>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d101      	bne.n	80069ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e022      	b.n	8006a14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fb92 	bl	8007100 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0201 	orr.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fc19 	bl	8007244 <UART_CheckIdleState>
 8006a12:	4603      	mov	r3, r0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a1c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006a20:	b08a      	sub	sp, #40	; 0x28
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	4bb8      	ldr	r3, [pc, #736]	; (8006d34 <UART_SetConfig+0x318>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6812      	ldr	r2, [r2, #0]
 8006a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a5a:	430b      	orrs	r3, r1
 8006a5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4aae      	ldr	r2, [pc, #696]	; (8006d38 <UART_SetConfig+0x31c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d004      	beq.n	8006a8e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4aa5      	ldr	r2, [pc, #660]	; (8006d3c <UART_SetConfig+0x320>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d126      	bne.n	8006afa <UART_SetConfig+0xde>
 8006aac:	4ba4      	ldr	r3, [pc, #656]	; (8006d40 <UART_SetConfig+0x324>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab2:	f003 0303 	and.w	r3, r3, #3
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d81a      	bhi.n	8006af0 <UART_SetConfig+0xd4>
 8006aba:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <UART_SetConfig+0xa4>)
 8006abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac0:	08006ad1 	.word	0x08006ad1
 8006ac4:	08006ae1 	.word	0x08006ae1
 8006ac8:	08006ad9 	.word	0x08006ad9
 8006acc:	08006ae9 	.word	0x08006ae9
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad6:	e105      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ade:	e101      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae6:	e0fd      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006ae8:	2308      	movs	r3, #8
 8006aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aee:	e0f9      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006af0:	2310      	movs	r3, #16
 8006af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af6:	bf00      	nop
 8006af8:	e0f4      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a91      	ldr	r2, [pc, #580]	; (8006d44 <UART_SetConfig+0x328>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d138      	bne.n	8006b76 <UART_SetConfig+0x15a>
 8006b04:	4b8e      	ldr	r3, [pc, #568]	; (8006d40 <UART_SetConfig+0x324>)
 8006b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0a:	f003 030c 	and.w	r3, r3, #12
 8006b0e:	2b0c      	cmp	r3, #12
 8006b10:	d82c      	bhi.n	8006b6c <UART_SetConfig+0x150>
 8006b12:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <UART_SetConfig+0xfc>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b4d 	.word	0x08006b4d
 8006b1c:	08006b6d 	.word	0x08006b6d
 8006b20:	08006b6d 	.word	0x08006b6d
 8006b24:	08006b6d 	.word	0x08006b6d
 8006b28:	08006b5d 	.word	0x08006b5d
 8006b2c:	08006b6d 	.word	0x08006b6d
 8006b30:	08006b6d 	.word	0x08006b6d
 8006b34:	08006b6d 	.word	0x08006b6d
 8006b38:	08006b55 	.word	0x08006b55
 8006b3c:	08006b6d 	.word	0x08006b6d
 8006b40:	08006b6d 	.word	0x08006b6d
 8006b44:	08006b6d 	.word	0x08006b6d
 8006b48:	08006b65 	.word	0x08006b65
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b52:	e0c7      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006b54:	2302      	movs	r3, #2
 8006b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5a:	e0c3      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006b5c:	2304      	movs	r3, #4
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b62:	e0bf      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006b64:	2308      	movs	r3, #8
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6a:	e0bb      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b72:	bf00      	nop
 8006b74:	e0b6      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a73      	ldr	r2, [pc, #460]	; (8006d48 <UART_SetConfig+0x32c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d125      	bne.n	8006bcc <UART_SetConfig+0x1b0>
 8006b80:	4b6f      	ldr	r3, [pc, #444]	; (8006d40 <UART_SetConfig+0x324>)
 8006b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b8a:	2b10      	cmp	r3, #16
 8006b8c:	d011      	beq.n	8006bb2 <UART_SetConfig+0x196>
 8006b8e:	2b10      	cmp	r3, #16
 8006b90:	d802      	bhi.n	8006b98 <UART_SetConfig+0x17c>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <UART_SetConfig+0x186>
 8006b96:	e014      	b.n	8006bc2 <UART_SetConfig+0x1a6>
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	d006      	beq.n	8006baa <UART_SetConfig+0x18e>
 8006b9c:	2b30      	cmp	r3, #48	; 0x30
 8006b9e:	d00c      	beq.n	8006bba <UART_SetConfig+0x19e>
 8006ba0:	e00f      	b.n	8006bc2 <UART_SetConfig+0x1a6>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba8:	e09c      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006baa:	2302      	movs	r3, #2
 8006bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb0:	e098      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006bb2:	2304      	movs	r3, #4
 8006bb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb8:	e094      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006bba:	2308      	movs	r3, #8
 8006bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc0:	e090      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006bc2:	2310      	movs	r3, #16
 8006bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc8:	bf00      	nop
 8006bca:	e08b      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a5e      	ldr	r2, [pc, #376]	; (8006d4c <UART_SetConfig+0x330>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d125      	bne.n	8006c22 <UART_SetConfig+0x206>
 8006bd6:	4b5a      	ldr	r3, [pc, #360]	; (8006d40 <UART_SetConfig+0x324>)
 8006bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bdc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006be0:	2b40      	cmp	r3, #64	; 0x40
 8006be2:	d011      	beq.n	8006c08 <UART_SetConfig+0x1ec>
 8006be4:	2b40      	cmp	r3, #64	; 0x40
 8006be6:	d802      	bhi.n	8006bee <UART_SetConfig+0x1d2>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <UART_SetConfig+0x1dc>
 8006bec:	e014      	b.n	8006c18 <UART_SetConfig+0x1fc>
 8006bee:	2b80      	cmp	r3, #128	; 0x80
 8006bf0:	d006      	beq.n	8006c00 <UART_SetConfig+0x1e4>
 8006bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8006bf4:	d00c      	beq.n	8006c10 <UART_SetConfig+0x1f4>
 8006bf6:	e00f      	b.n	8006c18 <UART_SetConfig+0x1fc>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bfe:	e071      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006c00:	2302      	movs	r3, #2
 8006c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c06:	e06d      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006c08:	2304      	movs	r3, #4
 8006c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c0e:	e069      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006c10:	2308      	movs	r3, #8
 8006c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c16:	e065      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006c18:	2310      	movs	r3, #16
 8006c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1e:	bf00      	nop
 8006c20:	e060      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a4a      	ldr	r2, [pc, #296]	; (8006d50 <UART_SetConfig+0x334>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d129      	bne.n	8006c80 <UART_SetConfig+0x264>
 8006c2c:	4b44      	ldr	r3, [pc, #272]	; (8006d40 <UART_SetConfig+0x324>)
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3a:	d014      	beq.n	8006c66 <UART_SetConfig+0x24a>
 8006c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c40:	d802      	bhi.n	8006c48 <UART_SetConfig+0x22c>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d007      	beq.n	8006c56 <UART_SetConfig+0x23a>
 8006c46:	e016      	b.n	8006c76 <UART_SetConfig+0x25a>
 8006c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c4c:	d007      	beq.n	8006c5e <UART_SetConfig+0x242>
 8006c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c52:	d00c      	beq.n	8006c6e <UART_SetConfig+0x252>
 8006c54:	e00f      	b.n	8006c76 <UART_SetConfig+0x25a>
 8006c56:	2300      	movs	r3, #0
 8006c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c5c:	e042      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c64:	e03e      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006c66:	2304      	movs	r3, #4
 8006c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6c:	e03a      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006c6e:	2308      	movs	r3, #8
 8006c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c74:	e036      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006c76:	2310      	movs	r3, #16
 8006c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7c:	bf00      	nop
 8006c7e:	e031      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a2c      	ldr	r2, [pc, #176]	; (8006d38 <UART_SetConfig+0x31c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d129      	bne.n	8006cde <UART_SetConfig+0x2c2>
 8006c8a:	4b2d      	ldr	r3, [pc, #180]	; (8006d40 <UART_SetConfig+0x324>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c98:	d014      	beq.n	8006cc4 <UART_SetConfig+0x2a8>
 8006c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9e:	d802      	bhi.n	8006ca6 <UART_SetConfig+0x28a>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d007      	beq.n	8006cb4 <UART_SetConfig+0x298>
 8006ca4:	e016      	b.n	8006cd4 <UART_SetConfig+0x2b8>
 8006ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006caa:	d007      	beq.n	8006cbc <UART_SetConfig+0x2a0>
 8006cac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cb0:	d00c      	beq.n	8006ccc <UART_SetConfig+0x2b0>
 8006cb2:	e00f      	b.n	8006cd4 <UART_SetConfig+0x2b8>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cba:	e013      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc2:	e00f      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cca:	e00b      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006ccc:	2308      	movs	r3, #8
 8006cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd2:	e007      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cda:	bf00      	nop
 8006cdc:	e002      	b.n	8006ce4 <UART_SetConfig+0x2c8>
 8006cde:	2310      	movs	r3, #16
 8006ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a13      	ldr	r2, [pc, #76]	; (8006d38 <UART_SetConfig+0x31c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	f040 80fe 	bne.w	8006eec <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d837      	bhi.n	8006d68 <UART_SetConfig+0x34c>
 8006cf8:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <UART_SetConfig+0x2e4>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d25 	.word	0x08006d25
 8006d04:	08006d69 	.word	0x08006d69
 8006d08:	08006d2d 	.word	0x08006d2d
 8006d0c:	08006d69 	.word	0x08006d69
 8006d10:	08006d59 	.word	0x08006d59
 8006d14:	08006d69 	.word	0x08006d69
 8006d18:	08006d69 	.word	0x08006d69
 8006d1c:	08006d69 	.word	0x08006d69
 8006d20:	08006d61 	.word	0x08006d61
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006d24:	f7fd fdd2 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8006d28:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d2a:	e020      	b.n	8006d6e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006d2c:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <UART_SetConfig+0x338>)
 8006d2e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d30:	e01d      	b.n	8006d6e <UART_SetConfig+0x352>
 8006d32:	bf00      	nop
 8006d34:	efff69f3 	.word	0xefff69f3
 8006d38:	40008000 	.word	0x40008000
 8006d3c:	40013800 	.word	0x40013800
 8006d40:	40021000 	.word	0x40021000
 8006d44:	40004400 	.word	0x40004400
 8006d48:	40004800 	.word	0x40004800
 8006d4c:	40004c00 	.word	0x40004c00
 8006d50:	40005000 	.word	0x40005000
 8006d54:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006d58:	f7fd fd22 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8006d5c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d5e:	e006      	b.n	8006d6e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d64:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d66:	e002      	b.n	8006d6e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	76fb      	strb	r3, [r7, #27]
        break;
 8006d6c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 81b9 	beq.w	80070e8 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	4413      	add	r3, r2
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d305      	bcc.n	8006d92 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d902      	bls.n	8006d98 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	76fb      	strb	r3, [r7, #27]
 8006d96:	e1a7      	b.n	80070e8 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8006d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	f200 8092 	bhi.w	8006ec6 <UART_SetConfig+0x4aa>
 8006da2:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <UART_SetConfig+0x38c>)
 8006da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da8:	08006dcd 	.word	0x08006dcd
 8006dac:	08006ec7 	.word	0x08006ec7
 8006db0:	08006e1b 	.word	0x08006e1b
 8006db4:	08006ec7 	.word	0x08006ec7
 8006db8:	08006e4f 	.word	0x08006e4f
 8006dbc:	08006ec7 	.word	0x08006ec7
 8006dc0:	08006ec7 	.word	0x08006ec7
 8006dc4:	08006ec7 	.word	0x08006ec7
 8006dc8:	08006e9d 	.word	0x08006e9d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006dcc:	f7fd fd7e 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8006dd0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	f04f 0400 	mov.w	r4, #0
 8006de2:	0214      	lsls	r4, r2, #8
 8006de4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006de8:	020b      	lsls	r3, r1, #8
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	6852      	ldr	r2, [r2, #4]
 8006dee:	0852      	lsrs	r2, r2, #1
 8006df0:	4611      	mov	r1, r2
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	eb13 0b01 	adds.w	fp, r3, r1
 8006dfa:	eb44 0c02 	adc.w	ip, r4, r2
 8006dfe:	4658      	mov	r0, fp
 8006e00:	4661      	mov	r1, ip
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f04f 0400 	mov.w	r4, #0
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	4623      	mov	r3, r4
 8006e0e:	f7f9 f9df 	bl	80001d0 <__aeabi_uldivmod>
 8006e12:	4603      	mov	r3, r0
 8006e14:	460c      	mov	r4, r1
 8006e16:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006e18:	e058      	b.n	8006ecc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	085b      	lsrs	r3, r3, #1
 8006e20:	f04f 0400 	mov.w	r4, #0
 8006e24:	49ae      	ldr	r1, [pc, #696]	; (80070e0 <UART_SetConfig+0x6c4>)
 8006e26:	f04f 0200 	mov.w	r2, #0
 8006e2a:	eb13 0b01 	adds.w	fp, r3, r1
 8006e2e:	eb44 0c02 	adc.w	ip, r4, r2
 8006e32:	4658      	mov	r0, fp
 8006e34:	4661      	mov	r1, ip
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f04f 0400 	mov.w	r4, #0
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4623      	mov	r3, r4
 8006e42:	f7f9 f9c5 	bl	80001d0 <__aeabi_uldivmod>
 8006e46:	4603      	mov	r3, r0
 8006e48:	460c      	mov	r4, r1
 8006e4a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006e4c:	e03e      	b.n	8006ecc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006e4e:	f7fd fca7 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8006e52:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	4619      	mov	r1, r3
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	f04f 0400 	mov.w	r4, #0
 8006e64:	0214      	lsls	r4, r2, #8
 8006e66:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006e6a:	020b      	lsls	r3, r1, #8
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6852      	ldr	r2, [r2, #4]
 8006e70:	0852      	lsrs	r2, r2, #1
 8006e72:	4611      	mov	r1, r2
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	eb13 0b01 	adds.w	fp, r3, r1
 8006e7c:	eb44 0c02 	adc.w	ip, r4, r2
 8006e80:	4658      	mov	r0, fp
 8006e82:	4661      	mov	r1, ip
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f04f 0400 	mov.w	r4, #0
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	4623      	mov	r3, r4
 8006e90:	f7f9 f99e 	bl	80001d0 <__aeabi_uldivmod>
 8006e94:	4603      	mov	r3, r0
 8006e96:	460c      	mov	r4, r1
 8006e98:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006e9a:	e017      	b.n	8006ecc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	085b      	lsrs	r3, r3, #1
 8006ea2:	f04f 0400 	mov.w	r4, #0
 8006ea6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006eaa:	f144 0100 	adc.w	r1, r4, #0
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f04f 0400 	mov.w	r4, #0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	4623      	mov	r3, r4
 8006eba:	f7f9 f989 	bl	80001d0 <__aeabi_uldivmod>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006ec4:	e002      	b.n	8006ecc <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	76fb      	strb	r3, [r7, #27]
            break;
 8006eca:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed2:	d308      	bcc.n	8006ee6 <UART_SetConfig+0x4ca>
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eda:	d204      	bcs.n	8006ee6 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	60da      	str	r2, [r3, #12]
 8006ee4:	e100      	b.n	80070e8 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	76fb      	strb	r3, [r7, #27]
 8006eea:	e0fd      	b.n	80070e8 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef4:	f040 8084 	bne.w	8007000 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8006ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d85f      	bhi.n	8006fc0 <UART_SetConfig+0x5a4>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <UART_SetConfig+0x4ec>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f4d 	.word	0x08006f4d
 8006f10:	08006f6d 	.word	0x08006f6d
 8006f14:	08006fc1 	.word	0x08006fc1
 8006f18:	08006f89 	.word	0x08006f89
 8006f1c:	08006fc1 	.word	0x08006fc1
 8006f20:	08006fc1 	.word	0x08006fc1
 8006f24:	08006fc1 	.word	0x08006fc1
 8006f28:	08006fa9 	.word	0x08006fa9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f2c:	f7fd fcce 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8006f30:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	005a      	lsls	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	085b      	lsrs	r3, r3, #1
 8006f3c:	441a      	add	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f4a:	e03c      	b.n	8006fc6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f4c:	f7fd fcd4 	bl	80048f8 <HAL_RCC_GetPCLK2Freq>
 8006f50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	005a      	lsls	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	441a      	add	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f6a:	e02c      	b.n	8006fc6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006f76:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6852      	ldr	r2, [r2, #4]
 8006f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f86:	e01e      	b.n	8006fc6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f88:	f7fd fc0a 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8006f8c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	005a      	lsls	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	441a      	add	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006fa6:	e00e      	b.n	8006fc6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	085b      	lsrs	r3, r3, #1
 8006fae:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006fbe:	e002      	b.n	8006fc6 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	76fb      	strb	r3, [r7, #27]
        break;
 8006fc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	2b0f      	cmp	r3, #15
 8006fca:	d916      	bls.n	8006ffa <UART_SetConfig+0x5de>
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd2:	d212      	bcs.n	8006ffa <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	f023 030f 	bic.w	r3, r3, #15
 8006fdc:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	085b      	lsrs	r3, r3, #1
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f003 0307 	and.w	r3, r3, #7
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	89fb      	ldrh	r3, [r7, #14]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	89fa      	ldrh	r2, [r7, #14]
 8006ff6:	60da      	str	r2, [r3, #12]
 8006ff8:	e076      	b.n	80070e8 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	76fb      	strb	r3, [r7, #27]
 8006ffe:	e073      	b.n	80070e8 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8007000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007004:	2b08      	cmp	r3, #8
 8007006:	d85c      	bhi.n	80070c2 <UART_SetConfig+0x6a6>
 8007008:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <UART_SetConfig+0x5f4>)
 800700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700e:	bf00      	nop
 8007010:	08007035 	.word	0x08007035
 8007014:	08007053 	.word	0x08007053
 8007018:	08007071 	.word	0x08007071
 800701c:	080070c3 	.word	0x080070c3
 8007020:	0800708d 	.word	0x0800708d
 8007024:	080070c3 	.word	0x080070c3
 8007028:	080070c3 	.word	0x080070c3
 800702c:	080070c3 	.word	0x080070c3
 8007030:	080070ab 	.word	0x080070ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007034:	f7fd fc4a 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8007038:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	085a      	lsrs	r2, r3, #1
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	441a      	add	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	fbb2 f3f3 	udiv	r3, r2, r3
 800704c:	b29b      	uxth	r3, r3
 800704e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007050:	e03a      	b.n	80070c8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007052:	f7fd fc51 	bl	80048f8 <HAL_RCC_GetPCLK2Freq>
 8007056:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	085a      	lsrs	r2, r3, #1
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	441a      	add	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	fbb2 f3f3 	udiv	r3, r2, r3
 800706a:	b29b      	uxth	r3, r3
 800706c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800706e:	e02b      	b.n	80070c8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	085b      	lsrs	r3, r3, #1
 8007076:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800707a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6852      	ldr	r2, [r2, #4]
 8007082:	fbb3 f3f2 	udiv	r3, r3, r2
 8007086:	b29b      	uxth	r3, r3
 8007088:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800708a:	e01d      	b.n	80070c8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800708c:	f7fd fb88 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8007090:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	085a      	lsrs	r2, r3, #1
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	441a      	add	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80070a8:	e00e      	b.n	80070c8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	085b      	lsrs	r3, r3, #1
 80070b0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070bc:	b29b      	uxth	r3, r3
 80070be:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80070c0:	e002      	b.n	80070c8 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	76fb      	strb	r3, [r7, #27]
        break;
 80070c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	2b0f      	cmp	r3, #15
 80070cc:	d90a      	bls.n	80070e4 <UART_SetConfig+0x6c8>
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d4:	d206      	bcs.n	80070e4 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	60da      	str	r2, [r3, #12]
 80070de:	e003      	b.n	80070e8 <UART_SetConfig+0x6cc>
 80070e0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80070f4:	7efb      	ldrb	r3, [r7, #27]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3728      	adds	r7, #40	; 0x28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08007100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00a      	beq.n	800712a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00a      	beq.n	800716e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	f003 0308 	and.w	r3, r3, #8
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	f003 0310 	and.w	r3, r3, #16
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00a      	beq.n	80071b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	f003 0320 	and.w	r3, r3, #32
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d01a      	beq.n	8007216 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071fe:	d10a      	bne.n	8007216 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	605a      	str	r2, [r3, #4]
  }
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af02      	add	r7, sp, #8
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007252:	f7f9 f9a9 	bl	80005a8 <HAL_GetTick>
 8007256:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b08      	cmp	r3, #8
 8007264:	d10e      	bne.n	8007284 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007266:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f82a 	bl	80072ce <UART_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e020      	b.n	80072c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0304 	and.w	r3, r3, #4
 800728e:	2b04      	cmp	r3, #4
 8007290:	d10e      	bne.n	80072b0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007292:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f814 	bl	80072ce <UART_WaitOnFlagUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e00a      	b.n	80072c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	4613      	mov	r3, r2
 80072dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072de:	e05d      	b.n	800739c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e6:	d059      	beq.n	800739c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072e8:	f7f9 f95e 	bl	80005a8 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d302      	bcc.n	80072fe <UART_WaitOnFlagUntilTimeout+0x30>
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d11b      	bne.n	8007336 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800730c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2220      	movs	r2, #32
 8007322:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e042      	b.n	80073bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0304 	and.w	r3, r3, #4
 8007340:	2b00      	cmp	r3, #0
 8007342:	d02b      	beq.n	800739c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800734e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007352:	d123      	bne.n	800739c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800735c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800736c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 0201 	bic.w	r2, r2, #1
 800737c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2220      	movs	r2, #32
 8007382:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2220      	movs	r2, #32
 800738e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e00f      	b.n	80073bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	69da      	ldr	r2, [r3, #28]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	4013      	ands	r3, r2
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	bf0c      	ite	eq
 80073ac:	2301      	moveq	r3, #1
 80073ae:	2300      	movne	r3, #0
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	461a      	mov	r2, r3
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d092      	beq.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073c4:	b084      	sub	sp, #16
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	f107 001c 	add.w	r0, r7, #28
 80073d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d122      	bne.n	8007422 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80073f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007406:	2b01      	cmp	r3, #1
 8007408:	d105      	bne.n	8007416 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f936 	bl	8007688 <USB_CoreReset>
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]
 8007420:	e01a      	b.n	8007458 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f92a 	bl	8007688 <USB_CoreReset>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800743a:	2b00      	cmp	r3, #0
 800743c:	d106      	bne.n	800744c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007442:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	639a      	str	r2, [r3, #56]	; 0x38
 800744a:	e005      	b.n	8007458 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007450:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007464:	b004      	add	sp, #16
 8007466:	4770      	bx	lr

08007468 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f043 0201 	orr.w	r2, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f023 0201 	bic.w	r2, r3, #1
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d106      	bne.n	80074d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	60da      	str	r2, [r3, #12]
 80074d6:	e00b      	b.n	80074f0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80074d8:	78fb      	ldrb	r3, [r7, #3]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d106      	bne.n	80074ec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60da      	str	r2, [r3, #12]
 80074ea:	e001      	b.n	80074f0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e003      	b.n	80074f8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80074f0:	2032      	movs	r0, #50	; 0x32
 80074f2:	f7f9 f865 	bl	80005c0 <HAL_Delay>

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	019b      	lsls	r3, r3, #6
 8007512:	f043 0220 	orr.w	r2, r3, #32
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3301      	adds	r3, #1
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4a09      	ldr	r2, [pc, #36]	; (8007548 <USB_FlushTxFifo+0x48>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d901      	bls.n	800752c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e006      	b.n	800753a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f003 0320 	and.w	r3, r3, #32
 8007534:	2b20      	cmp	r3, #32
 8007536:	d0f0      	beq.n	800751a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	00030d40 	.word	0x00030d40

0800754c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2210      	movs	r2, #16
 800755c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3301      	adds	r3, #1
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4a09      	ldr	r2, [pc, #36]	; (800758c <USB_FlushRxFifo+0x40>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d901      	bls.n	8007570 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e006      	b.n	800757e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	2b10      	cmp	r3, #16
 800757a:	d0f0      	beq.n	800755e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	00030d40 	.word	0x00030d40

08007590 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8007590:	b480      	push	{r7}
 8007592:	b089      	sub	sp, #36	; 0x24
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	4611      	mov	r1, r2
 800759c:	461a      	mov	r2, r3
 800759e:	460b      	mov	r3, r1
 80075a0:	71fb      	strb	r3, [r7, #7]
 80075a2:	4613      	mov	r3, r2
 80075a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80075ae:	88bb      	ldrh	r3, [r7, #4]
 80075b0:	3303      	adds	r3, #3
 80075b2:	089b      	lsrs	r3, r3, #2
 80075b4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80075b6:	2300      	movs	r3, #0
 80075b8:	61bb      	str	r3, [r7, #24]
 80075ba:	e00f      	b.n	80075dc <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075bc:	79fb      	ldrb	r3, [r7, #7]
 80075be:	031a      	lsls	r2, r3, #12
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c8:	461a      	mov	r2, r3
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6013      	str	r3, [r2, #0]
    pSrc++;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	3304      	adds	r3, #4
 80075d4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	3301      	adds	r3, #1
 80075da:	61bb      	str	r3, [r7, #24]
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d3eb      	bcc.n	80075bc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3724      	adds	r7, #36	; 0x24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b089      	sub	sp, #36	; 0x24
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	4613      	mov	r3, r2
 80075fe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007608:	88fb      	ldrh	r3, [r7, #6]
 800760a:	3303      	adds	r3, #3
 800760c:	089b      	lsrs	r3, r3, #2
 800760e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007610:	2300      	movs	r3, #0
 8007612:	61bb      	str	r3, [r7, #24]
 8007614:	e00b      	b.n	800762e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	601a      	str	r2, [r3, #0]
    pDest++;
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	3304      	adds	r3, #4
 8007626:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	3301      	adds	r3, #1
 800762c:	61bb      	str	r3, [r7, #24]
 800762e:	69ba      	ldr	r2, [r7, #24]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	429a      	cmp	r2, r3
 8007634:	d3ef      	bcc.n	8007616 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007636:	69fb      	ldr	r3, [r7, #28]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3724      	adds	r7, #36	; 0x24
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	4013      	ands	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800765c:	68fb      	ldr	r3, [r7, #12]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	f003 0301 	and.w	r3, r3, #1
}
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
	...

08007688 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3301      	adds	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4a13      	ldr	r2, [pc, #76]	; (80076ec <USB_CoreReset+0x64>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d901      	bls.n	80076a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e01b      	b.n	80076de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	daf2      	bge.n	8007694 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	f043 0201 	orr.w	r2, r3, #1
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4a09      	ldr	r2, [pc, #36]	; (80076ec <USB_CoreReset+0x64>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d901      	bls.n	80076d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e006      	b.n	80076de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d0f0      	beq.n	80076be <USB_CoreReset+0x36>

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	00030d40 	.word	0x00030d40

080076f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076f0:	b084      	sub	sp, #16
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	f107 001c 	add.w	r0, r7, #28
 80076fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800770c:	461a      	mov	r2, r3
 800770e:	2300      	movs	r3, #0
 8007710:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007716:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007738:	f023 0304 	bic.w	r3, r3, #4
 800773c:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800773e:	2110      	movs	r1, #16
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff fedd 	bl	8007500 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff ff00 	bl	800754c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e015      	b.n	800777e <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	4413      	add	r3, r2
 800775a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800775e:	461a      	mov	r2, r3
 8007760:	f04f 33ff 	mov.w	r3, #4294967295
 8007764:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	4413      	add	r3, r2
 800776e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007772:	461a      	mov	r2, r3
 8007774:	2300      	movs	r3, #0
 8007776:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	3301      	adds	r3, #1
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	429a      	cmp	r2, r3
 8007784:	d3e5      	bcc.n	8007752 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007786:	2101      	movs	r1, #1
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f893 	bl	80078b4 <USB_DriveVbus>

  HAL_Delay(200U);
 800778e:	20c8      	movs	r0, #200	; 0xc8
 8007790:	f7f8 ff16 	bl	80005c0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f04f 32ff 	mov.w	r2, #4294967295
 80077a0:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2280      	movs	r2, #128	; 0x80
 80077a6:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a0d      	ldr	r2, [pc, #52]	; (80077e0 <USB_HostInit+0xf0>)
 80077ac:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a0c      	ldr	r2, [pc, #48]	; (80077e4 <USB_HostInit+0xf4>)
 80077b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	f043 0210 	orr.w	r2, r3, #16
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	699a      	ldr	r2, [r3, #24]
 80077c6:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <USB_HostInit+0xf8>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077da:	b004      	add	sp, #16
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	00600080 	.word	0x00600080
 80077e4:	004000e0 	.word	0x004000e0
 80077e8:	a3200008 	.word	0xa3200008

080077ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800780a:	f023 0303 	bic.w	r3, r3, #3
 800780e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	78fb      	ldrb	r3, [r7, #3]
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007824:	4313      	orrs	r3, r2
 8007826:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007828:	78fb      	ldrb	r3, [r7, #3]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d107      	bne.n	800783e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007834:	461a      	mov	r2, r3
 8007836:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800783a:	6053      	str	r3, [r2, #4]
 800783c:	e009      	b.n	8007852 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d106      	bne.n	8007852 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800784a:	461a      	mov	r2, r3
 800784c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007850:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007880:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800788a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800788e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007890:	2064      	movs	r0, #100	; 0x64
 8007892:	f7f8 fe95 	bl	80005c0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800789e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80078a4:	200a      	movs	r0, #10
 80078a6:	f7f8 fe8b 	bl	80005c0 <HAL_Delay>

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d109      	bne.n	80078f8 <USB_DriveVbus+0x44>
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d106      	bne.n	80078f8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078f6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007902:	d109      	bne.n	8007918 <USB_DriveVbus+0x64>
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007916:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	0c5b      	lsrs	r3, r3, #17
 8007944:	f003 0303 	and.w	r3, r3, #3
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	b29b      	uxth	r3, r3
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
	...

08007978 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	4608      	mov	r0, r1
 8007982:	4611      	mov	r1, r2
 8007984:	461a      	mov	r2, r3
 8007986:	4603      	mov	r3, r0
 8007988:	70fb      	strb	r3, [r7, #3]
 800798a:	460b      	mov	r3, r1
 800798c:	70bb      	strb	r3, [r7, #2]
 800798e:	4613      	mov	r3, r2
 8007990:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a6:	461a      	mov	r2, r3
 80079a8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80079ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d867      	bhi.n	8007a86 <USB_HC_Init+0x10e>
 80079b6:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <USB_HC_Init+0x44>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	08007a49 	.word	0x08007a49
 80079c4:	080079cd 	.word	0x080079cd
 80079c8:	08007a0b 	.word	0x08007a0b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d8:	461a      	mov	r2, r3
 80079da:	f240 439d 	movw	r3, #1181	; 0x49d
 80079de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80079e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	da51      	bge.n	8007a8c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80079e8:	78fb      	ldrb	r3, [r7, #3]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	78fa      	ldrb	r2, [r7, #3]
 80079f8:	0151      	lsls	r1, r2, #5
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	440a      	add	r2, r1
 80079fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a06:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007a08:	e040      	b.n	8007a8c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a16:	461a      	mov	r2, r3
 8007a18:	f240 639d 	movw	r3, #1693	; 0x69d
 8007a1c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	da34      	bge.n	8007a90 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007a26:	78fb      	ldrb	r3, [r7, #3]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	78fa      	ldrb	r2, [r7, #3]
 8007a36:	0151      	lsls	r1, r2, #5
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	440a      	add	r2, r1
 8007a3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a44:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007a46:	e023      	b.n	8007a90 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a54:	461a      	mov	r2, r3
 8007a56:	f240 2325 	movw	r3, #549	; 0x225
 8007a5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	da17      	bge.n	8007a94 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a7e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007a82:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007a84:	e006      	b.n	8007a94 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	75fb      	strb	r3, [r7, #23]
      break;
 8007a8a:	e004      	b.n	8007a96 <USB_HC_Init+0x11e>
      break;
 8007a8c:	bf00      	nop
 8007a8e:	e002      	b.n	8007a96 <USB_HC_Init+0x11e>
      break;
 8007a90:	bf00      	nop
 8007a92:	e000      	b.n	8007a96 <USB_HC_Init+0x11e>
      break;
 8007a94:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a9c:	699a      	ldr	r2, [r3, #24]
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	f003 030f 	and.w	r3, r3, #15
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007ac0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	da03      	bge.n	8007ad0 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007ac8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	e001      	b.n	8007ad4 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007ad4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d103      	bne.n	8007ae4 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	e001      	b.n	8007ae8 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ae8:	787b      	ldrb	r3, [r7, #1]
 8007aea:	059b      	lsls	r3, r3, #22
 8007aec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007af0:	78bb      	ldrb	r3, [r7, #2]
 8007af2:	02db      	lsls	r3, r3, #11
 8007af4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007af8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007afa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007afe:	049b      	lsls	r3, r3, #18
 8007b00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b04:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b12:	78fb      	ldrb	r3, [r7, #3]
 8007b14:	0159      	lsls	r1, r3, #5
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	440b      	add	r3, r1
 8007b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b1e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b24:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007b26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d10f      	bne.n	8007b4e <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007b2e:	78fb      	ldrb	r3, [r7, #3]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	0151      	lsls	r1, r2, #5
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	440a      	add	r2, r1
 8007b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b4c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	371c      	adds	r7, #28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	785b      	ldrb	r3, [r3, #1]
 8007b6e:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b74:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d018      	beq.n	8007bb0 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	8912      	ldrh	r2, [r2, #8]
 8007b86:	4413      	add	r3, r2
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	8912      	ldrh	r2, [r2, #8]
 8007b8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b92:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8007b94:	8bfa      	ldrh	r2, [r7, #30]
 8007b96:	8a7b      	ldrh	r3, [r7, #18]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d90b      	bls.n	8007bb4 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8007b9c:	8a7b      	ldrh	r3, [r7, #18]
 8007b9e:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007ba0:	8bfb      	ldrh	r3, [r7, #30]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	8912      	ldrh	r2, [r2, #8]
 8007ba6:	fb02 f203 	mul.w	r2, r2, r3
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	611a      	str	r2, [r3, #16]
 8007bae:	e001      	b.n	8007bb4 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	78db      	ldrb	r3, [r3, #3]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d006      	beq.n	8007bca <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007bbc:	8bfb      	ldrh	r3, [r7, #30]
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	8912      	ldrh	r2, [r2, #8]
 8007bc2:	fb02 f203 	mul.w	r2, r2, r3
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bd2:	8bfb      	ldrh	r3, [r7, #30]
 8007bd4:	04d9      	lsls	r1, r3, #19
 8007bd6:	4b5f      	ldr	r3, [pc, #380]	; (8007d54 <USB_HC_StartXfer+0x1f8>)
 8007bd8:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bda:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	7a9b      	ldrb	r3, [r3, #10]
 8007be0:	075b      	lsls	r3, r3, #29
 8007be2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007be6:	6979      	ldr	r1, [r7, #20]
 8007be8:	0148      	lsls	r0, r1, #5
 8007bea:	69b9      	ldr	r1, [r7, #24]
 8007bec:	4401      	add	r1, r0
 8007bee:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bf2:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bf4:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bf0c      	ite	eq
 8007c06:	2301      	moveq	r3, #1
 8007c08:	2300      	movne	r3, #0
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c2c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	7c7b      	ldrb	r3, [r7, #17]
 8007c3e:	075b      	lsls	r3, r3, #29
 8007c40:	6979      	ldr	r1, [r7, #20]
 8007c42:	0148      	lsls	r0, r1, #5
 8007c44:	69b9      	ldr	r1, [r7, #24]
 8007c46:	4401      	add	r1, r0
 8007c48:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a3e      	ldr	r2, [pc, #248]	; (8007d58 <USB_HC_StartXfer+0x1fc>)
 8007c60:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c62:	4b3d      	ldr	r3, [pc, #244]	; (8007d58 <USB_HC_StartXfer+0x1fc>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c6a:	4a3b      	ldr	r2, [pc, #236]	; (8007d58 <USB_HC_StartXfer+0x1fc>)
 8007c6c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	78db      	ldrb	r3, [r3, #3]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d006      	beq.n	8007c84 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c76:	4b38      	ldr	r3, [pc, #224]	; (8007d58 <USB_HC_StartXfer+0x1fc>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c7e:	4a36      	ldr	r2, [pc, #216]	; (8007d58 <USB_HC_StartXfer+0x1fc>)
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	e005      	b.n	8007c90 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c84:	4b34      	ldr	r3, [pc, #208]	; (8007d58 <USB_HC_StartXfer+0x1fc>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c8c:	4a32      	ldr	r2, [pc, #200]	; (8007d58 <USB_HC_StartXfer+0x1fc>)
 8007c8e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c90:	4b31      	ldr	r3, [pc, #196]	; (8007d58 <USB_HC_StartXfer+0x1fc>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c98:	4a2f      	ldr	r2, [pc, #188]	; (8007d58 <USB_HC_StartXfer+0x1fc>)
 8007c9a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4b2b      	ldr	r3, [pc, #172]	; (8007d58 <USB_HC_StartXfer+0x1fc>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	78db      	ldrb	r3, [r3, #3]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d148      	bne.n	8007d4a <USB_HC_StartXfer+0x1ee>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d044      	beq.n	8007d4a <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	79db      	ldrb	r3, [r3, #7]
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d831      	bhi.n	8007d2c <USB_HC_StartXfer+0x1d0>
 8007cc8:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <USB_HC_StartXfer+0x174>)
 8007cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cce:	bf00      	nop
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007d05 	.word	0x08007d05
 8007cd8:	08007ce1 	.word	0x08007ce1
 8007cdc:	08007d05 	.word	0x08007d05
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	3303      	adds	r3, #3
 8007ce6:	089b      	lsrs	r3, r3, #2
 8007ce8:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007cea:	89fa      	ldrh	r2, [r7, #14]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d91c      	bls.n	8007d30 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	f043 0220 	orr.w	r2, r3, #32
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	619a      	str	r2, [r3, #24]
          }
          break;
 8007d02:	e015      	b.n	8007d30 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	3303      	adds	r3, #3
 8007d0a:	089b      	lsrs	r3, r3, #2
 8007d0c:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007d0e:	89fa      	ldrh	r2, [r7, #14]
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d90a      	bls.n	8007d34 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	619a      	str	r2, [r3, #24]
          }
          break;
 8007d2a:	e003      	b.n	8007d34 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8007d2c:	bf00      	nop
 8007d2e:	e002      	b.n	8007d36 <USB_HC_StartXfer+0x1da>
          break;
 8007d30:	bf00      	nop
 8007d32:	e000      	b.n	8007d36 <USB_HC_StartXfer+0x1da>
          break;
 8007d34:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	68d9      	ldr	r1, [r3, #12]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	785a      	ldrb	r2, [r3, #1]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff fc23 	bl	8007590 <USB_WritePacket>
    }

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3720      	adds	r7, #32
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	1ff80000 	.word	0x1ff80000
 8007d58:	200000b0 	.word	0x200000b0

08007d5c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	b29b      	uxth	r3, r3
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b087      	sub	sp, #28
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	460b      	mov	r3, r1
 8007d88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	0c9b      	lsrs	r3, r3, #18
 8007da6:	f003 0303 	and.w	r3, r3, #3
 8007daa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d002      	beq.n	8007db8 <USB_HC_Halt+0x3a>
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d16c      	bne.n	8007e92 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	0151      	lsls	r1, r2, #5
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	440a      	add	r2, r1
 8007dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dd6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d143      	bne.n	8007e6c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	0151      	lsls	r1, r2, #5
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	440a      	add	r2, r1
 8007dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	0151      	lsls	r1, r2, #5
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	440a      	add	r2, r1
 8007e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e22:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	0151      	lsls	r1, r2, #5
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	440a      	add	r2, r1
 8007e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e42:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	3301      	adds	r3, #1
 8007e48:	617b      	str	r3, [r7, #20]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e50:	d81d      	bhi.n	8007e8e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e68:	d0ec      	beq.n	8007e44 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e6a:	e080      	b.n	8007f6e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	0151      	lsls	r1, r2, #5
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	440a      	add	r2, r1
 8007e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e8a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e8c:	e06f      	b.n	8007f6e <USB_HC_Halt+0x1f0>
          break;
 8007e8e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e90:	e06d      	b.n	8007f6e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	0151      	lsls	r1, r2, #5
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007eb0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d143      	bne.n	8007f4a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	0151      	lsls	r1, r2, #5
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	440a      	add	r2, r1
 8007ed8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ee0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	015a      	lsls	r2, r3, #5
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	0151      	lsls	r1, r2, #5
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	440a      	add	r2, r1
 8007ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f00:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	0151      	lsls	r1, r2, #5
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	440a      	add	r2, r1
 8007f18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f20:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	3301      	adds	r3, #1
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f2e:	d81d      	bhi.n	8007f6c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f46:	d0ec      	beq.n	8007f22 <USB_HC_Halt+0x1a4>
 8007f48:	e011      	b.n	8007f6e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	0151      	lsls	r1, r2, #5
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	440a      	add	r2, r1
 8007f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	e000      	b.n	8007f6e <USB_HC_Halt+0x1f0>
          break;
 8007f6c:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	371c      	adds	r7, #28
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff fa7c 	bl	800748a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007f92:	2110      	movs	r1, #16
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff fab3 	bl	8007500 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7ff fad6 	bl	800754c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	613b      	str	r3, [r7, #16]
 8007fa4:	e01f      	b.n	8007fe6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fbc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fc4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fcc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fda:	461a      	mov	r2, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	613b      	str	r3, [r7, #16]
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	2b0f      	cmp	r3, #15
 8007fea:	d9dc      	bls.n	8007fa6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007fec:	2300      	movs	r3, #0
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	e034      	b.n	800805c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008008:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008010:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008018:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4413      	add	r3, r2
 8008022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008026:	461a      	mov	r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	3301      	adds	r3, #1
 8008030:	617b      	str	r3, [r7, #20]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008038:	d80c      	bhi.n	8008054 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4413      	add	r3, r2
 8008042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800804c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008050:	d0ec      	beq.n	800802c <USB_StopHost+0xb0>
 8008052:	e000      	b.n	8008056 <USB_StopHost+0xda>
        break;
 8008054:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	3301      	adds	r3, #1
 800805a:	613b      	str	r3, [r7, #16]
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2b0f      	cmp	r3, #15
 8008060:	d9c7      	bls.n	8007ff2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008068:	461a      	mov	r2, r3
 800806a:	f04f 33ff 	mov.w	r3, #4294967295
 800806e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f04f 32ff 	mov.w	r2, #4294967295
 8008076:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff f9f5 	bl	8007468 <USB_EnableGlobalInt>

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008088:	b590      	push	{r4, r7, lr}
 800808a:	b089      	sub	sp, #36	; 0x24
 800808c:	af04      	add	r7, sp, #16
 800808e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008090:	2301      	movs	r3, #1
 8008092:	2202      	movs	r2, #2
 8008094:	2102      	movs	r1, #2
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fcae 	bl	80089f8 <USBH_FindInterface>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	2bff      	cmp	r3, #255	; 0xff
 80080a4:	d002      	beq.n	80080ac <USBH_CDC_InterfaceInit+0x24>
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d901      	bls.n	80080b0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80080ac:	2302      	movs	r3, #2
 80080ae:	e13d      	b.n	800832c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fc83 	bl	80089c0 <USBH_SelectInterface>
 80080ba:	4603      	mov	r3, r0
 80080bc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80080c4:	2302      	movs	r3, #2
 80080c6:	e131      	b.n	800832c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80080ce:	2050      	movs	r0, #80	; 0x50
 80080d0:	f006 fbf4 	bl	800e8bc <malloc>
 80080d4:	4603      	mov	r3, r0
 80080d6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80080e8:	2302      	movs	r3, #2
 80080ea:	e11f      	b.n	800832c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80080ec:	2250      	movs	r2, #80	; 0x50
 80080ee:	2100      	movs	r1, #0
 80080f0:	68b8      	ldr	r0, [r7, #8]
 80080f2:	f006 fbfe 	bl	800e8f2 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	211a      	movs	r1, #26
 80080fc:	fb01 f303 	mul.w	r3, r1, r3
 8008100:	4413      	add	r3, r2
 8008102:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	b25b      	sxtb	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	da15      	bge.n	800813a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800810e:	7bfb      	ldrb	r3, [r7, #15]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	211a      	movs	r1, #26
 8008114:	fb01 f303 	mul.w	r3, r1, r3
 8008118:	4413      	add	r3, r2
 800811a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800811e:	781a      	ldrb	r2, [r3, #0]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	211a      	movs	r1, #26
 800812a:	fb01 f303 	mul.w	r3, r1, r3
 800812e:	4413      	add	r3, r2
 8008130:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008134:	881a      	ldrh	r2, [r3, #0]
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	785b      	ldrb	r3, [r3, #1]
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 ff52 	bl	8009fea <USBH_AllocPipe>
 8008146:	4603      	mov	r3, r0
 8008148:	461a      	mov	r2, r3
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	7819      	ldrb	r1, [r3, #0]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	7858      	ldrb	r0, [r3, #1]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	8952      	ldrh	r2, [r2, #10]
 8008166:	9202      	str	r2, [sp, #8]
 8008168:	2203      	movs	r2, #3
 800816a:	9201      	str	r2, [sp, #4]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	4623      	mov	r3, r4
 8008170:	4602      	mov	r2, r0
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 ff0a 	bl	8009f8c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2200      	movs	r2, #0
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f006 fac1 	bl	800e708 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008186:	2300      	movs	r3, #0
 8008188:	2200      	movs	r2, #0
 800818a:	210a      	movs	r1, #10
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fc33 	bl	80089f8 <USBH_FindInterface>
 8008192:	4603      	mov	r3, r0
 8008194:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	2bff      	cmp	r3, #255	; 0xff
 800819a:	d002      	beq.n	80081a2 <USBH_CDC_InterfaceInit+0x11a>
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d901      	bls.n	80081a6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80081a2:	2302      	movs	r3, #2
 80081a4:	e0c2      	b.n	800832c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	211a      	movs	r1, #26
 80081ac:	fb01 f303 	mul.w	r3, r1, r3
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	b25b      	sxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da16      	bge.n	80081ec <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	211a      	movs	r1, #26
 80081c4:	fb01 f303 	mul.w	r3, r1, r3
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80081ce:	781a      	ldrb	r2, [r3, #0]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	211a      	movs	r1, #26
 80081da:	fb01 f303 	mul.w	r3, r1, r3
 80081de:	4413      	add	r3, r2
 80081e0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80081e4:	881a      	ldrh	r2, [r3, #0]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	835a      	strh	r2, [r3, #26]
 80081ea:	e015      	b.n	8008218 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	211a      	movs	r1, #26
 80081f2:	fb01 f303 	mul.w	r3, r1, r3
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80081fc:	781a      	ldrb	r2, [r3, #0]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	211a      	movs	r1, #26
 8008208:	fb01 f303 	mul.w	r3, r1, r3
 800820c:	4413      	add	r3, r2
 800820e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008212:	881a      	ldrh	r2, [r3, #0]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	211a      	movs	r1, #26
 800821e:	fb01 f303 	mul.w	r3, r1, r3
 8008222:	4413      	add	r3, r2
 8008224:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	b25b      	sxtb	r3, r3
 800822c:	2b00      	cmp	r3, #0
 800822e:	da16      	bge.n	800825e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	211a      	movs	r1, #26
 8008236:	fb01 f303 	mul.w	r3, r1, r3
 800823a:	4413      	add	r3, r2
 800823c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008240:	781a      	ldrb	r2, [r3, #0]
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	211a      	movs	r1, #26
 800824c:	fb01 f303 	mul.w	r3, r1, r3
 8008250:	4413      	add	r3, r2
 8008252:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008256:	881a      	ldrh	r2, [r3, #0]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	835a      	strh	r2, [r3, #26]
 800825c:	e015      	b.n	800828a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800825e:	7bfb      	ldrb	r3, [r7, #15]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	211a      	movs	r1, #26
 8008264:	fb01 f303 	mul.w	r3, r1, r3
 8008268:	4413      	add	r3, r2
 800826a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800826e:	781a      	ldrb	r2, [r3, #0]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008274:	7bfb      	ldrb	r3, [r7, #15]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	211a      	movs	r1, #26
 800827a:	fb01 f303 	mul.w	r3, r1, r3
 800827e:	4413      	add	r3, r2
 8008280:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008284:	881a      	ldrh	r2, [r3, #0]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	7b9b      	ldrb	r3, [r3, #14]
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 feaa 	bl	8009fea <USBH_AllocPipe>
 8008296:	4603      	mov	r3, r0
 8008298:	461a      	mov	r2, r3
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	7bdb      	ldrb	r3, [r3, #15]
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 fea0 	bl	8009fea <USBH_AllocPipe>
 80082aa:	4603      	mov	r3, r0
 80082ac:	461a      	mov	r2, r3
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	7b59      	ldrb	r1, [r3, #13]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	7b98      	ldrb	r0, [r3, #14]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	8b12      	ldrh	r2, [r2, #24]
 80082ca:	9202      	str	r2, [sp, #8]
 80082cc:	2202      	movs	r2, #2
 80082ce:	9201      	str	r2, [sp, #4]
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	4623      	mov	r3, r4
 80082d4:	4602      	mov	r2, r0
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 fe58 	bl	8009f8c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	7b19      	ldrb	r1, [r3, #12]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	7bd8      	ldrb	r0, [r3, #15]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	8b52      	ldrh	r2, [r2, #26]
 80082f4:	9202      	str	r2, [sp, #8]
 80082f6:	2202      	movs	r2, #2
 80082f8:	9201      	str	r2, [sp, #4]
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	4623      	mov	r3, r4
 80082fe:	4602      	mov	r2, r0
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 fe43 	bl	8009f8c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	7b5b      	ldrb	r3, [r3, #13]
 8008312:	2200      	movs	r2, #0
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f006 f9f6 	bl	800e708 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	7b1b      	ldrb	r3, [r3, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f006 f9ef 	bl	800e708 <USBH_LL_SetToggle>

  return USBH_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	bd90      	pop	{r4, r7, pc}

08008334 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00e      	beq.n	800836c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 fe38 	bl	8009fca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 fe62 	bl	800a02a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	7b1b      	ldrb	r3, [r3, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00e      	beq.n	8008392 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	7b1b      	ldrb	r3, [r3, #12]
 8008378:	4619      	mov	r1, r3
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 fe25 	bl	8009fca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	7b1b      	ldrb	r3, [r3, #12]
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f001 fe4f 	bl	800a02a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	7b5b      	ldrb	r3, [r3, #13]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00e      	beq.n	80083b8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	7b5b      	ldrb	r3, [r3, #13]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 fe12 	bl	8009fca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	7b5b      	ldrb	r3, [r3, #13]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 fe3c 	bl	800a02a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f006 fa7d 	bl	800e8cc <free>
    phost->pActiveClass->pData = 0U;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083d8:	2200      	movs	r2, #0
 80083da:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80083ee:	2302      	movs	r3, #2
 80083f0:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	3340      	adds	r3, #64	; 0x40
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f8b1 	bl	800856a <GetLineCoding>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]
  if (status == USBH_OK)
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d105      	bne.n	800841e <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008418:	2102      	movs	r1, #2
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	4798      	blx	r3
  }
  return status;
 800841e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008430:	2301      	movs	r3, #1
 8008432:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008448:	2b04      	cmp	r3, #4
 800844a:	d877      	bhi.n	800853c <USBH_CDC_Process+0x114>
 800844c:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <USBH_CDC_Process+0x2c>)
 800844e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008452:	bf00      	nop
 8008454:	08008469 	.word	0x08008469
 8008458:	0800846f 	.word	0x0800846f
 800845c:	0800849f 	.word	0x0800849f
 8008460:	08008513 	.word	0x08008513
 8008464:	08008521 	.word	0x08008521
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	73fb      	strb	r3, [r7, #15]
      break;
 800846c:	e06d      	b.n	800854a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008472:	4619      	mov	r1, r3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f897 	bl	80085a8 <SetLineCoding>
 800847a:	4603      	mov	r3, r0
 800847c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d104      	bne.n	800848e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800848c:	e058      	b.n	8008540 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d055      	beq.n	8008540 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2204      	movs	r2, #4
 8008498:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800849c:	e050      	b.n	8008540 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	3340      	adds	r3, #64	; 0x40
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f860 	bl	800856a <GetLineCoding>
 80084aa:	4603      	mov	r3, r0
 80084ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d126      	bne.n	8008502 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084c6:	791b      	ldrb	r3, [r3, #4]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d13b      	bne.n	8008544 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084d6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80084d8:	429a      	cmp	r2, r3
 80084da:	d133      	bne.n	8008544 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d12b      	bne.n	8008544 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d124      	bne.n	8008544 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f984 	bl	8008808 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008500:	e020      	b.n	8008544 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d01d      	beq.n	8008544 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	2204      	movs	r2, #4
 800850c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008510:	e018      	b.n	8008544 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f867 	bl	80085e6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f8f8 	bl	800870e <CDC_ProcessReception>
      break;
 800851e:	e014      	b.n	800854a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008520:	2100      	movs	r1, #0
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 f81b 	bl	800955e <USBH_ClrFeature>
 8008528:	4603      	mov	r3, r0
 800852a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10a      	bne.n	8008548 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE ;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800853a:	e005      	b.n	8008548 <USBH_CDC_Process+0x120>

    default:
      break;
 800853c:	bf00      	nop
 800853e:	e004      	b.n	800854a <USBH_CDC_Process+0x122>
      break;
 8008540:	bf00      	nop
 8008542:	e002      	b.n	800854a <USBH_CDC_Process+0x122>
      break;
 8008544:	bf00      	nop
 8008546:	e000      	b.n	800854a <USBH_CDC_Process+0x122>
      break;
 8008548:	bf00      	nop

  }

  return status;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	22a1      	movs	r2, #161	; 0xa1
 8008578:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2221      	movs	r2, #33	; 0x21
 800857e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2207      	movs	r2, #7
 8008590:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2207      	movs	r2, #7
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f001 f9c0 	bl	800991e <USBH_CtlReq>
 800859e:	4603      	mov	r3, r0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2221      	movs	r2, #33	; 0x21
 80085b6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2220      	movs	r2, #32
 80085bc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2207      	movs	r2, #7
 80085ce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2207      	movs	r2, #7
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f001 f9a1 	bl	800991e <USBH_CtlReq>
 80085dc:	4603      	mov	r3, r0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b086      	sub	sp, #24
 80085ea:	af02      	add	r7, sp, #8
 80085ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008602:	2b01      	cmp	r3, #1
 8008604:	d002      	beq.n	800860c <CDC_ProcessTransmission+0x26>
 8008606:	2b02      	cmp	r3, #2
 8008608:	d025      	beq.n	8008656 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800860a:	e07c      	b.n	8008706 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	8b12      	ldrh	r2, [r2, #24]
 8008614:	4293      	cmp	r3, r2
 8008616:	d90c      	bls.n	8008632 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	69d9      	ldr	r1, [r3, #28]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	8b1a      	ldrh	r2, [r3, #24]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	7b58      	ldrb	r0, [r3, #13]
 8008624:	2301      	movs	r3, #1
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	4603      	mov	r3, r0
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 fc6b 	bl	8009f06 <USBH_BulkSendData>
 8008630:	e00c      	b.n	800864c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800863a:	b29a      	uxth	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	7b58      	ldrb	r0, [r3, #13]
 8008640:	2301      	movs	r3, #1
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	4603      	mov	r3, r0
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 fc5d 	bl	8009f06 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2202      	movs	r2, #2
 8008650:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008654:	e057      	b.n	8008706 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	7b5b      	ldrb	r3, [r3, #13]
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f006 f829 	bl	800e6b4 <USBH_LL_GetURBState>
 8008662:	4603      	mov	r3, r0
 8008664:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008666:	7afb      	ldrb	r3, [r7, #11]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d136      	bne.n	80086da <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	8b12      	ldrh	r2, [r2, #24]
 8008674:	4293      	cmp	r3, r2
 8008676:	d90e      	bls.n	8008696 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	8b12      	ldrh	r2, [r2, #24]
 8008680:	1a9a      	subs	r2, r3, r2
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	8b12      	ldrh	r2, [r2, #24]
 800868e:	441a      	add	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	61da      	str	r2, [r3, #28]
 8008694:	e002      	b.n	800869c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80086ac:	e006      	b.n	80086bc <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f892 	bl	80087e0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2204      	movs	r2, #4
 80086c0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 80086d0:	2300      	movs	r3, #0
 80086d2:	2200      	movs	r2, #0
 80086d4:	f001 feb4 	bl	800a440 <osMessageQueuePut>
      break;
 80086d8:	e014      	b.n	8008704 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 80086da:	7afb      	ldrb	r3, [r7, #11]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d111      	bne.n	8008704 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2204      	movs	r2, #4
 80086ec:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 80086fc:	2300      	movs	r3, #0
 80086fe:	2200      	movs	r2, #0
 8008700:	f001 fe9e 	bl	800a440 <osMessageQueuePut>
      break;
 8008704:	bf00      	nop
  }
}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b086      	sub	sp, #24
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008720:	2300      	movs	r3, #0
 8008722:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800872a:	2b03      	cmp	r3, #3
 800872c:	d002      	beq.n	8008734 <CDC_ProcessReception+0x26>
 800872e:	2b04      	cmp	r3, #4
 8008730:	d00e      	beq.n	8008750 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008732:	e051      	b.n	80087d8 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	6a19      	ldr	r1, [r3, #32]
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	8b5a      	ldrh	r2, [r3, #26]
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	7b1b      	ldrb	r3, [r3, #12]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 fc05 	bl	8009f50 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2204      	movs	r2, #4
 800874a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800874e:	e043      	b.n	80087d8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	7b1b      	ldrb	r3, [r3, #12]
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f005 ffac 	bl	800e6b4 <USBH_LL_GetURBState>
 800875c:	4603      	mov	r3, r0
 800875e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008760:	7cfb      	ldrb	r3, [r7, #19]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d137      	bne.n	80087d6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	7b1b      	ldrb	r3, [r3, #12]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f005 ff0f 	bl	800e590 <USBH_LL_GetLastXferSize>
 8008772:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	429a      	cmp	r2, r3
 800877c:	d016      	beq.n	80087ac <CDC_ProcessReception+0x9e>
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	8b5b      	ldrh	r3, [r3, #26]
 8008782:	461a      	mov	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4293      	cmp	r3, r2
 8008788:	d910      	bls.n	80087ac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	1ad2      	subs	r2, r2, r3
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	6a1a      	ldr	r2, [r3, #32]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	441a      	add	r2, r3
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2203      	movs	r2, #3
 80087a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80087aa:	e006      	b.n	80087ba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f81d 	bl	80087f4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2204      	movs	r2, #4
 80087be:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 80087ce:	2300      	movs	r3, #0
 80087d0:	2200      	movs	r2, #0
 80087d2:	f001 fe35 	bl	800a440 <osMessageQueuePut>
      break;
 80087d6:	bf00      	nop
  }
}
 80087d8:	bf00      	nop
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4613      	mov	r3, r2
 8008828:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008830:	2302      	movs	r3, #2
 8008832:	e044      	b.n	80088be <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	79fa      	ldrb	r2, [r7, #7]
 8008838:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 f841 	bl	80088d4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8008880:	2200      	movs	r2, #0
 8008882:	2104      	movs	r1, #4
 8008884:	2010      	movs	r0, #16
 8008886:	f001 fd55 	bl	800a334 <osMessageQueueNew>
 800888a:	4602      	mov	r2, r0
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8008892:	4b0d      	ldr	r3, [pc, #52]	; (80088c8 <USBH_Init+0xac>)
 8008894:	4a0d      	ldr	r2, [pc, #52]	; (80088cc <USBH_Init+0xb0>)
 8008896:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8008898:	4b0b      	ldr	r3, [pc, #44]	; (80088c8 <USBH_Init+0xac>)
 800889a:	2280      	movs	r2, #128	; 0x80
 800889c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800889e:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <USBH_Init+0xac>)
 80088a0:	2218      	movs	r2, #24
 80088a2:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80088a4:	4a08      	ldr	r2, [pc, #32]	; (80088c8 <USBH_Init+0xac>)
 80088a6:	68f9      	ldr	r1, [r7, #12]
 80088a8:	4809      	ldr	r0, [pc, #36]	; (80088d0 <USBH_Init+0xb4>)
 80088aa:	f001 fc6f 	bl	800a18c <osThreadNew>
 80088ae:	4602      	mov	r2, r0
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f005 fdb8 	bl	800e42c <USBH_LL_Init>

  return USBH_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	2000198c 	.word	0x2000198c
 80088cc:	0800ea94 	.word	0x0800ea94
 80088d0:	080092d5 	.word	0x080092d5

080088d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80088e0:	2300      	movs	r3, #0
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	e008      	b.n	80088f8 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	32e0      	adds	r2, #224	; 0xe0
 80088ec:	2100      	movs	r1, #0
 80088ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3301      	adds	r3, #1
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2b0e      	cmp	r3, #14
 80088fc:	d9f3      	bls.n	80088e6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80088fe:	2300      	movs	r3, #0
 8008900:	60fb      	str	r3, [r7, #12]
 8008902:	e009      	b.n	8008918 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4413      	add	r3, r2
 800890a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800890e:	2200      	movs	r2, #0
 8008910:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3301      	adds	r3, #1
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800891e:	d3f1      	bcc.n	8008904 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2240      	movs	r2, #64	; 0x40
 8008944:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800896a:	b480      	push	{r7}
 800896c:	b085      	sub	sp, #20
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d017      	beq.n	80089ae <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10f      	bne.n	80089a8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800898e:	1c59      	adds	r1, r3, #1
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	33dc      	adds	r3, #220	; 0xdc
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	73fb      	strb	r3, [r7, #15]
 80089a6:	e004      	b.n	80089b2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80089a8:	2302      	movs	r3, #2
 80089aa:	73fb      	strb	r3, [r7, #15]
 80089ac:	e001      	b.n	80089b2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80089ae:	2302      	movs	r3, #2
 80089b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 80089d6:	78fa      	ldrb	r2, [r7, #3]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d204      	bcs.n	80089e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	78fa      	ldrb	r2, [r7, #3]
 80089e0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 80089e4:	e001      	b.n	80089ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80089e6:	2302      	movs	r3, #2
 80089e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	4608      	mov	r0, r1
 8008a02:	4611      	mov	r1, r2
 8008a04:	461a      	mov	r2, r3
 8008a06:	4603      	mov	r3, r0
 8008a08:	70fb      	strb	r3, [r7, #3]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	70bb      	strb	r3, [r7, #2]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008a16:	2300      	movs	r3, #0
 8008a18:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f203 3336 	addw	r3, r3, #822	; 0x336
 8008a20:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a22:	e025      	b.n	8008a70 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	221a      	movs	r2, #26
 8008a28:	fb02 f303 	mul.w	r3, r2, r3
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	4413      	add	r3, r2
 8008a32:	3302      	adds	r3, #2
 8008a34:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	795b      	ldrb	r3, [r3, #5]
 8008a3a:	78fa      	ldrb	r2, [r7, #3]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d002      	beq.n	8008a46 <USBH_FindInterface+0x4e>
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	2bff      	cmp	r3, #255	; 0xff
 8008a44:	d111      	bne.n	8008a6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008a4a:	78ba      	ldrb	r2, [r7, #2]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d002      	beq.n	8008a56 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a50:	78bb      	ldrb	r3, [r7, #2]
 8008a52:	2bff      	cmp	r3, #255	; 0xff
 8008a54:	d109      	bne.n	8008a6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a5a:	787a      	ldrb	r2, [r7, #1]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d002      	beq.n	8008a66 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008a60:	787b      	ldrb	r3, [r7, #1]
 8008a62:	2bff      	cmp	r3, #255	; 0xff
 8008a64:	d101      	bne.n	8008a6a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008a66:	7dfb      	ldrb	r3, [r7, #23]
 8008a68:	e006      	b.n	8008a78 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d9d6      	bls.n	8008a24 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008a76:	23ff      	movs	r3, #255	; 0xff
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	371c      	adds	r7, #28
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f005 fd09 	bl	800e4a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008a92:	2101      	movs	r1, #1
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f005 fe20 	bl	800e6da <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b088      	sub	sp, #32
 8008aa8:	af04      	add	r7, sp, #16
 8008aaa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008aac:	2302      	movs	r3, #2
 8008aae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d102      	bne.n	8008ac6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2203      	movs	r2, #3
 8008ac4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b0b      	cmp	r3, #11
 8008ace:	f200 81e4 	bhi.w	8008e9a <USBH_Process+0x3f6>
 8008ad2:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <USBH_Process+0x34>)
 8008ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad8:	08008b09 	.word	0x08008b09
 8008adc:	08008b47 	.word	0x08008b47
 8008ae0:	08008b5b 	.word	0x08008b5b
 8008ae4:	08008e19 	.word	0x08008e19
 8008ae8:	08008e9b 	.word	0x08008e9b
 8008aec:	08008c1b 	.word	0x08008c1b
 8008af0:	08008db3 	.word	0x08008db3
 8008af4:	08008c4b 	.word	0x08008c4b
 8008af8:	08008c87 	.word	0x08008c87
 8008afc:	08008cc1 	.word	0x08008cc1
 8008b00:	08008d09 	.word	0x08008d09
 8008b04:	08008e01 	.word	0x08008e01
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 81c4 	beq.w	8008e9e <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008b1c:	20c8      	movs	r0, #200	; 0xc8
 8008b1e:	f005 fe26 	bl	800e76e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f005 fd19 	bl	800e55a <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f001 fc7e 	bl	800a440 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008b44:	e1ab      	b.n	8008e9e <USBH_Process+0x3fa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	f040 81a8 	bne.w	8008ea2 <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2202      	movs	r2, #2
 8008b56:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008b58:	e1a3      	b.n	8008ea2 <USBH_Process+0x3fe>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d005      	beq.n	8008b70 <USBH_Process+0xcc>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008b6a:	2104      	movs	r1, #4
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008b70:	2064      	movs	r0, #100	; 0x64
 8008b72:	f005 fdfc 	bl	800e76e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f005 fcca 	bl	800e510 <USBH_LL_GetSpeed>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	461a      	mov	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2205      	movs	r2, #5
 8008b8a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f001 fa2b 	bl	8009fea <USBH_AllocPipe>
 8008b94:	4603      	mov	r3, r0
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008b9c:	2180      	movs	r1, #128	; 0x80
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f001 fa23 	bl	8009fea <USBH_AllocPipe>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	7919      	ldrb	r1, [r3, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8008bc0:	b292      	uxth	r2, r2
 8008bc2:	9202      	str	r2, [sp, #8]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	9201      	str	r2, [sp, #4]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2280      	movs	r2, #128	; 0x80
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f001 f9dc 	bl	8009f8c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	7959      	ldrb	r1, [r3, #5]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8008be8:	b292      	uxth	r2, r2
 8008bea:	9202      	str	r2, [sp, #8]
 8008bec:	2200      	movs	r2, #0
 8008bee:	9201      	str	r2, [sp, #4]
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 f9c8 	bl	8009f8c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8008c10:	2300      	movs	r3, #0
 8008c12:	2200      	movs	r2, #0
 8008c14:	f001 fc14 	bl	800a440 <osMessageQueuePut>
#endif
#endif
      break;
 8008c18:	e14c      	b.n	8008eb4 <USBH_Process+0x410>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f950 	bl	8008ec0 <USBH_HandleEnum>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f040 813f 	bne.w	8008ea6 <USBH_Process+0x402>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d103      	bne.n	8008c42 <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2208      	movs	r2, #8
 8008c3e:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 8008c40:	e131      	b.n	8008ea6 <USBH_Process+0x402>
          phost->gState = HOST_INPUT;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2207      	movs	r2, #7
 8008c46:	701a      	strb	r2, [r3, #0]
      break;
 8008c48:	e12d      	b.n	8008ea6 <USBH_Process+0x402>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 812a 	beq.w	8008eaa <USBH_Process+0x406>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2208      	movs	r2, #8
 8008c66:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2205      	movs	r2, #5
 8008c6c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f001 fbde 	bl	800a440 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8008c84:	e111      	b.n	8008eaa <USBH_Process+0x406>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fc1d 	bl	80094d0 <USBH_SetCfg>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <USBH_Process+0x1fe>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2209      	movs	r2, #9
 8008ca0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f001 fbc1 	bl	800a440 <osMessageQueuePut>
#endif
#endif
      break;
 8008cbe:	e0f9      	b.n	8008eb4 <USBH_Process+0x410>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00a      	beq.n	8008ce4 <USBH_Process+0x240>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008cce:	2101      	movs	r1, #1
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fc20 	bl	8009516 <USBH_SetFeature>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d106      	bne.n	8008cea <USBH_Process+0x246>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	220a      	movs	r2, #10
 8008ce0:	701a      	strb	r2, [r3, #0]
 8008ce2:	e002      	b.n	8008cea <USBH_Process+0x246>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	220a      	movs	r2, #10
 8008ce8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8008cfe:	2300      	movs	r3, #0
 8008d00:	2200      	movs	r2, #0
 8008d02:	f001 fb9d 	bl	800a440 <osMessageQueuePut>
#endif
#endif
      break;
 8008d06:	e0d5      	b.n	8008eb4 <USBH_Process+0x410>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d040      	beq.n	8008d94 <USBH_Process+0x2f0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]
 8008d1e:	e017      	b.n	8008d50 <USBH_Process+0x2ac>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	33dc      	adds	r3, #220	; 0xdc
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	791a      	ldrb	r2, [r3, #4]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d108      	bne.n	8008d4a <USBH_Process+0x2a6>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	33dc      	adds	r3, #220	; 0xdc
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	73fb      	strb	r3, [r7, #15]
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0e4      	beq.n	8008d20 <USBH_Process+0x27c>
          }
        }

        if (phost->pActiveClass != NULL)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d016      	beq.n	8008d8e <USBH_Process+0x2ea>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	4798      	blx	r3
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d109      	bne.n	8008d86 <USBH_Process+0x2e2>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2206      	movs	r2, #6
 8008d76:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008d7e:	2103      	movs	r1, #3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	4798      	blx	r3
 8008d84:	e006      	b.n	8008d94 <USBH_Process+0x2f0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	220d      	movs	r2, #13
 8008d8a:	701a      	strb	r2, [r3, #0]
 8008d8c:	e002      	b.n	8008d94 <USBH_Process+0x2f0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	220d      	movs	r2, #13
 8008d92:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2205      	movs	r2, #5
 8008d98:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8008da8:	2300      	movs	r3, #0
 8008daa:	2200      	movs	r2, #0
 8008dac:	f001 fb48 	bl	800a440 <osMessageQueuePut>
#endif
#endif
      break;
 8008db0:	e080      	b.n	8008eb4 <USBH_Process+0x410>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00f      	beq.n	8008ddc <USBH_Process+0x338>
      {
        status = phost->pActiveClass->Requests(phost);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	4798      	blx	r3
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008dcc:	7bbb      	ldrb	r3, [r7, #14]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d16c      	bne.n	8008eae <USBH_Process+0x40a>
        {
          phost->gState = HOST_CLASS;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	220b      	movs	r2, #11
 8008dd8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008dda:	e068      	b.n	8008eae <USBH_Process+0x40a>
        phost->gState = HOST_ABORT_STATE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	220d      	movs	r2, #13
 8008de0:	701a      	strb	r2, [r3, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2205      	movs	r2, #5
 8008de6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8008df6:	2300      	movs	r3, #0
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f001 fb21 	bl	800a440 <osMessageQueuePut>
      break;
 8008dfe:	e056      	b.n	8008eae <USBH_Process+0x40a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d053      	beq.n	8008eb2 <USBH_Process+0x40e>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	4798      	blx	r3
      }
      break;
 8008e16:	e04c      	b.n	8008eb2 <USBH_Process+0x40e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff fd57 	bl	80088d4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d009      	beq.n	8008e44 <USBH_Process+0x3a0>
      {
        phost->pActiveClass->DeInit(phost);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d005      	beq.n	8008e5a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008e54:	2105      	movs	r1, #5
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d107      	bne.n	8008e76 <USBH_Process+0x3d2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7ff fe08 	bl	8008a84 <USBH_Start>
 8008e74:	e002      	b.n	8008e7c <USBH_Process+0x3d8>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f005 fb14 	bl	800e4a4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8008e90:	2300      	movs	r3, #0
 8008e92:	2200      	movs	r2, #0
 8008e94:	f001 fad4 	bl	800a440 <osMessageQueuePut>
#endif
#endif
      break;
 8008e98:	e00c      	b.n	8008eb4 <USBH_Process+0x410>

    case HOST_ABORT_STATE:
    default :
      break;
 8008e9a:	bf00      	nop
 8008e9c:	e00a      	b.n	8008eb4 <USBH_Process+0x410>
      break;
 8008e9e:	bf00      	nop
 8008ea0:	e008      	b.n	8008eb4 <USBH_Process+0x410>
      break;
 8008ea2:	bf00      	nop
 8008ea4:	e006      	b.n	8008eb4 <USBH_Process+0x410>
      break;
 8008ea6:	bf00      	nop
 8008ea8:	e004      	b.n	8008eb4 <USBH_Process+0x410>
    break;
 8008eaa:	bf00      	nop
 8008eac:	e002      	b.n	8008eb4 <USBH_Process+0x410>
      break;
 8008eae:	bf00      	nop
 8008eb0:	e000      	b.n	8008eb4 <USBH_Process+0x410>
      break;
 8008eb2:	bf00      	nop
  }
  return USBH_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop

08008ec0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af04      	add	r7, sp, #16
 8008ec6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	785b      	ldrb	r3, [r3, #1]
 8008ed0:	2b07      	cmp	r3, #7
 8008ed2:	f200 8132 	bhi.w	800913a <USBH_HandleEnum+0x27a>
 8008ed6:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <USBH_HandleEnum+0x1c>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008efd 	.word	0x08008efd
 8008ee0:	08008f6f 	.word	0x08008f6f
 8008ee4:	08008f87 	.word	0x08008f87
 8008ee8:	08008ffd 	.word	0x08008ffd
 8008eec:	08009015 	.word	0x08009015
 8008ef0:	08009033 	.word	0x08009033
 8008ef4:	0800909f 	.word	0x0800909f
 8008ef8:	080090ef 	.word	0x080090ef
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8008efc:	2108      	movs	r1, #8
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fa16 	bl	8009330 <USBH_Get_DevDesc>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f040 8119 	bne.w	800913e <USBH_HandleEnum+0x27e>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	7919      	ldrb	r1, [r3, #4]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8008f30:	b292      	uxth	r2, r2
 8008f32:	9202      	str	r2, [sp, #8]
 8008f34:	2200      	movs	r2, #0
 8008f36:	9201      	str	r2, [sp, #4]
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2280      	movs	r2, #128	; 0x80
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f001 f824 	bl	8009f8c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	7959      	ldrb	r1, [r3, #5]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8008f58:	b292      	uxth	r2, r2
 8008f5a:	9202      	str	r2, [sp, #8]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	9201      	str	r2, [sp, #4]
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	4603      	mov	r3, r0
 8008f64:	2200      	movs	r2, #0
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f001 f810 	bl	8009f8c <USBH_OpenPipe>
      }
      break;
 8008f6c:	e0e7      	b.n	800913e <USBH_HandleEnum+0x27e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 8008f6e:	2112      	movs	r1, #18
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f9dd 	bl	8009330 <USBH_Get_DevDesc>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f040 80e2 	bne.w	8009142 <USBH_HandleEnum+0x282>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2202      	movs	r2, #2
 8008f82:	705a      	strb	r2, [r3, #1]

      }
      break;
 8008f84:	e0dd      	b.n	8009142 <USBH_HandleEnum+0x282>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8008f86:	2101      	movs	r1, #1
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fa7d 	bl	8009488 <USBH_SetAddress>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f040 80d8 	bne.w	8009146 <USBH_HandleEnum+0x286>
      {
        USBH_Delay(2U);
 8008f96:	2002      	movs	r0, #2
 8008f98:	f005 fbe9 	bl	800e76e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2203      	movs	r2, #3
 8008fa8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	7919      	ldrb	r1, [r3, #4]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8008fbe:	b292      	uxth	r2, r2
 8008fc0:	9202      	str	r2, [sp, #8]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	9201      	str	r2, [sp, #4]
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2280      	movs	r2, #128	; 0x80
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 ffdd 	bl	8009f8c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	7959      	ldrb	r1, [r3, #5]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8008fe6:	b292      	uxth	r2, r2
 8008fe8:	9202      	str	r2, [sp, #8]
 8008fea:	2200      	movs	r2, #0
 8008fec:	9201      	str	r2, [sp, #4]
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 ffc9 	bl	8009f8c <USBH_OpenPipe>
      }
      break;
 8008ffa:	e0a4      	b.n	8009146 <USBH_HandleEnum+0x286>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 8008ffc:	2109      	movs	r1, #9
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f9be 	bl	8009380 <USBH_Get_CfgDesc>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	f040 809f 	bne.w	800914a <USBH_HandleEnum+0x28a>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2204      	movs	r2, #4
 8009010:	705a      	strb	r2, [r3, #1]
      }
      break;
 8009012:	e09a      	b.n	800914a <USBH_HandleEnum+0x28a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f9af 	bl	8009380 <USBH_Get_CfgDesc>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	f040 8092 	bne.w	800914e <USBH_HandleEnum+0x28e>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2205      	movs	r2, #5
 800902e:	705a      	strb	r2, [r3, #1]
      }
      break;
 8009030:	e08d      	b.n	800914e <USBH_HandleEnum+0x28e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8009038:	2b00      	cmp	r3, #0
 800903a:	d01e      	beq.n	800907a <USBH_HandleEnum+0x1ba>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8009048:	23ff      	movs	r3, #255	; 0xff
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f9bc 	bl	80093c8 <USBH_Get_StringDesc>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d17d      	bne.n	8009152 <USBH_HandleEnum+0x292>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2206      	movs	r2, #6
 800905a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2205      	movs	r2, #5
 8009060:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009070:	2300      	movs	r3, #0
 8009072:	2200      	movs	r2, #0
 8009074:	f001 f9e4 	bl	800a440 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009078:	e06b      	b.n	8009152 <USBH_HandleEnum+0x292>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2206      	movs	r2, #6
 800907e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2205      	movs	r2, #5
 8009084:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009094:	2300      	movs	r3, #0
 8009096:	2200      	movs	r2, #0
 8009098:	f001 f9d2 	bl	800a440 <osMessageQueuePut>
      break;
 800909c:	e059      	b.n	8009152 <USBH_HandleEnum+0x292>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d010      	beq.n	80090ca <USBH_HandleEnum+0x20a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 80090b4:	23ff      	movs	r3, #255	; 0xff
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f986 	bl	80093c8 <USBH_Get_StringDesc>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d149      	bne.n	8009156 <USBH_HandleEnum+0x296>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2207      	movs	r2, #7
 80090c6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80090c8:	e045      	b.n	8009156 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2207      	movs	r2, #7
 80090ce:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2205      	movs	r2, #5
 80090d4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 80090e4:	2300      	movs	r3, #0
 80090e6:	2200      	movs	r2, #0
 80090e8:	f001 f9aa 	bl	800a440 <osMessageQueuePut>
      break;
 80090ec:	e033      	b.n	8009156 <USBH_HandleEnum+0x296>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00f      	beq.n	8009118 <USBH_HandleEnum+0x258>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8009104:	23ff      	movs	r3, #255	; 0xff
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f95e 	bl	80093c8 <USBH_Get_StringDesc>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d123      	bne.n	800915a <USBH_HandleEnum+0x29a>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009116:	e020      	b.n	800915a <USBH_HandleEnum+0x29a>
        Status = USBH_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2205      	movs	r2, #5
 8009120:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009130:	2300      	movs	r3, #0
 8009132:	2200      	movs	r2, #0
 8009134:	f001 f984 	bl	800a440 <osMessageQueuePut>
      break;
 8009138:	e00f      	b.n	800915a <USBH_HandleEnum+0x29a>

    default:
      break;
 800913a:	bf00      	nop
 800913c:	e00e      	b.n	800915c <USBH_HandleEnum+0x29c>
      break;
 800913e:	bf00      	nop
 8009140:	e00c      	b.n	800915c <USBH_HandleEnum+0x29c>
      break;
 8009142:	bf00      	nop
 8009144:	e00a      	b.n	800915c <USBH_HandleEnum+0x29c>
      break;
 8009146:	bf00      	nop
 8009148:	e008      	b.n	800915c <USBH_HandleEnum+0x29c>
      break;
 800914a:	bf00      	nop
 800914c:	e006      	b.n	800915c <USBH_HandleEnum+0x29c>
      break;
 800914e:	bf00      	nop
 8009150:	e004      	b.n	800915c <USBH_HandleEnum+0x29c>
      break;
 8009152:	bf00      	nop
 8009154:	e002      	b.n	800915c <USBH_HandleEnum+0x29c>
      break;
 8009156:	bf00      	nop
 8009158:	e000      	b.n	800915c <USBH_HandleEnum+0x29c>
      break;
 800915a:	bf00      	nop
  }
  return Status;
 800915c:	7bfb      	ldrb	r3, [r7, #15]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop

08009168 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800917a:	bf00      	nop
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f804 	bl	80091aa <USBH_HandleSof>
}
 80091a2:	bf00      	nop
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b082      	sub	sp, #8
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b0b      	cmp	r3, #11
 80091ba:	d10a      	bne.n	80091d2 <USBH_HandleSof+0x28>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d005      	beq.n	80091d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	4798      	blx	r3
  }
}
 80091d2:	bf00      	nop
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 80091fe:	2300      	movs	r3, #0
 8009200:	2200      	movs	r2, #0
 8009202:	f001 f91d 	bl	800a440 <osMessageQueuePut>
#endif
#endif

  return;
 8009206:	bf00      	nop
}
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800921e:	bf00      	nop
}
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b082      	sub	sp, #8
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 800925e:	2300      	movs	r3, #0
 8009260:	2200      	movs	r2, #0
 8009262:	f001 f8ed 	bl	800a440 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f005 f922 	bl	800e4da <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	791b      	ldrb	r3, [r3, #4]
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fec4 	bl	800a02a <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	795b      	ldrb	r3, [r3, #5]
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 febe 	bl	800a02a <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 80092c2:	2300      	movs	r3, #0
 80092c4:	2200      	movs	r2, #0
 80092c6:	f001 f8bb 	bl	800a440 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80092e8:	f04f 33ff 	mov.w	r3, #4294967295
 80092ec:	2200      	movs	r2, #0
 80092ee:	f001 f91b 	bl	800a528 <osMessageQueueGet>
 80092f2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1f0      	bne.n	80092dc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7ff fbd2 	bl	8008aa4 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009300:	e7ec      	b.n	80092dc <USBH_Process_OS+0x8>

08009302 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 800931e:	2300      	movs	r3, #0
 8009320:	2200      	movs	r2, #0
 8009322:	f001 f88d 	bl	800a440 <osMessageQueuePut>
#endif

  return USBH_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af02      	add	r7, sp, #8
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009342:	78fb      	ldrb	r3, [r7, #3]
 8009344:	b29b      	uxth	r3, r3
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	4613      	mov	r3, r2
 800934a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800934e:	2100      	movs	r1, #0
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f864 	bl	800941e <USBH_GetDescriptor>
 8009356:	4603      	mov	r3, r0
 8009358:	73fb      	strb	r3, [r7, #15]
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10a      	bne.n	8009376 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800936c:	78fa      	ldrb	r2, [r7, #3]
 800936e:	b292      	uxth	r2, r2
 8009370:	4619      	mov	r1, r3
 8009372:	f000 f918 	bl	80095a6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009376:	7bfb      	ldrb	r3, [r7, #15]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af02      	add	r7, sp, #8
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	331c      	adds	r3, #28
 8009390:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009392:	887b      	ldrh	r3, [r7, #2]
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800939c:	2100      	movs	r1, #0
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f83d 	bl	800941e <USBH_GetDescriptor>
 80093a4:	4603      	mov	r3, r0
 80093a6:	72fb      	strb	r3, [r7, #11]
 80093a8:	7afb      	ldrb	r3, [r7, #11]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d107      	bne.n	80093be <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f203 3336 	addw	r3, r3, #822	; 0x336
 80093b4:	887a      	ldrh	r2, [r7, #2]
 80093b6:	68f9      	ldr	r1, [r7, #12]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 f964 	bl	8009686 <USBH_ParseCfgDesc>
  }

  return status;
 80093be:	7afb      	ldrb	r3, [r7, #11]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b088      	sub	sp, #32
 80093cc:	af02      	add	r7, sp, #8
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	607a      	str	r2, [r7, #4]
 80093d2:	461a      	mov	r2, r3
 80093d4:	460b      	mov	r3, r1
 80093d6:	72fb      	strb	r3, [r7, #11]
 80093d8:	4613      	mov	r3, r2
 80093da:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80093dc:	7afb      	ldrb	r3, [r7, #11]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80093e4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80093ec:	893b      	ldrh	r3, [r7, #8]
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	460b      	mov	r3, r1
 80093f2:	2100      	movs	r1, #0
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f812 	bl	800941e <USBH_GetDescriptor>
 80093fa:	4603      	mov	r3, r0
 80093fc:	75fb      	strb	r3, [r7, #23]
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d107      	bne.n	8009414 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800940a:	893a      	ldrh	r2, [r7, #8]
 800940c:	6879      	ldr	r1, [r7, #4]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 fa37 	bl	8009882 <USBH_ParseStringDesc>
  }

  return status;
 8009414:	7dfb      	ldrb	r3, [r7, #23]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	607b      	str	r3, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	72fb      	strb	r3, [r7, #11]
 800942c:	4613      	mov	r3, r2
 800942e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	789b      	ldrb	r3, [r3, #2]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d11c      	bne.n	8009472 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009438:	7afb      	ldrb	r3, [r7, #11]
 800943a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800943e:	b2da      	uxtb	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2206      	movs	r2, #6
 8009448:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	893a      	ldrh	r2, [r7, #8]
 800944e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009450:	893b      	ldrh	r3, [r7, #8]
 8009452:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800945a:	d104      	bne.n	8009466 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f240 4209 	movw	r2, #1033	; 0x409
 8009462:	829a      	strh	r2, [r3, #20]
 8009464:	e002      	b.n	800946c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8b3a      	ldrh	r2, [r7, #24]
 8009470:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009472:	8b3b      	ldrh	r3, [r7, #24]
 8009474:	461a      	mov	r2, r3
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 fa50 	bl	800991e <USBH_CtlReq>
 800947e:	4603      	mov	r3, r0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	789b      	ldrb	r3, [r3, #2]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d10f      	bne.n	80094bc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2205      	movs	r2, #5
 80094a6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80094a8:	78fb      	ldrb	r3, [r7, #3]
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80094bc:	2200      	movs	r2, #0
 80094be:	2100      	movs	r1, #0
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fa2c 	bl	800991e <USBH_CtlReq>
 80094c6:	4603      	mov	r3, r0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3708      	adds	r7, #8
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	789b      	ldrb	r3, [r3, #2]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d10e      	bne.n	8009502 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2209      	movs	r2, #9
 80094ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	887a      	ldrh	r2, [r7, #2]
 80094f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009502:	2200      	movs	r2, #0
 8009504:	2100      	movs	r1, #0
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa09 	bl	800991e <USBH_CtlReq>
 800950c:	4603      	mov	r3, r0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	789b      	ldrb	r3, [r3, #2]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d10f      	bne.n	800954a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2203      	movs	r2, #3
 8009534:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009536:	78fb      	ldrb	r3, [r7, #3]
 8009538:	b29a      	uxth	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800954a:	2200      	movs	r2, #0
 800954c:	2100      	movs	r1, #0
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f9e5 	bl	800991e <USBH_CtlReq>
 8009554:	4603      	mov	r3, r0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	460b      	mov	r3, r1
 8009568:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	789b      	ldrb	r3, [r3, #2]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d10f      	bne.n	8009592 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2202      	movs	r2, #2
 8009576:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009584:	78fb      	ldrb	r3, [r7, #3]
 8009586:	b29a      	uxth	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009592:	2200      	movs	r2, #0
 8009594:	2100      	movs	r1, #0
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f9c1 	bl	800991e <USBH_CtlReq>
 800959c:	4603      	mov	r3, r0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b085      	sub	sp, #20
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	60f8      	str	r0, [r7, #12]
 80095ae:	60b9      	str	r1, [r7, #8]
 80095b0:	4613      	mov	r3, r2
 80095b2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	781a      	ldrb	r2, [r3, #0]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	785a      	ldrb	r2, [r3, #1]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	3302      	adds	r3, #2
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	3303      	adds	r3, #3
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	021b      	lsls	r3, r3, #8
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	4313      	orrs	r3, r2
 80095da:	b29a      	uxth	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	791a      	ldrb	r2, [r3, #4]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	795a      	ldrb	r2, [r3, #5]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	799a      	ldrb	r2, [r3, #6]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	79da      	ldrb	r2, [r3, #7]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009600:	88fb      	ldrh	r3, [r7, #6]
 8009602:	2b08      	cmp	r3, #8
 8009604:	d939      	bls.n	800967a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	3308      	adds	r3, #8
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	b29a      	uxth	r2, r3
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	3309      	adds	r3, #9
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	b29b      	uxth	r3, r3
 8009616:	021b      	lsls	r3, r3, #8
 8009618:	b29b      	uxth	r3, r3
 800961a:	4313      	orrs	r3, r2
 800961c:	b29a      	uxth	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	330a      	adds	r3, #10
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	b29a      	uxth	r2, r3
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	330b      	adds	r3, #11
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	b29b      	uxth	r3, r3
 8009632:	021b      	lsls	r3, r3, #8
 8009634:	b29b      	uxth	r3, r3
 8009636:	4313      	orrs	r3, r2
 8009638:	b29a      	uxth	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	330c      	adds	r3, #12
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	b29a      	uxth	r2, r3
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	330d      	adds	r3, #13
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	b29b      	uxth	r3, r3
 800964e:	021b      	lsls	r3, r3, #8
 8009650:	b29b      	uxth	r3, r3
 8009652:	4313      	orrs	r3, r2
 8009654:	b29a      	uxth	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	7b9a      	ldrb	r2, [r3, #14]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	7bda      	ldrb	r2, [r3, #15]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	7c1a      	ldrb	r2, [r3, #16]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	7c5a      	ldrb	r2, [r3, #17]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	745a      	strb	r2, [r3, #17]
  }
}
 800967a:	bf00      	nop
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b08a      	sub	sp, #40	; 0x28
 800968a:	af00      	add	r7, sp, #0
 800968c:	60f8      	str	r0, [r7, #12]
 800968e:	60b9      	str	r1, [r7, #8]
 8009690:	4613      	mov	r3, r2
 8009692:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009698:	2300      	movs	r3, #0
 800969a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	781a      	ldrb	r2, [r3, #0]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	785a      	ldrb	r2, [r3, #1]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	3302      	adds	r3, #2
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	b29a      	uxth	r2, r3
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	3303      	adds	r3, #3
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	021b      	lsls	r3, r3, #8
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	4313      	orrs	r3, r2
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	791a      	ldrb	r2, [r3, #4]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	795a      	ldrb	r2, [r3, #5]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	799a      	ldrb	r2, [r3, #6]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	79da      	ldrb	r2, [r3, #7]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	7a1a      	ldrb	r2, [r3, #8]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80096fc:	88fb      	ldrh	r3, [r7, #6]
 80096fe:	2b09      	cmp	r3, #9
 8009700:	d95f      	bls.n	80097c2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009702:	2309      	movs	r3, #9
 8009704:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009706:	2300      	movs	r3, #0
 8009708:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800970a:	e051      	b.n	80097b0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800970c:	f107 0316 	add.w	r3, r7, #22
 8009710:	4619      	mov	r1, r3
 8009712:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009714:	f000 f8e8 	bl	80098e8 <USBH_GetNextDesc>
 8009718:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	785b      	ldrb	r3, [r3, #1]
 800971e:	2b04      	cmp	r3, #4
 8009720:	d146      	bne.n	80097b0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009722:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009726:	221a      	movs	r2, #26
 8009728:	fb02 f303 	mul.w	r3, r2, r3
 800972c:	3308      	adds	r3, #8
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	4413      	add	r3, r2
 8009732:	3302      	adds	r3, #2
 8009734:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009738:	69f8      	ldr	r0, [r7, #28]
 800973a:	f000 f846 	bl	80097ca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800973e:	2300      	movs	r3, #0
 8009740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009744:	2300      	movs	r3, #0
 8009746:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009748:	e022      	b.n	8009790 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800974a:	f107 0316 	add.w	r3, r7, #22
 800974e:	4619      	mov	r1, r3
 8009750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009752:	f000 f8c9 	bl	80098e8 <USBH_GetNextDesc>
 8009756:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	785b      	ldrb	r3, [r3, #1]
 800975c:	2b05      	cmp	r3, #5
 800975e:	d117      	bne.n	8009790 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009764:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009768:	3201      	adds	r2, #1
 800976a:	00d2      	lsls	r2, r2, #3
 800976c:	211a      	movs	r1, #26
 800976e:	fb01 f303 	mul.w	r3, r1, r3
 8009772:	4413      	add	r3, r2
 8009774:	3308      	adds	r3, #8
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	4413      	add	r3, r2
 800977a:	3304      	adds	r3, #4
 800977c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800977e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009780:	69b8      	ldr	r0, [r7, #24]
 8009782:	f000 f851 	bl	8009828 <USBH_ParseEPDesc>
            ep_ix++;
 8009786:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800978a:	3301      	adds	r3, #1
 800978c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	791b      	ldrb	r3, [r3, #4]
 8009794:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009798:	429a      	cmp	r2, r3
 800979a:	d204      	bcs.n	80097a6 <USBH_ParseCfgDesc+0x120>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	885a      	ldrh	r2, [r3, #2]
 80097a0:	8afb      	ldrh	r3, [r7, #22]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d8d1      	bhi.n	800974a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80097a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097aa:	3301      	adds	r3, #1
 80097ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80097b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d804      	bhi.n	80097c2 <USBH_ParseCfgDesc+0x13c>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	885a      	ldrh	r2, [r3, #2]
 80097bc:	8afb      	ldrh	r3, [r7, #22]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d8a4      	bhi.n	800970c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80097c2:	bf00      	nop
 80097c4:	3728      	adds	r7, #40	; 0x28
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80097ca:	b480      	push	{r7}
 80097cc:	b083      	sub	sp, #12
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781a      	ldrb	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	785a      	ldrb	r2, [r3, #1]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	789a      	ldrb	r2, [r3, #2]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	78da      	ldrb	r2, [r3, #3]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	791a      	ldrb	r2, [r3, #4]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	795a      	ldrb	r2, [r3, #5]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	799a      	ldrb	r2, [r3, #6]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	79da      	ldrb	r2, [r3, #7]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	7a1a      	ldrb	r2, [r3, #8]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	721a      	strb	r2, [r3, #8]
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	781a      	ldrb	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	785a      	ldrb	r2, [r3, #1]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	789a      	ldrb	r2, [r3, #2]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	78da      	ldrb	r2, [r3, #3]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	3304      	adds	r3, #4
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	b29a      	uxth	r2, r3
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	3305      	adds	r3, #5
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	b29b      	uxth	r3, r3
 8009862:	021b      	lsls	r3, r3, #8
 8009864:	b29b      	uxth	r3, r3
 8009866:	4313      	orrs	r3, r2
 8009868:	b29a      	uxth	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	799a      	ldrb	r2, [r3, #6]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	719a      	strb	r2, [r3, #6]
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009882:	b480      	push	{r7}
 8009884:	b087      	sub	sp, #28
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	4613      	mov	r3, r2
 800988e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	3301      	adds	r3, #1
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	2b03      	cmp	r3, #3
 8009898:	d120      	bne.n	80098dc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	1e9a      	subs	r2, r3, #2
 80098a0:	88fb      	ldrh	r3, [r7, #6]
 80098a2:	4293      	cmp	r3, r2
 80098a4:	bf28      	it	cs
 80098a6:	4613      	movcs	r3, r2
 80098a8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3302      	adds	r3, #2
 80098ae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80098b0:	2300      	movs	r3, #0
 80098b2:	82fb      	strh	r3, [r7, #22]
 80098b4:	e00b      	b.n	80098ce <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80098b6:	8afb      	ldrh	r3, [r7, #22]
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	4413      	add	r3, r2
 80098bc:	781a      	ldrb	r2, [r3, #0]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	3301      	adds	r3, #1
 80098c6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80098c8:	8afb      	ldrh	r3, [r7, #22]
 80098ca:	3302      	adds	r3, #2
 80098cc:	82fb      	strh	r3, [r7, #22]
 80098ce:	8afa      	ldrh	r2, [r7, #22]
 80098d0:	8abb      	ldrh	r3, [r7, #20]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d3ef      	bcc.n	80098b6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	2200      	movs	r2, #0
 80098da:	701a      	strb	r2, [r3, #0]
  }
}
 80098dc:	bf00      	nop
 80098de:	371c      	adds	r7, #28
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	881a      	ldrh	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	4413      	add	r3, r2
 80098fe:	b29a      	uxth	r2, r3
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4413      	add	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009910:	68fb      	ldr	r3, [r7, #12]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b086      	sub	sp, #24
 8009922:	af00      	add	r7, sp, #0
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	60b9      	str	r1, [r7, #8]
 8009928:	4613      	mov	r3, r2
 800992a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800992c:	2301      	movs	r3, #1
 800992e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	789b      	ldrb	r3, [r3, #2]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d002      	beq.n	800993e <USBH_CtlReq+0x20>
 8009938:	2b02      	cmp	r3, #2
 800993a:	d01d      	beq.n	8009978 <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 800993c:	e042      	b.n	80099c4 <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	88fa      	ldrh	r2, [r7, #6]
 8009948:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2201      	movs	r2, #1
 800994e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2202      	movs	r2, #2
 8009954:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009956:	2301      	movs	r3, #1
 8009958:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2203      	movs	r2, #3
 800995e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 800996e:	2300      	movs	r3, #0
 8009970:	2200      	movs	r2, #0
 8009972:	f000 fd65 	bl	800a440 <osMessageQueuePut>
      break;
 8009976:	e025      	b.n	80099c4 <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 f829 	bl	80099d0 <USBH_HandleControl>
 800997e:	4603      	mov	r3, r0
 8009980:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009982:	7dfb      	ldrb	r3, [r7, #23]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d108      	bne.n	800999a <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2201      	movs	r2, #1
 800998c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	75fb      	strb	r3, [r7, #23]
      break;
 8009998:	e013      	b.n	80099c2 <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 800999a:	7dfb      	ldrb	r3, [r7, #23]
 800999c:	2b03      	cmp	r3, #3
 800999e:	d108      	bne.n	80099b2 <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2201      	movs	r2, #1
 80099a4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80099ac:	2303      	movs	r3, #3
 80099ae:	75fb      	strb	r3, [r7, #23]
      break;
 80099b0:	e007      	b.n	80099c2 <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d104      	bne.n	80099c2 <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2201      	movs	r2, #1
 80099bc:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 80099be:	2302      	movs	r3, #2
 80099c0:	75fb      	strb	r3, [r7, #23]
      break;
 80099c2:	bf00      	nop
  }
  return status;
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3718      	adds	r7, #24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
	...

080099d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af02      	add	r7, sp, #8
 80099d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80099d8:	2301      	movs	r3, #1
 80099da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099dc:	2300      	movs	r3, #0
 80099de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	7e1b      	ldrb	r3, [r3, #24]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	2b0a      	cmp	r3, #10
 80099e8:	f200 821f 	bhi.w	8009e2a <USBH_HandleControl+0x45a>
 80099ec:	a201      	add	r2, pc, #4	; (adr r2, 80099f4 <USBH_HandleControl+0x24>)
 80099ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f2:	bf00      	nop
 80099f4:	08009a21 	.word	0x08009a21
 80099f8:	08009a3b 	.word	0x08009a3b
 80099fc:	08009add 	.word	0x08009add
 8009a00:	08009b03 	.word	0x08009b03
 8009a04:	08009b8f 	.word	0x08009b8f
 8009a08:	08009bbb 	.word	0x08009bbb
 8009a0c:	08009c7d 	.word	0x08009c7d
 8009a10:	08009c9f 	.word	0x08009c9f
 8009a14:	08009d31 	.word	0x08009d31
 8009a18:	08009d59 	.word	0x08009d59
 8009a1c:	08009deb 	.word	0x08009deb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f103 0110 	add.w	r1, r3, #16
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	795b      	ldrb	r3, [r3, #5]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fa0d 	bl	8009e4c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2202      	movs	r2, #2
 8009a36:	761a      	strb	r2, [r3, #24]
      break;
 8009a38:	e202      	b.n	8009e40 <USBH_HandleControl+0x470>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	795b      	ldrb	r3, [r3, #5]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f004 fe37 	bl	800e6b4 <USBH_LL_GetURBState>
 8009a46:	4603      	mov	r3, r0
 8009a48:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009a4a:	7bbb      	ldrb	r3, [r7, #14]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d12c      	bne.n	8009aaa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	7c1b      	ldrb	r3, [r3, #16]
 8009a54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a58:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	8adb      	ldrh	r3, [r3, #22]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00a      	beq.n	8009a78 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009a62:	7b7b      	ldrb	r3, [r7, #13]
 8009a64:	2b80      	cmp	r3, #128	; 0x80
 8009a66:	d103      	bne.n	8009a70 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2203      	movs	r2, #3
 8009a6c:	761a      	strb	r2, [r3, #24]
 8009a6e:	e00d      	b.n	8009a8c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2205      	movs	r2, #5
 8009a74:	761a      	strb	r2, [r3, #24]
 8009a76:	e009      	b.n	8009a8c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009a78:	7b7b      	ldrb	r3, [r7, #13]
 8009a7a:	2b80      	cmp	r3, #128	; 0x80
 8009a7c:	d103      	bne.n	8009a86 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2209      	movs	r2, #9
 8009a82:	761a      	strb	r2, [r3, #24]
 8009a84:	e002      	b.n	8009a8c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2207      	movs	r2, #7
 8009a8a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2203      	movs	r2, #3
 8009a90:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f000 fccc 	bl	800a440 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009aa8:	e1c1      	b.n	8009e2e <USBH_HandleControl+0x45e>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	d003      	beq.n	8009ab8 <USBH_HandleControl+0xe8>
 8009ab0:	7bbb      	ldrb	r3, [r7, #14]
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	f040 81bb 	bne.w	8009e2e <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	220b      	movs	r2, #11
 8009abc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f000 fcb3 	bl	800a440 <osMessageQueuePut>
      break;
 8009ada:	e1a8      	b.n	8009e2e <USBH_HandleControl+0x45e>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6899      	ldr	r1, [r3, #8]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	899a      	ldrh	r2, [r3, #12]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	791b      	ldrb	r3, [r3, #4]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f9e8 	bl	8009eca <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2204      	movs	r2, #4
 8009afe:	761a      	strb	r2, [r3, #24]
      break;
 8009b00:	e19e      	b.n	8009e40 <USBH_HandleControl+0x470>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	791b      	ldrb	r3, [r3, #4]
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f004 fdd3 	bl	800e6b4 <USBH_LL_GetURBState>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d110      	bne.n	8009b3a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2209      	movs	r2, #9
 8009b1c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2203      	movs	r2, #3
 8009b22:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009b32:	2300      	movs	r3, #0
 8009b34:	2200      	movs	r2, #0
 8009b36:	f000 fc83 	bl	800a440 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
 8009b3c:	2b05      	cmp	r3, #5
 8009b3e:	d110      	bne.n	8009b62 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009b40:	2303      	movs	r3, #3
 8009b42:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2203      	movs	r2, #3
 8009b48:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009b58:	2300      	movs	r3, #0
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f000 fc70 	bl	800a440 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b60:	e167      	b.n	8009e32 <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	2b04      	cmp	r3, #4
 8009b66:	f040 8164 	bne.w	8009e32 <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	220b      	movs	r2, #11
 8009b6e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2203      	movs	r2, #3
 8009b74:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009b84:	2300      	movs	r3, #0
 8009b86:	2200      	movs	r2, #0
 8009b88:	f000 fc5a 	bl	800a440 <osMessageQueuePut>
      break;
 8009b8c:	e151      	b.n	8009e32 <USBH_HandleControl+0x462>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6899      	ldr	r1, [r3, #8]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	899a      	ldrh	r2, [r3, #12]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	7958      	ldrb	r0, [r3, #5]
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f96d 	bl	8009e80 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2206      	movs	r2, #6
 8009bb6:	761a      	strb	r2, [r3, #24]
      break;
 8009bb8:	e142      	b.n	8009e40 <USBH_HandleControl+0x470>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	795b      	ldrb	r3, [r3, #5]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f004 fd77 	bl	800e6b4 <USBH_LL_GetURBState>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009bca:	7bbb      	ldrb	r3, [r7, #14]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d111      	bne.n	8009bf4 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2207      	movs	r2, #7
 8009bd4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2203      	movs	r2, #3
 8009bda:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009bea:	2300      	movs	r3, #0
 8009bec:	2200      	movs	r2, #0
 8009bee:	f000 fc27 	bl	800a440 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009bf2:	e120      	b.n	8009e36 <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_STALL)
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
 8009bf6:	2b05      	cmp	r3, #5
 8009bf8:	d113      	bne.n	8009c22 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	220c      	movs	r2, #12
 8009bfe:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009c00:	2303      	movs	r3, #3
 8009c02:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2203      	movs	r2, #3
 8009c08:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009c18:	2300      	movs	r3, #0
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f000 fc10 	bl	800a440 <osMessageQueuePut>
      break;
 8009c20:	e109      	b.n	8009e36 <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c22:	7bbb      	ldrb	r3, [r7, #14]
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d111      	bne.n	8009c4c <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2205      	movs	r2, #5
 8009c2c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2203      	movs	r2, #3
 8009c32:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009c42:	2300      	movs	r3, #0
 8009c44:	2200      	movs	r2, #0
 8009c46:	f000 fbfb 	bl	800a440 <osMessageQueuePut>
      break;
 8009c4a:	e0f4      	b.n	8009e36 <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_ERROR)
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	2b04      	cmp	r3, #4
 8009c50:	f040 80f1 	bne.w	8009e36 <USBH_HandleControl+0x466>
          phost->Control.state = CTRL_ERROR;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	220b      	movs	r2, #11
 8009c58:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2203      	movs	r2, #3
 8009c62:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009c72:	2300      	movs	r3, #0
 8009c74:	2200      	movs	r2, #0
 8009c76:	f000 fbe3 	bl	800a440 <osMessageQueuePut>
      break;
 8009c7a:	e0dc      	b.n	8009e36 <USBH_HandleControl+0x466>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	791b      	ldrb	r3, [r3, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	2100      	movs	r1, #0
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f920 	bl	8009eca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2208      	movs	r2, #8
 8009c9a:	761a      	strb	r2, [r3, #24]

      break;
 8009c9c:	e0d0      	b.n	8009e40 <USBH_HandleControl+0x470>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	791b      	ldrb	r3, [r3, #4]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f004 fd05 	bl	800e6b4 <USBH_LL_GetURBState>
 8009caa:	4603      	mov	r3, r0
 8009cac:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d113      	bne.n	8009cdc <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	220d      	movs	r2, #13
 8009cb8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2203      	movs	r2, #3
 8009cc2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f000 fbb3 	bl	800a440 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009cda:	e0ae      	b.n	8009e3a <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_ERROR)
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	2b04      	cmp	r3, #4
 8009ce0:	d111      	bne.n	8009d06 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	220b      	movs	r2, #11
 8009ce6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2203      	movs	r2, #3
 8009cec:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f000 fb9e 	bl	800a440 <osMessageQueuePut>
      break;
 8009d04:	e099      	b.n	8009e3a <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_STALL)
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	2b05      	cmp	r3, #5
 8009d0a:	f040 8096 	bne.w	8009e3a <USBH_HandleControl+0x46a>
          status = USBH_NOT_SUPPORTED;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2203      	movs	r2, #3
 8009d16:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009d26:	2300      	movs	r3, #0
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f000 fb89 	bl	800a440 <osMessageQueuePut>
      break;
 8009d2e:	e084      	b.n	8009e3a <USBH_HandleControl+0x46a>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	795a      	ldrb	r2, [r3, #5]
 8009d34:	2301      	movs	r3, #1
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f89e 	bl	8009e80 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	220a      	movs	r2, #10
 8009d54:	761a      	strb	r2, [r3, #24]
      break;
 8009d56:	e073      	b.n	8009e40 <USBH_HandleControl+0x470>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	795b      	ldrb	r3, [r3, #5]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f004 fca8 	bl	800e6b4 <USBH_LL_GetURBState>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009d68:	7bbb      	ldrb	r3, [r7, #14]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d113      	bne.n	8009d96 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	220d      	movs	r2, #13
 8009d76:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2203      	movs	r2, #3
 8009d7c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f000 fb56 	bl	800a440 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009d94:	e053      	b.n	8009e3e <USBH_HandleControl+0x46e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d111      	bne.n	8009dc0 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2209      	movs	r2, #9
 8009da0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2203      	movs	r2, #3
 8009da6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009db6:	2300      	movs	r3, #0
 8009db8:	2200      	movs	r2, #0
 8009dba:	f000 fb41 	bl	800a440 <osMessageQueuePut>
      break;
 8009dbe:	e03e      	b.n	8009e3e <USBH_HandleControl+0x46e>
        if (URB_Status == USBH_URB_ERROR)
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
 8009dc2:	2b04      	cmp	r3, #4
 8009dc4:	d13b      	bne.n	8009e3e <USBH_HandleControl+0x46e>
          phost->Control.state = CTRL_ERROR;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	220b      	movs	r2, #11
 8009dca:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2203      	movs	r2, #3
 8009dd0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8009de0:	2300      	movs	r3, #0
 8009de2:	2200      	movs	r2, #0
 8009de4:	f000 fb2c 	bl	800a440 <osMessageQueuePut>
      break;
 8009de8:	e029      	b.n	8009e3e <USBH_HandleControl+0x46e>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	7e5b      	ldrb	r3, [r3, #25]
 8009dee:	3301      	adds	r3, #1
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	765a      	strb	r2, [r3, #25]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	7e5b      	ldrb	r3, [r3, #25]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d806      	bhi.n	8009e0c <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009e0a:	e019      	b.n	8009e40 <USBH_HandleControl+0x470>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009e12:	2106      	movs	r1, #6
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009e24:	2302      	movs	r3, #2
 8009e26:	73fb      	strb	r3, [r7, #15]
      break;
 8009e28:	e00a      	b.n	8009e40 <USBH_HandleControl+0x470>

    default:
      break;
 8009e2a:	bf00      	nop
 8009e2c:	e008      	b.n	8009e40 <USBH_HandleControl+0x470>
      break;
 8009e2e:	bf00      	nop
 8009e30:	e006      	b.n	8009e40 <USBH_HandleControl+0x470>
      break;
 8009e32:	bf00      	nop
 8009e34:	e004      	b.n	8009e40 <USBH_HandleControl+0x470>
      break;
 8009e36:	bf00      	nop
 8009e38:	e002      	b.n	8009e40 <USBH_HandleControl+0x470>
      break;
 8009e3a:	bf00      	nop
 8009e3c:	e000      	b.n	8009e40 <USBH_HandleControl+0x470>
      break;
 8009e3e:	bf00      	nop
  }

  return status;
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop

08009e4c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af04      	add	r7, sp, #16
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	4613      	mov	r3, r2
 8009e58:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009e5a:	79f9      	ldrb	r1, [r7, #7]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	9303      	str	r3, [sp, #12]
 8009e60:	2308      	movs	r3, #8
 8009e62:	9302      	str	r3, [sp, #8]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	9301      	str	r3, [sp, #4]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	2200      	movs	r2, #0
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f004 fbee 	bl	800e652 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af04      	add	r7, sp, #16
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	460b      	mov	r3, r1
 8009e90:	80fb      	strh	r3, [r7, #6]
 8009e92:	4613      	mov	r3, r2
 8009e94:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009ea4:	7979      	ldrb	r1, [r7, #5]
 8009ea6:	7e3b      	ldrb	r3, [r7, #24]
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	88fb      	ldrh	r3, [r7, #6]
 8009eac:	9302      	str	r3, [sp, #8]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	2200      	movs	r2, #0
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f004 fbc9 	bl	800e652 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b088      	sub	sp, #32
 8009ece:	af04      	add	r7, sp, #16
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	460b      	mov	r3, r1
 8009eda:	80fb      	strh	r3, [r7, #6]
 8009edc:	4613      	mov	r3, r2
 8009ede:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009ee0:	7979      	ldrb	r1, [r7, #5]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	9303      	str	r3, [sp, #12]
 8009ee6:	88fb      	ldrh	r3, [r7, #6]
 8009ee8:	9302      	str	r3, [sp, #8]
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	9301      	str	r3, [sp, #4]
 8009eee:	2301      	movs	r3, #1
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f004 fbab 	bl	800e652 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009efc:	2300      	movs	r3, #0

}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b088      	sub	sp, #32
 8009f0a:	af04      	add	r7, sp, #16
 8009f0c:	60f8      	str	r0, [r7, #12]
 8009f0e:	60b9      	str	r1, [r7, #8]
 8009f10:	4611      	mov	r1, r2
 8009f12:	461a      	mov	r2, r3
 8009f14:	460b      	mov	r3, r1
 8009f16:	80fb      	strh	r3, [r7, #6]
 8009f18:	4613      	mov	r3, r2
 8009f1a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009f2a:	7979      	ldrb	r1, [r7, #5]
 8009f2c:	7e3b      	ldrb	r3, [r7, #24]
 8009f2e:	9303      	str	r3, [sp, #12]
 8009f30:	88fb      	ldrh	r3, [r7, #6]
 8009f32:	9302      	str	r3, [sp, #8]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	9301      	str	r3, [sp, #4]
 8009f38:	2301      	movs	r3, #1
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	2200      	movs	r2, #0
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f004 fb86 	bl	800e652 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af04      	add	r7, sp, #16
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	460b      	mov	r3, r1
 8009f60:	80fb      	strh	r3, [r7, #6]
 8009f62:	4613      	mov	r3, r2
 8009f64:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009f66:	7979      	ldrb	r1, [r7, #5]
 8009f68:	2300      	movs	r3, #0
 8009f6a:	9303      	str	r3, [sp, #12]
 8009f6c:	88fb      	ldrh	r3, [r7, #6]
 8009f6e:	9302      	str	r3, [sp, #8]
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	2301      	movs	r3, #1
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	2302      	movs	r3, #2
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f004 fb68 	bl	800e652 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af04      	add	r7, sp, #16
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	4608      	mov	r0, r1
 8009f96:	4611      	mov	r1, r2
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	70fb      	strb	r3, [r7, #3]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	70bb      	strb	r3, [r7, #2]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009fa6:	7878      	ldrb	r0, [r7, #1]
 8009fa8:	78ba      	ldrb	r2, [r7, #2]
 8009faa:	78f9      	ldrb	r1, [r7, #3]
 8009fac:	8b3b      	ldrh	r3, [r7, #24]
 8009fae:	9302      	str	r3, [sp, #8]
 8009fb0:	7d3b      	ldrb	r3, [r7, #20]
 8009fb2:	9301      	str	r3, [sp, #4]
 8009fb4:	7c3b      	ldrb	r3, [r7, #16]
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	4603      	mov	r3, r0
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f004 fafb 	bl	800e5b6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b082      	sub	sp, #8
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009fd6:	78fb      	ldrb	r3, [r7, #3]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f004 fb1a 	bl	800e614 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f833 	bl	800a062 <USBH_GetFreePipe>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a000:	89fb      	ldrh	r3, [r7, #14]
 800a002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a006:	4293      	cmp	r3, r2
 800a008:	d009      	beq.n	800a01e <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a00a:	78fb      	ldrb	r3, [r7, #3]
 800a00c:	89fa      	ldrh	r2, [r7, #14]
 800a00e:	f002 020f 	and.w	r2, r2, #15
 800a012:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	32e0      	adds	r2, #224	; 0xe0
 800a01a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800a01e:	89fb      	ldrh	r3, [r7, #14]
 800a020:	b2db      	uxtb	r3, r3
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	460b      	mov	r3, r1
 800a034:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a036:	78fb      	ldrb	r3, [r7, #3]
 800a038:	2b0a      	cmp	r3, #10
 800a03a:	d80b      	bhi.n	800a054 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a03c:	78fa      	ldrb	r2, [r7, #3]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	32e0      	adds	r2, #224	; 0xe0
 800a042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a046:	78fa      	ldrb	r2, [r7, #3]
 800a048:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	32e0      	adds	r2, #224	; 0xe0
 800a050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a062:	b480      	push	{r7}
 800a064:	b085      	sub	sp, #20
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a06e:	2300      	movs	r3, #0
 800a070:	73fb      	strb	r3, [r7, #15]
 800a072:	e00e      	b.n	800a092 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a074:	7bfa      	ldrb	r2, [r7, #15]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	32e0      	adds	r2, #224	; 0xe0
 800a07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d102      	bne.n	800a08c <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800a086:	7bfb      	ldrb	r3, [r7, #15]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	e007      	b.n	800a09c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	3301      	adds	r3, #1
 800a090:	73fb      	strb	r3, [r7, #15]
 800a092:	7bfb      	ldrb	r3, [r7, #15]
 800a094:	2b0a      	cmp	r3, #10
 800a096:	d9ed      	bls.n	800a074 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a098:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a0a8:	b480      	push	{r7}
 800a0aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a0ac:	bf00      	nop
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
	...

0800a0b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0be:	f3ef 8305 	mrs	r3, IPSR
 800a0c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10f      	bne.n	800a0ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ce:	607b      	str	r3, [r7, #4]
  return(result);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d105      	bne.n	800a0e2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0d6:	f3ef 8311 	mrs	r3, BASEPRI
 800a0da:	603b      	str	r3, [r7, #0]
  return(result);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d007      	beq.n	800a0f2 <osKernelInitialize+0x3a>
 800a0e2:	4b0e      	ldr	r3, [pc, #56]	; (800a11c <osKernelInitialize+0x64>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d103      	bne.n	800a0f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a0ea:	f06f 0305 	mvn.w	r3, #5
 800a0ee:	60fb      	str	r3, [r7, #12]
 800a0f0:	e00c      	b.n	800a10c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a0f2:	4b0a      	ldr	r3, [pc, #40]	; (800a11c <osKernelInitialize+0x64>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d105      	bne.n	800a106 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a0fa:	4b08      	ldr	r3, [pc, #32]	; (800a11c <osKernelInitialize+0x64>)
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a100:	2300      	movs	r3, #0
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	e002      	b.n	800a10c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a106:	f04f 33ff 	mov.w	r3, #4294967295
 800a10a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a10c:	68fb      	ldr	r3, [r7, #12]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	200000b4 	.word	0x200000b4

0800a120 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a126:	f3ef 8305 	mrs	r3, IPSR
 800a12a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a12c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10f      	bne.n	800a152 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a132:	f3ef 8310 	mrs	r3, PRIMASK
 800a136:	607b      	str	r3, [r7, #4]
  return(result);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d105      	bne.n	800a14a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a13e:	f3ef 8311 	mrs	r3, BASEPRI
 800a142:	603b      	str	r3, [r7, #0]
  return(result);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d007      	beq.n	800a15a <osKernelStart+0x3a>
 800a14a:	4b0f      	ldr	r3, [pc, #60]	; (800a188 <osKernelStart+0x68>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d103      	bne.n	800a15a <osKernelStart+0x3a>
    stat = osErrorISR;
 800a152:	f06f 0305 	mvn.w	r3, #5
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	e010      	b.n	800a17c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a15a:	4b0b      	ldr	r3, [pc, #44]	; (800a188 <osKernelStart+0x68>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d109      	bne.n	800a176 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a162:	f7ff ffa1 	bl	800a0a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a166:	4b08      	ldr	r3, [pc, #32]	; (800a188 <osKernelStart+0x68>)
 800a168:	2202      	movs	r2, #2
 800a16a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a16c:	f001 fa9a 	bl	800b6a4 <vTaskStartScheduler>
      stat = osOK;
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	e002      	b.n	800a17c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a176:	f04f 33ff 	mov.w	r3, #4294967295
 800a17a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a17c:	68fb      	ldr	r3, [r7, #12]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	200000b4 	.word	0x200000b4

0800a18c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b090      	sub	sp, #64	; 0x40
 800a190:	af04      	add	r7, sp, #16
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a198:	2300      	movs	r3, #0
 800a19a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a19c:	f3ef 8305 	mrs	r3, IPSR
 800a1a0:	61fb      	str	r3, [r7, #28]
  return(result);
 800a1a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f040 808f 	bne.w	800a2c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ae:	61bb      	str	r3, [r7, #24]
  return(result);
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d105      	bne.n	800a1c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a1b6:	f3ef 8311 	mrs	r3, BASEPRI
 800a1ba:	617b      	str	r3, [r7, #20]
  return(result);
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d003      	beq.n	800a1ca <osThreadNew+0x3e>
 800a1c2:	4b44      	ldr	r3, [pc, #272]	; (800a2d4 <osThreadNew+0x148>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	d07e      	beq.n	800a2c8 <osThreadNew+0x13c>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d07b      	beq.n	800a2c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a1d0:	2380      	movs	r3, #128	; 0x80
 800a1d2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a1d4:	2318      	movs	r3, #24
 800a1d6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d045      	beq.n	800a274 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <osThreadNew+0x6a>
        name = attr->name;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	2b00      	cmp	r3, #0
 800a208:	d008      	beq.n	800a21c <osThreadNew+0x90>
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	2b38      	cmp	r3, #56	; 0x38
 800a20e:	d805      	bhi.n	800a21c <osThreadNew+0x90>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d001      	beq.n	800a220 <osThreadNew+0x94>
        return (NULL);
 800a21c:	2300      	movs	r3, #0
 800a21e:	e054      	b.n	800a2ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d003      	beq.n	800a230 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	089b      	lsrs	r3, r3, #2
 800a22e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00e      	beq.n	800a256 <osThreadNew+0xca>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	2b5b      	cmp	r3, #91	; 0x5b
 800a23e:	d90a      	bls.n	800a256 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a244:	2b00      	cmp	r3, #0
 800a246:	d006      	beq.n	800a256 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	695b      	ldr	r3, [r3, #20]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d002      	beq.n	800a256 <osThreadNew+0xca>
        mem = 1;
 800a250:	2301      	movs	r3, #1
 800a252:	623b      	str	r3, [r7, #32]
 800a254:	e010      	b.n	800a278 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10c      	bne.n	800a278 <osThreadNew+0xec>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d108      	bne.n	800a278 <osThreadNew+0xec>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d104      	bne.n	800a278 <osThreadNew+0xec>
          mem = 0;
 800a26e:	2300      	movs	r3, #0
 800a270:	623b      	str	r3, [r7, #32]
 800a272:	e001      	b.n	800a278 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d110      	bne.n	800a2a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a286:	9202      	str	r2, [sp, #8]
 800a288:	9301      	str	r3, [sp, #4]
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f001 f833 	bl	800b300 <xTaskCreateStatic>
 800a29a:	4603      	mov	r3, r0
 800a29c:	613b      	str	r3, [r7, #16]
 800a29e:	e013      	b.n	800a2c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a2a0:	6a3b      	ldr	r3, [r7, #32]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d110      	bne.n	800a2c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	f107 0310 	add.w	r3, r7, #16
 800a2ae:	9301      	str	r3, [sp, #4]
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f001 f87b 	bl	800b3b4 <xTaskCreate>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d001      	beq.n	800a2c8 <osThreadNew+0x13c>
          hTask = NULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a2c8:	693b      	ldr	r3, [r7, #16]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3730      	adds	r7, #48	; 0x30
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	200000b4 	.word	0x200000b4

0800a2d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2e0:	f3ef 8305 	mrs	r3, IPSR
 800a2e4:	613b      	str	r3, [r7, #16]
  return(result);
 800a2e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10f      	bne.n	800a30c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a2f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d105      	bne.n	800a304 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2f8:	f3ef 8311 	mrs	r3, BASEPRI
 800a2fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d007      	beq.n	800a314 <osDelay+0x3c>
 800a304:	4b0a      	ldr	r3, [pc, #40]	; (800a330 <osDelay+0x58>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d103      	bne.n	800a314 <osDelay+0x3c>
    stat = osErrorISR;
 800a30c:	f06f 0305 	mvn.w	r3, #5
 800a310:	617b      	str	r3, [r7, #20]
 800a312:	e007      	b.n	800a324 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a314:	2300      	movs	r3, #0
 800a316:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d002      	beq.n	800a324 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f001 f98c 	bl	800b63c <vTaskDelay>
    }
  }

  return (stat);
 800a324:	697b      	ldr	r3, [r7, #20]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	200000b4 	.word	0x200000b4

0800a334 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a334:	b580      	push	{r7, lr}
 800a336:	b08c      	sub	sp, #48	; 0x30
 800a338:	af02      	add	r7, sp, #8
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a340:	2300      	movs	r3, #0
 800a342:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a344:	f3ef 8305 	mrs	r3, IPSR
 800a348:	61bb      	str	r3, [r7, #24]
  return(result);
 800a34a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d170      	bne.n	800a432 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a350:	f3ef 8310 	mrs	r3, PRIMASK
 800a354:	617b      	str	r3, [r7, #20]
  return(result);
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d105      	bne.n	800a368 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a35c:	f3ef 8311 	mrs	r3, BASEPRI
 800a360:	613b      	str	r3, [r7, #16]
  return(result);
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <osMessageQueueNew+0x3c>
 800a368:	4b34      	ldr	r3, [pc, #208]	; (800a43c <osMessageQueueNew+0x108>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d060      	beq.n	800a432 <osMessageQueueNew+0xfe>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d05d      	beq.n	800a432 <osMessageQueueNew+0xfe>
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d05a      	beq.n	800a432 <osMessageQueueNew+0xfe>
    mem = -1;
 800a37c:	f04f 33ff 	mov.w	r3, #4294967295
 800a380:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d029      	beq.n	800a3dc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d012      	beq.n	800a3b6 <osMessageQueueNew+0x82>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	2b4f      	cmp	r3, #79	; 0x4f
 800a396:	d90e      	bls.n	800a3b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00a      	beq.n	800a3b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	695a      	ldr	r2, [r3, #20]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	68b9      	ldr	r1, [r7, #8]
 800a3a8:	fb01 f303 	mul.w	r3, r1, r3
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d302      	bcc.n	800a3b6 <osMessageQueueNew+0x82>
        mem = 1;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	623b      	str	r3, [r7, #32]
 800a3b4:	e014      	b.n	800a3e0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d110      	bne.n	800a3e0 <osMessageQueueNew+0xac>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10c      	bne.n	800a3e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d108      	bne.n	800a3e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d104      	bne.n	800a3e0 <osMessageQueueNew+0xac>
          mem = 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	623b      	str	r3, [r7, #32]
 800a3da:	e001      	b.n	800a3e0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d10c      	bne.n	800a400 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	691a      	ldr	r2, [r3, #16]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6899      	ldr	r1, [r3, #8]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	68b9      	ldr	r1, [r7, #8]
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 fa58 	bl	800a8ac <xQueueGenericCreateStatic>
 800a3fc:	6278      	str	r0, [r7, #36]	; 0x24
 800a3fe:	e008      	b.n	800a412 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d105      	bne.n	800a412 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a406:	2200      	movs	r2, #0
 800a408:	68b9      	ldr	r1, [r7, #8]
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f000 fac1 	bl	800a992 <xQueueGenericCreate>
 800a410:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00c      	beq.n	800a432 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d003      	beq.n	800a426 <osMessageQueueNew+0xf2>
        name = attr->name;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	61fb      	str	r3, [r7, #28]
 800a424:	e001      	b.n	800a42a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800a426:	2300      	movs	r3, #0
 800a428:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a42a:	69f9      	ldr	r1, [r7, #28]
 800a42c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a42e:	f000 ff0b 	bl	800b248 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a434:	4618      	mov	r0, r3
 800a436:	3728      	adds	r7, #40	; 0x28
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	200000b4 	.word	0x200000b4

0800a440 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a440:	b580      	push	{r7, lr}
 800a442:	b08a      	sub	sp, #40	; 0x28
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	603b      	str	r3, [r7, #0]
 800a44c:	4613      	mov	r3, r2
 800a44e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a454:	2300      	movs	r3, #0
 800a456:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a458:	f3ef 8305 	mrs	r3, IPSR
 800a45c:	61fb      	str	r3, [r7, #28]
  return(result);
 800a45e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10f      	bne.n	800a484 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a464:	f3ef 8310 	mrs	r3, PRIMASK
 800a468:	61bb      	str	r3, [r7, #24]
  return(result);
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d105      	bne.n	800a47c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a470:	f3ef 8311 	mrs	r3, BASEPRI
 800a474:	617b      	str	r3, [r7, #20]
  return(result);
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d02c      	beq.n	800a4d6 <osMessageQueuePut+0x96>
 800a47c:	4b28      	ldr	r3, [pc, #160]	; (800a520 <osMessageQueuePut+0xe0>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b02      	cmp	r3, #2
 800a482:	d128      	bne.n	800a4d6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a484:	6a3b      	ldr	r3, [r7, #32]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d005      	beq.n	800a496 <osMessageQueuePut+0x56>
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <osMessageQueuePut+0x56>
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d003      	beq.n	800a49e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800a496:	f06f 0303 	mvn.w	r3, #3
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a49c:	e039      	b.n	800a512 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a4a2:	f107 0210 	add.w	r2, r7, #16
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	68b9      	ldr	r1, [r7, #8]
 800a4aa:	6a38      	ldr	r0, [r7, #32]
 800a4ac:	f000 fbce 	bl	800ac4c <xQueueGenericSendFromISR>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d003      	beq.n	800a4be <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800a4b6:	f06f 0302 	mvn.w	r3, #2
 800a4ba:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a4bc:	e029      	b.n	800a512 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d026      	beq.n	800a512 <osMessageQueuePut+0xd2>
 800a4c4:	4b17      	ldr	r3, [pc, #92]	; (800a524 <osMessageQueuePut+0xe4>)
 800a4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4ca:	601a      	str	r2, [r3, #0]
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a4d4:	e01d      	b.n	800a512 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <osMessageQueuePut+0xa2>
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d103      	bne.n	800a4ea <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800a4e2:	f06f 0303 	mvn.w	r3, #3
 800a4e6:	627b      	str	r3, [r7, #36]	; 0x24
 800a4e8:	e014      	b.n	800a514 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	68b9      	ldr	r1, [r7, #8]
 800a4f0:	6a38      	ldr	r0, [r7, #32]
 800a4f2:	f000 fab1 	bl	800aa58 <xQueueGenericSend>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d00b      	beq.n	800a514 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d003      	beq.n	800a50a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800a502:	f06f 0301 	mvn.w	r3, #1
 800a506:	627b      	str	r3, [r7, #36]	; 0x24
 800a508:	e004      	b.n	800a514 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800a50a:	f06f 0302 	mvn.w	r3, #2
 800a50e:	627b      	str	r3, [r7, #36]	; 0x24
 800a510:	e000      	b.n	800a514 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a512:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a516:	4618      	mov	r0, r3
 800a518:	3728      	adds	r7, #40	; 0x28
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	200000b4 	.word	0x200000b4
 800a524:	e000ed04 	.word	0xe000ed04

0800a528 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08a      	sub	sp, #40	; 0x28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a53e:	f3ef 8305 	mrs	r3, IPSR
 800a542:	61fb      	str	r3, [r7, #28]
  return(result);
 800a544:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10f      	bne.n	800a56a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a54a:	f3ef 8310 	mrs	r3, PRIMASK
 800a54e:	61bb      	str	r3, [r7, #24]
  return(result);
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d105      	bne.n	800a562 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a556:	f3ef 8311 	mrs	r3, BASEPRI
 800a55a:	617b      	str	r3, [r7, #20]
  return(result);
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d02c      	beq.n	800a5bc <osMessageQueueGet+0x94>
 800a562:	4b28      	ldr	r3, [pc, #160]	; (800a604 <osMessageQueueGet+0xdc>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b02      	cmp	r3, #2
 800a568:	d128      	bne.n	800a5bc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d005      	beq.n	800a57c <osMessageQueueGet+0x54>
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d002      	beq.n	800a57c <osMessageQueueGet+0x54>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d003      	beq.n	800a584 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800a57c:	f06f 0303 	mvn.w	r3, #3
 800a580:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a582:	e038      	b.n	800a5f6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800a584:	2300      	movs	r3, #0
 800a586:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a588:	f107 0310 	add.w	r3, r7, #16
 800a58c:	461a      	mov	r2, r3
 800a58e:	68b9      	ldr	r1, [r7, #8]
 800a590:	6a38      	ldr	r0, [r7, #32]
 800a592:	f000 fccb 	bl	800af2c <xQueueReceiveFromISR>
 800a596:	4603      	mov	r3, r0
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d003      	beq.n	800a5a4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800a59c:	f06f 0302 	mvn.w	r3, #2
 800a5a0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5a2:	e028      	b.n	800a5f6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d025      	beq.n	800a5f6 <osMessageQueueGet+0xce>
 800a5aa:	4b17      	ldr	r3, [pc, #92]	; (800a608 <osMessageQueueGet+0xe0>)
 800a5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5ba:	e01c      	b.n	800a5f6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a5bc:	6a3b      	ldr	r3, [r7, #32]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d002      	beq.n	800a5c8 <osMessageQueueGet+0xa0>
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d103      	bne.n	800a5d0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800a5c8:	f06f 0303 	mvn.w	r3, #3
 800a5cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ce:	e013      	b.n	800a5f8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	68b9      	ldr	r1, [r7, #8]
 800a5d4:	6a38      	ldr	r0, [r7, #32]
 800a5d6:	f000 fbcd 	bl	800ad74 <xQueueReceive>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d00b      	beq.n	800a5f8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800a5e6:	f06f 0301 	mvn.w	r3, #1
 800a5ea:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ec:	e004      	b.n	800a5f8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800a5ee:	f06f 0302 	mvn.w	r3, #2
 800a5f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5f4:	e000      	b.n	800a5f8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3728      	adds	r7, #40	; 0x28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	200000b4 	.word	0x200000b4
 800a608:	e000ed04 	.word	0xe000ed04

0800a60c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4a07      	ldr	r2, [pc, #28]	; (800a638 <vApplicationGetIdleTaskMemory+0x2c>)
 800a61c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	4a06      	ldr	r2, [pc, #24]	; (800a63c <vApplicationGetIdleTaskMemory+0x30>)
 800a622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2280      	movs	r2, #128	; 0x80
 800a628:	601a      	str	r2, [r3, #0]
}
 800a62a:	bf00      	nop
 800a62c:	3714      	adds	r7, #20
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	200000b8 	.word	0x200000b8
 800a63c:	20000114 	.word	0x20000114

0800a640 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	4a07      	ldr	r2, [pc, #28]	; (800a66c <vApplicationGetTimerTaskMemory+0x2c>)
 800a650:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	4a06      	ldr	r2, [pc, #24]	; (800a670 <vApplicationGetTimerTaskMemory+0x30>)
 800a656:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a65e:	601a      	str	r2, [r3, #0]
}
 800a660:	bf00      	nop
 800a662:	3714      	adds	r7, #20
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	20000314 	.word	0x20000314
 800a670:	20000370 	.word	0x20000370

0800a674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f103 0208 	add.w	r2, r3, #8
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f04f 32ff 	mov.w	r2, #4294967295
 800a68c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f103 0208 	add.w	r2, r3, #8
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f103 0208 	add.w	r2, r3, #8
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6c2:	bf00      	nop
 800a6c4:	370c      	adds	r7, #12
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr

0800a6ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6ce:	b480      	push	{r7}
 800a6d0:	b085      	sub	sp, #20
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	689a      	ldr	r2, [r3, #8]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	1c5a      	adds	r2, r3, #1
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	601a      	str	r2, [r3, #0]
}
 800a70a:	bf00      	nop
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a716:	b480      	push	{r7}
 800a718:	b085      	sub	sp, #20
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72c:	d103      	bne.n	800a736 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	60fb      	str	r3, [r7, #12]
 800a734:	e00c      	b.n	800a750 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	3308      	adds	r3, #8
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	e002      	b.n	800a744 <vListInsert+0x2e>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d2f6      	bcs.n	800a73e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	1c5a      	adds	r2, r3, #1
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	601a      	str	r2, [r3, #0]
}
 800a77c:	bf00      	nop
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	6892      	ldr	r2, [r2, #8]
 800a79e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	6852      	ldr	r2, [r2, #4]
 800a7a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d103      	bne.n	800a7bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	689a      	ldr	r2, [r3, #8]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	1e5a      	subs	r2, r3, #1
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d109      	bne.n	800a804 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	60bb      	str	r3, [r7, #8]
 800a802:	e7fe      	b.n	800a802 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a804:	f002 f8d2 	bl	800c9ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a810:	68f9      	ldr	r1, [r7, #12]
 800a812:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a814:	fb01 f303 	mul.w	r3, r1, r3
 800a818:	441a      	add	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a834:	3b01      	subs	r3, #1
 800a836:	68f9      	ldr	r1, [r7, #12]
 800a838:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a83a:	fb01 f303 	mul.w	r3, r1, r3
 800a83e:	441a      	add	r2, r3
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	22ff      	movs	r2, #255	; 0xff
 800a848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	22ff      	movs	r2, #255	; 0xff
 800a850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d114      	bne.n	800a884 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d01a      	beq.n	800a898 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3310      	adds	r3, #16
 800a866:	4618      	mov	r0, r3
 800a868:	f001 f99c 	bl	800bba4 <xTaskRemoveFromEventList>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d012      	beq.n	800a898 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a872:	4b0d      	ldr	r3, [pc, #52]	; (800a8a8 <xQueueGenericReset+0xcc>)
 800a874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	e009      	b.n	800a898 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	3310      	adds	r3, #16
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff fef3 	bl	800a674 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3324      	adds	r3, #36	; 0x24
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff feee 	bl	800a674 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a898:	f002 f8b6 	bl	800ca08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a89c:	2301      	movs	r3, #1
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	e000ed04 	.word	0xe000ed04

0800a8ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b08e      	sub	sp, #56	; 0x38
 800a8b0:	af02      	add	r7, sp, #8
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
 800a8b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d109      	bne.n	800a8d4 <xQueueGenericCreateStatic+0x28>
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8d2:	e7fe      	b.n	800a8d2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d109      	bne.n	800a8ee <xQueueGenericCreateStatic+0x42>
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	627b      	str	r3, [r7, #36]	; 0x24
 800a8ec:	e7fe      	b.n	800a8ec <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d002      	beq.n	800a8fa <xQueueGenericCreateStatic+0x4e>
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <xQueueGenericCreateStatic+0x52>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e000      	b.n	800a900 <xQueueGenericCreateStatic+0x54>
 800a8fe:	2300      	movs	r3, #0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d109      	bne.n	800a918 <xQueueGenericCreateStatic+0x6c>
 800a904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	623b      	str	r3, [r7, #32]
 800a916:	e7fe      	b.n	800a916 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d102      	bne.n	800a924 <xQueueGenericCreateStatic+0x78>
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <xQueueGenericCreateStatic+0x7c>
 800a924:	2301      	movs	r3, #1
 800a926:	e000      	b.n	800a92a <xQueueGenericCreateStatic+0x7e>
 800a928:	2300      	movs	r3, #0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d109      	bne.n	800a942 <xQueueGenericCreateStatic+0x96>
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	61fb      	str	r3, [r7, #28]
 800a940:	e7fe      	b.n	800a940 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a942:	2350      	movs	r3, #80	; 0x50
 800a944:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2b50      	cmp	r3, #80	; 0x50
 800a94a:	d009      	beq.n	800a960 <xQueueGenericCreateStatic+0xb4>
 800a94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a950:	f383 8811 	msr	BASEPRI, r3
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	61bb      	str	r3, [r7, #24]
 800a95e:	e7fe      	b.n	800a95e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a960:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00d      	beq.n	800a988 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a974:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	4613      	mov	r3, r2
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	68b9      	ldr	r1, [r7, #8]
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 f844 	bl	800aa10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3730      	adds	r7, #48	; 0x30
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a992:	b580      	push	{r7, lr}
 800a994:	b08a      	sub	sp, #40	; 0x28
 800a996:	af02      	add	r7, sp, #8
 800a998:	60f8      	str	r0, [r7, #12]
 800a99a:	60b9      	str	r1, [r7, #8]
 800a99c:	4613      	mov	r3, r2
 800a99e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d109      	bne.n	800a9ba <xQueueGenericCreate+0x28>
 800a9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	613b      	str	r3, [r7, #16]
 800a9b8:	e7fe      	b.n	800a9b8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d102      	bne.n	800a9c6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	61fb      	str	r3, [r7, #28]
 800a9c4:	e004      	b.n	800a9d0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	fb02 f303 	mul.w	r3, r2, r3
 800a9ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	3350      	adds	r3, #80	; 0x50
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f002 f903 	bl	800cbe0 <pvPortMalloc>
 800a9da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d011      	beq.n	800aa06 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	3350      	adds	r3, #80	; 0x50
 800a9ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9f4:	79fa      	ldrb	r2, [r7, #7]
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	68b9      	ldr	r1, [r7, #8]
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f000 f805 	bl	800aa10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa06:	69bb      	ldr	r3, [r7, #24]
	}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3720      	adds	r7, #32
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d103      	bne.n	800aa2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	69ba      	ldr	r2, [r7, #24]
 800aa28:	601a      	str	r2, [r3, #0]
 800aa2a:	e002      	b.n	800aa32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa3e:	2101      	movs	r1, #1
 800aa40:	69b8      	ldr	r0, [r7, #24]
 800aa42:	f7ff fecb 	bl	800a7dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	78fa      	ldrb	r2, [r7, #3]
 800aa4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa4e:	bf00      	nop
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
	...

0800aa58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b08e      	sub	sp, #56	; 0x38
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa66:	2300      	movs	r3, #0
 800aa68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d109      	bne.n	800aa88 <xQueueGenericSend+0x30>
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa86:	e7fe      	b.n	800aa86 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d103      	bne.n	800aa96 <xQueueGenericSend+0x3e>
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d101      	bne.n	800aa9a <xQueueGenericSend+0x42>
 800aa96:	2301      	movs	r3, #1
 800aa98:	e000      	b.n	800aa9c <xQueueGenericSend+0x44>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d109      	bne.n	800aab4 <xQueueGenericSend+0x5c>
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	627b      	str	r3, [r7, #36]	; 0x24
 800aab2:	e7fe      	b.n	800aab2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d103      	bne.n	800aac2 <xQueueGenericSend+0x6a>
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d101      	bne.n	800aac6 <xQueueGenericSend+0x6e>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e000      	b.n	800aac8 <xQueueGenericSend+0x70>
 800aac6:	2300      	movs	r3, #0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d109      	bne.n	800aae0 <xQueueGenericSend+0x88>
 800aacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	623b      	str	r3, [r7, #32]
 800aade:	e7fe      	b.n	800aade <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aae0:	f001 fa16 	bl	800bf10 <xTaskGetSchedulerState>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d102      	bne.n	800aaf0 <xQueueGenericSend+0x98>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d101      	bne.n	800aaf4 <xQueueGenericSend+0x9c>
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e000      	b.n	800aaf6 <xQueueGenericSend+0x9e>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d109      	bne.n	800ab0e <xQueueGenericSend+0xb6>
 800aafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafe:	f383 8811 	msr	BASEPRI, r3
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	61fb      	str	r3, [r7, #28]
 800ab0c:	e7fe      	b.n	800ab0c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab0e:	f001 ff4d 	bl	800c9ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d302      	bcc.n	800ab24 <xQueueGenericSend+0xcc>
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d129      	bne.n	800ab78 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	68b9      	ldr	r1, [r7, #8]
 800ab28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab2a:	f000 fa7c 	bl	800b026 <prvCopyDataToQueue>
 800ab2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d010      	beq.n	800ab5a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	3324      	adds	r3, #36	; 0x24
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f001 f831 	bl	800bba4 <xTaskRemoveFromEventList>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d013      	beq.n	800ab70 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab48:	4b3f      	ldr	r3, [pc, #252]	; (800ac48 <xQueueGenericSend+0x1f0>)
 800ab4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	e00a      	b.n	800ab70 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d007      	beq.n	800ab70 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab60:	4b39      	ldr	r3, [pc, #228]	; (800ac48 <xQueueGenericSend+0x1f0>)
 800ab62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab70:	f001 ff4a 	bl	800ca08 <vPortExitCritical>
				return pdPASS;
 800ab74:	2301      	movs	r3, #1
 800ab76:	e063      	b.n	800ac40 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d103      	bne.n	800ab86 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab7e:	f001 ff43 	bl	800ca08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab82:	2300      	movs	r3, #0
 800ab84:	e05c      	b.n	800ac40 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d106      	bne.n	800ab9a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab8c:	f107 0314 	add.w	r3, r7, #20
 800ab90:	4618      	mov	r0, r3
 800ab92:	f001 f869 	bl	800bc68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab96:	2301      	movs	r3, #1
 800ab98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab9a:	f001 ff35 	bl	800ca08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab9e:	f000 fde5 	bl	800b76c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aba2:	f001 ff03 	bl	800c9ac <vPortEnterCritical>
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abac:	b25b      	sxtb	r3, r3
 800abae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb2:	d103      	bne.n	800abbc <xQueueGenericSend+0x164>
 800abb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abc2:	b25b      	sxtb	r3, r3
 800abc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc8:	d103      	bne.n	800abd2 <xQueueGenericSend+0x17a>
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abd2:	f001 ff19 	bl	800ca08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abd6:	1d3a      	adds	r2, r7, #4
 800abd8:	f107 0314 	add.w	r3, r7, #20
 800abdc:	4611      	mov	r1, r2
 800abde:	4618      	mov	r0, r3
 800abe0:	f001 f858 	bl	800bc94 <xTaskCheckForTimeOut>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d124      	bne.n	800ac34 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800abea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abec:	f000 fb13 	bl	800b216 <prvIsQueueFull>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d018      	beq.n	800ac28 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	3310      	adds	r3, #16
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	4611      	mov	r1, r2
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 ff82 	bl	800bb08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac06:	f000 fa9e 	bl	800b146 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac0a:	f000 fdbd 	bl	800b788 <xTaskResumeAll>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f47f af7c 	bne.w	800ab0e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ac16:	4b0c      	ldr	r3, [pc, #48]	; (800ac48 <xQueueGenericSend+0x1f0>)
 800ac18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac1c:	601a      	str	r2, [r3, #0]
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	e772      	b.n	800ab0e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac2a:	f000 fa8c 	bl	800b146 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac2e:	f000 fdab 	bl	800b788 <xTaskResumeAll>
 800ac32:	e76c      	b.n	800ab0e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac36:	f000 fa86 	bl	800b146 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac3a:	f000 fda5 	bl	800b788 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3738      	adds	r7, #56	; 0x38
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	e000ed04 	.word	0xe000ed04

0800ac4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b08e      	sub	sp, #56	; 0x38
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d109      	bne.n	800ac78 <xQueueGenericSendFromISR+0x2c>
 800ac64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac68:	f383 8811 	msr	BASEPRI, r3
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	627b      	str	r3, [r7, #36]	; 0x24
 800ac76:	e7fe      	b.n	800ac76 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d103      	bne.n	800ac86 <xQueueGenericSendFromISR+0x3a>
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d101      	bne.n	800ac8a <xQueueGenericSendFromISR+0x3e>
 800ac86:	2301      	movs	r3, #1
 800ac88:	e000      	b.n	800ac8c <xQueueGenericSendFromISR+0x40>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d109      	bne.n	800aca4 <xQueueGenericSendFromISR+0x58>
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	623b      	str	r3, [r7, #32]
 800aca2:	e7fe      	b.n	800aca2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d103      	bne.n	800acb2 <xQueueGenericSendFromISR+0x66>
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d101      	bne.n	800acb6 <xQueueGenericSendFromISR+0x6a>
 800acb2:	2301      	movs	r3, #1
 800acb4:	e000      	b.n	800acb8 <xQueueGenericSendFromISR+0x6c>
 800acb6:	2300      	movs	r3, #0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d109      	bne.n	800acd0 <xQueueGenericSendFromISR+0x84>
 800acbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	61fb      	str	r3, [r7, #28]
 800acce:	e7fe      	b.n	800acce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acd0:	f001 ff48 	bl	800cb64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800acd4:	f3ef 8211 	mrs	r2, BASEPRI
 800acd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	61ba      	str	r2, [r7, #24]
 800acea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800acec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d302      	bcc.n	800ad02 <xQueueGenericSendFromISR+0xb6>
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	d12c      	bne.n	800ad5c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	68b9      	ldr	r1, [r7, #8]
 800ad10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad12:	f000 f988 	bl	800b026 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad16:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ad1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1e:	d112      	bne.n	800ad46 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d016      	beq.n	800ad56 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	3324      	adds	r3, #36	; 0x24
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 ff39 	bl	800bba4 <xTaskRemoveFromEventList>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00e      	beq.n	800ad56 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00b      	beq.n	800ad56 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	601a      	str	r2, [r3, #0]
 800ad44:	e007      	b.n	800ad56 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	b25a      	sxtb	r2, r3
 800ad50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad56:	2301      	movs	r3, #1
 800ad58:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ad5a:	e001      	b.n	800ad60 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad62:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3738      	adds	r7, #56	; 0x38
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08c      	sub	sp, #48	; 0x30
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad80:	2300      	movs	r3, #0
 800ad82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d109      	bne.n	800ada2 <xQueueReceive+0x2e>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	623b      	str	r3, [r7, #32]
 800ada0:	e7fe      	b.n	800ada0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d103      	bne.n	800adb0 <xQueueReceive+0x3c>
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adac:	2b00      	cmp	r3, #0
 800adae:	d101      	bne.n	800adb4 <xQueueReceive+0x40>
 800adb0:	2301      	movs	r3, #1
 800adb2:	e000      	b.n	800adb6 <xQueueReceive+0x42>
 800adb4:	2300      	movs	r3, #0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d109      	bne.n	800adce <xQueueReceive+0x5a>
 800adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	61fb      	str	r3, [r7, #28]
 800adcc:	e7fe      	b.n	800adcc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adce:	f001 f89f 	bl	800bf10 <xTaskGetSchedulerState>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d102      	bne.n	800adde <xQueueReceive+0x6a>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d101      	bne.n	800ade2 <xQueueReceive+0x6e>
 800adde:	2301      	movs	r3, #1
 800ade0:	e000      	b.n	800ade4 <xQueueReceive+0x70>
 800ade2:	2300      	movs	r3, #0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d109      	bne.n	800adfc <xQueueReceive+0x88>
 800ade8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	61bb      	str	r3, [r7, #24]
 800adfa:	e7fe      	b.n	800adfa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adfc:	f001 fdd6 	bl	800c9ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae04:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d01f      	beq.n	800ae4c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae0c:	68b9      	ldr	r1, [r7, #8]
 800ae0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae10:	f000 f973 	bl	800b0fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	1e5a      	subs	r2, r3, #1
 800ae18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00f      	beq.n	800ae44 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae26:	3310      	adds	r3, #16
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 febb 	bl	800bba4 <xTaskRemoveFromEventList>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d007      	beq.n	800ae44 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae34:	4b3c      	ldr	r3, [pc, #240]	; (800af28 <xQueueReceive+0x1b4>)
 800ae36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae3a:	601a      	str	r2, [r3, #0]
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae44:	f001 fde0 	bl	800ca08 <vPortExitCritical>
				return pdPASS;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e069      	b.n	800af20 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d103      	bne.n	800ae5a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae52:	f001 fdd9 	bl	800ca08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae56:	2300      	movs	r3, #0
 800ae58:	e062      	b.n	800af20 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d106      	bne.n	800ae6e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae60:	f107 0310 	add.w	r3, r7, #16
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 feff 	bl	800bc68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae6e:	f001 fdcb 	bl	800ca08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae72:	f000 fc7b 	bl	800b76c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae76:	f001 fd99 	bl	800c9ac <vPortEnterCritical>
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae80:	b25b      	sxtb	r3, r3
 800ae82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae86:	d103      	bne.n	800ae90 <xQueueReceive+0x11c>
 800ae88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae96:	b25b      	sxtb	r3, r3
 800ae98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae9c:	d103      	bne.n	800aea6 <xQueueReceive+0x132>
 800ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aea6:	f001 fdaf 	bl	800ca08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeaa:	1d3a      	adds	r2, r7, #4
 800aeac:	f107 0310 	add.w	r3, r7, #16
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 feee 	bl	800bc94 <xTaskCheckForTimeOut>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d123      	bne.n	800af06 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aec0:	f000 f993 	bl	800b1ea <prvIsQueueEmpty>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d017      	beq.n	800aefa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aecc:	3324      	adds	r3, #36	; 0x24
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	4611      	mov	r1, r2
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 fe18 	bl	800bb08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeda:	f000 f934 	bl	800b146 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aede:	f000 fc53 	bl	800b788 <xTaskResumeAll>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d189      	bne.n	800adfc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800aee8:	4b0f      	ldr	r3, [pc, #60]	; (800af28 <xQueueReceive+0x1b4>)
 800aeea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	e780      	b.n	800adfc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aefa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aefc:	f000 f923 	bl	800b146 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af00:	f000 fc42 	bl	800b788 <xTaskResumeAll>
 800af04:	e77a      	b.n	800adfc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800af06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af08:	f000 f91d 	bl	800b146 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af0c:	f000 fc3c 	bl	800b788 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af12:	f000 f96a 	bl	800b1ea <prvIsQueueEmpty>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f43f af6f 	beq.w	800adfc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af20:	4618      	mov	r0, r3
 800af22:	3730      	adds	r7, #48	; 0x30
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	e000ed04 	.word	0xe000ed04

0800af2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b08e      	sub	sp, #56	; 0x38
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d109      	bne.n	800af56 <xQueueReceiveFromISR+0x2a>
 800af42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af46:	f383 8811 	msr	BASEPRI, r3
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	623b      	str	r3, [r7, #32]
 800af54:	e7fe      	b.n	800af54 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d103      	bne.n	800af64 <xQueueReceiveFromISR+0x38>
 800af5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af60:	2b00      	cmp	r3, #0
 800af62:	d101      	bne.n	800af68 <xQueueReceiveFromISR+0x3c>
 800af64:	2301      	movs	r3, #1
 800af66:	e000      	b.n	800af6a <xQueueReceiveFromISR+0x3e>
 800af68:	2300      	movs	r3, #0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d109      	bne.n	800af82 <xQueueReceiveFromISR+0x56>
 800af6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	61fb      	str	r3, [r7, #28]
 800af80:	e7fe      	b.n	800af80 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af82:	f001 fdef 	bl	800cb64 <vPortValidateInterruptPriority>
	__asm volatile
 800af86:	f3ef 8211 	mrs	r2, BASEPRI
 800af8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	61ba      	str	r2, [r7, #24]
 800af9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800af9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d02f      	beq.n	800b00e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800afae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800afb8:	68b9      	ldr	r1, [r7, #8]
 800afba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afbc:	f000 f89d 	bl	800b0fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800afc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc2:	1e5a      	subs	r2, r3, #1
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800afc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800afcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd0:	d112      	bne.n	800aff8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d016      	beq.n	800b008 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afdc:	3310      	adds	r3, #16
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 fde0 	bl	800bba4 <xTaskRemoveFromEventList>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00e      	beq.n	800b008 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00b      	beq.n	800b008 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	601a      	str	r2, [r3, #0]
 800aff6:	e007      	b.n	800b008 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800affc:	3301      	adds	r3, #1
 800affe:	b2db      	uxtb	r3, r3
 800b000:	b25a      	sxtb	r2, r3
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b008:	2301      	movs	r3, #1
 800b00a:	637b      	str	r3, [r7, #52]	; 0x34
 800b00c:	e001      	b.n	800b012 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b00e:	2300      	movs	r3, #0
 800b010:	637b      	str	r3, [r7, #52]	; 0x34
 800b012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b014:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3738      	adds	r7, #56	; 0x38
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b086      	sub	sp, #24
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	60f8      	str	r0, [r7, #12]
 800b02e:	60b9      	str	r1, [r7, #8]
 800b030:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b032:	2300      	movs	r3, #0
 800b034:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10d      	bne.n	800b060 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d14d      	bne.n	800b0e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	4618      	mov	r0, r3
 800b052:	f000 ff7b 	bl	800bf4c <xTaskPriorityDisinherit>
 800b056:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	609a      	str	r2, [r3, #8]
 800b05e:	e043      	b.n	800b0e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d119      	bne.n	800b09a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6858      	ldr	r0, [r3, #4]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	461a      	mov	r2, r3
 800b070:	68b9      	ldr	r1, [r7, #8]
 800b072:	f003 fc33 	bl	800e8dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07e:	441a      	add	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	685a      	ldr	r2, [r3, #4]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d32b      	bcc.n	800b0e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	605a      	str	r2, [r3, #4]
 800b098:	e026      	b.n	800b0e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	68d8      	ldr	r0, [r3, #12]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	68b9      	ldr	r1, [r7, #8]
 800b0a6:	f003 fc19 	bl	800e8dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	68da      	ldr	r2, [r3, #12]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b2:	425b      	negs	r3, r3
 800b0b4:	441a      	add	r2, r3
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d207      	bcs.n	800b0d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	689a      	ldr	r2, [r3, #8]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ce:	425b      	negs	r3, r3
 800b0d0:	441a      	add	r2, r3
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d105      	bne.n	800b0e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d002      	beq.n	800b0e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	1c5a      	adds	r2, r3, #1
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0f0:	697b      	ldr	r3, [r7, #20]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b082      	sub	sp, #8
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d018      	beq.n	800b13e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	68da      	ldr	r2, [r3, #12]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b114:	441a      	add	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	68da      	ldr	r2, [r3, #12]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	429a      	cmp	r2, r3
 800b124:	d303      	bcc.n	800b12e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	68d9      	ldr	r1, [r3, #12]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b136:	461a      	mov	r2, r3
 800b138:	6838      	ldr	r0, [r7, #0]
 800b13a:	f003 fbcf 	bl	800e8dc <memcpy>
	}
}
 800b13e:	bf00      	nop
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b14e:	f001 fc2d 	bl	800c9ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b158:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b15a:	e011      	b.n	800b180 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b160:	2b00      	cmp	r3, #0
 800b162:	d012      	beq.n	800b18a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	3324      	adds	r3, #36	; 0x24
 800b168:	4618      	mov	r0, r3
 800b16a:	f000 fd1b 	bl	800bba4 <xTaskRemoveFromEventList>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b174:	f000 fdee 	bl	800bd54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b178:	7bfb      	ldrb	r3, [r7, #15]
 800b17a:	3b01      	subs	r3, #1
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b184:	2b00      	cmp	r3, #0
 800b186:	dce9      	bgt.n	800b15c <prvUnlockQueue+0x16>
 800b188:	e000      	b.n	800b18c <prvUnlockQueue+0x46>
					break;
 800b18a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	22ff      	movs	r2, #255	; 0xff
 800b190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b194:	f001 fc38 	bl	800ca08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b198:	f001 fc08 	bl	800c9ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1a4:	e011      	b.n	800b1ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d012      	beq.n	800b1d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	3310      	adds	r3, #16
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f000 fcf6 	bl	800bba4 <xTaskRemoveFromEventList>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1be:	f000 fdc9 	bl	800bd54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1c2:	7bbb      	ldrb	r3, [r7, #14]
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	dce9      	bgt.n	800b1a6 <prvUnlockQueue+0x60>
 800b1d2:	e000      	b.n	800b1d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	22ff      	movs	r2, #255	; 0xff
 800b1da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1de:	f001 fc13 	bl	800ca08 <vPortExitCritical>
}
 800b1e2:	bf00      	nop
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b084      	sub	sp, #16
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1f2:	f001 fbdb 	bl	800c9ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d102      	bne.n	800b204 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1fe:	2301      	movs	r3, #1
 800b200:	60fb      	str	r3, [r7, #12]
 800b202:	e001      	b.n	800b208 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b204:	2300      	movs	r3, #0
 800b206:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b208:	f001 fbfe 	bl	800ca08 <vPortExitCritical>

	return xReturn;
 800b20c:	68fb      	ldr	r3, [r7, #12]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b084      	sub	sp, #16
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b21e:	f001 fbc5 	bl	800c9ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d102      	bne.n	800b234 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b22e:	2301      	movs	r3, #1
 800b230:	60fb      	str	r3, [r7, #12]
 800b232:	e001      	b.n	800b238 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b234:	2300      	movs	r3, #0
 800b236:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b238:	f001 fbe6 	bl	800ca08 <vPortExitCritical>

	return xReturn;
 800b23c:	68fb      	ldr	r3, [r7, #12]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
	...

0800b248 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b252:	2300      	movs	r3, #0
 800b254:	60fb      	str	r3, [r7, #12]
 800b256:	e014      	b.n	800b282 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b258:	4a0e      	ldr	r2, [pc, #56]	; (800b294 <vQueueAddToRegistry+0x4c>)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10b      	bne.n	800b27c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b264:	490b      	ldr	r1, [pc, #44]	; (800b294 <vQueueAddToRegistry+0x4c>)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	683a      	ldr	r2, [r7, #0]
 800b26a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b26e:	4a09      	ldr	r2, [pc, #36]	; (800b294 <vQueueAddToRegistry+0x4c>)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	00db      	lsls	r3, r3, #3
 800b274:	4413      	add	r3, r2
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b27a:	e005      	b.n	800b288 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	3301      	adds	r3, #1
 800b280:	60fb      	str	r3, [r7, #12]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2b07      	cmp	r3, #7
 800b286:	d9e7      	bls.n	800b258 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b288:	bf00      	nop
 800b28a:	3714      	adds	r7, #20
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	200019b0 	.word	0x200019b0

0800b298 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b2a8:	f001 fb80 	bl	800c9ac <vPortEnterCritical>
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2b2:	b25b      	sxtb	r3, r3
 800b2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b8:	d103      	bne.n	800b2c2 <vQueueWaitForMessageRestricted+0x2a>
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2c8:	b25b      	sxtb	r3, r3
 800b2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ce:	d103      	bne.n	800b2d8 <vQueueWaitForMessageRestricted+0x40>
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2d8:	f001 fb96 	bl	800ca08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d106      	bne.n	800b2f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	3324      	adds	r3, #36	; 0x24
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	68b9      	ldr	r1, [r7, #8]
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f000 fc2f 	bl	800bb50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b2f2:	6978      	ldr	r0, [r7, #20]
 800b2f4:	f7ff ff27 	bl	800b146 <prvUnlockQueue>
	}
 800b2f8:	bf00      	nop
 800b2fa:	3718      	adds	r7, #24
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08e      	sub	sp, #56	; 0x38
 800b304:	af04      	add	r7, sp, #16
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b310:	2b00      	cmp	r3, #0
 800b312:	d109      	bne.n	800b328 <xTaskCreateStatic+0x28>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	623b      	str	r3, [r7, #32]
 800b326:	e7fe      	b.n	800b326 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d109      	bne.n	800b342 <xTaskCreateStatic+0x42>
 800b32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b332:	f383 8811 	msr	BASEPRI, r3
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	61fb      	str	r3, [r7, #28]
 800b340:	e7fe      	b.n	800b340 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b342:	235c      	movs	r3, #92	; 0x5c
 800b344:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	2b5c      	cmp	r3, #92	; 0x5c
 800b34a:	d009      	beq.n	800b360 <xTaskCreateStatic+0x60>
 800b34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	61bb      	str	r3, [r7, #24]
 800b35e:	e7fe      	b.n	800b35e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b360:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b364:	2b00      	cmp	r3, #0
 800b366:	d01e      	beq.n	800b3a6 <xTaskCreateStatic+0xa6>
 800b368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d01b      	beq.n	800b3a6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b370:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b376:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37a:	2202      	movs	r2, #2
 800b37c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b380:	2300      	movs	r3, #0
 800b382:	9303      	str	r3, [sp, #12]
 800b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b386:	9302      	str	r3, [sp, #8]
 800b388:	f107 0314 	add.w	r3, r7, #20
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	68b9      	ldr	r1, [r7, #8]
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f000 f850 	bl	800b43e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b39e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3a0:	f000 f8dc 	bl	800b55c <prvAddNewTaskToReadyList>
 800b3a4:	e001      	b.n	800b3aa <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b3aa:	697b      	ldr	r3, [r7, #20]
	}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3728      	adds	r7, #40	; 0x28
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08c      	sub	sp, #48	; 0x30
 800b3b8:	af04      	add	r7, sp, #16
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	603b      	str	r3, [r7, #0]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b3c4:	88fb      	ldrh	r3, [r7, #6]
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f001 fc09 	bl	800cbe0 <pvPortMalloc>
 800b3ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00e      	beq.n	800b3f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b3d6:	205c      	movs	r0, #92	; 0x5c
 800b3d8:	f001 fc02 	bl	800cbe0 <pvPortMalloc>
 800b3dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d003      	beq.n	800b3ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	697a      	ldr	r2, [r7, #20]
 800b3e8:	631a      	str	r2, [r3, #48]	; 0x30
 800b3ea:	e005      	b.n	800b3f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3ec:	6978      	ldr	r0, [r7, #20]
 800b3ee:	f001 fcb9 	bl	800cd64 <vPortFree>
 800b3f2:	e001      	b.n	800b3f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d017      	beq.n	800b42e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	2200      	movs	r2, #0
 800b402:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b406:	88fa      	ldrh	r2, [r7, #6]
 800b408:	2300      	movs	r3, #0
 800b40a:	9303      	str	r3, [sp, #12]
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	9302      	str	r3, [sp, #8]
 800b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b412:	9301      	str	r3, [sp, #4]
 800b414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	68b9      	ldr	r1, [r7, #8]
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f000 f80e 	bl	800b43e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b422:	69f8      	ldr	r0, [r7, #28]
 800b424:	f000 f89a 	bl	800b55c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b428:	2301      	movs	r3, #1
 800b42a:	61bb      	str	r3, [r7, #24]
 800b42c:	e002      	b.n	800b434 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b42e:	f04f 33ff 	mov.w	r3, #4294967295
 800b432:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b434:	69bb      	ldr	r3, [r7, #24]
	}
 800b436:	4618      	mov	r0, r3
 800b438:	3720      	adds	r7, #32
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b088      	sub	sp, #32
 800b442:	af00      	add	r7, sp, #0
 800b444:	60f8      	str	r0, [r7, #12]
 800b446:	60b9      	str	r1, [r7, #8]
 800b448:	607a      	str	r2, [r7, #4]
 800b44a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	461a      	mov	r2, r3
 800b456:	21a5      	movs	r1, #165	; 0xa5
 800b458:	f003 fa4b 	bl	800e8f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b466:	3b01      	subs	r3, #1
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b46e:	69bb      	ldr	r3, [r7, #24]
 800b470:	f023 0307 	bic.w	r3, r3, #7
 800b474:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	f003 0307 	and.w	r3, r3, #7
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d009      	beq.n	800b494 <prvInitialiseNewTask+0x56>
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	617b      	str	r3, [r7, #20]
 800b492:	e7fe      	b.n	800b492 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d01f      	beq.n	800b4da <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b49a:	2300      	movs	r3, #0
 800b49c:	61fb      	str	r3, [r7, #28]
 800b49e:	e012      	b.n	800b4c6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	7819      	ldrb	r1, [r3, #0]
 800b4a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	3334      	adds	r3, #52	; 0x34
 800b4b0:	460a      	mov	r2, r1
 800b4b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d006      	beq.n	800b4ce <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	61fb      	str	r3, [r7, #28]
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	2b0f      	cmp	r3, #15
 800b4ca:	d9e9      	bls.n	800b4a0 <prvInitialiseNewTask+0x62>
 800b4cc:	e000      	b.n	800b4d0 <prvInitialiseNewTask+0x92>
			{
				break;
 800b4ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b4d8:	e003      	b.n	800b4e2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e4:	2b37      	cmp	r3, #55	; 0x37
 800b4e6:	d901      	bls.n	800b4ec <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4e8:	2337      	movs	r3, #55	; 0x37
 800b4ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b500:	3304      	adds	r3, #4
 800b502:	4618      	mov	r0, r3
 800b504:	f7ff f8d6 	bl	800a6b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	3318      	adds	r3, #24
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7ff f8d1 	bl	800a6b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b516:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b526:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52a:	2200      	movs	r2, #0
 800b52c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	68f9      	ldr	r1, [r7, #12]
 800b53a:	69b8      	ldr	r0, [r7, #24]
 800b53c:	f001 f90c 	bl	800c758 <pxPortInitialiseStack>
 800b540:	4602      	mov	r2, r0
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d002      	beq.n	800b552 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b550:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b552:	bf00      	nop
 800b554:	3720      	adds	r7, #32
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
	...

0800b55c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b564:	f001 fa22 	bl	800c9ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b568:	4b2d      	ldr	r3, [pc, #180]	; (800b620 <prvAddNewTaskToReadyList+0xc4>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	3301      	adds	r3, #1
 800b56e:	4a2c      	ldr	r2, [pc, #176]	; (800b620 <prvAddNewTaskToReadyList+0xc4>)
 800b570:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b572:	4b2c      	ldr	r3, [pc, #176]	; (800b624 <prvAddNewTaskToReadyList+0xc8>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d109      	bne.n	800b58e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b57a:	4a2a      	ldr	r2, [pc, #168]	; (800b624 <prvAddNewTaskToReadyList+0xc8>)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b580:	4b27      	ldr	r3, [pc, #156]	; (800b620 <prvAddNewTaskToReadyList+0xc4>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d110      	bne.n	800b5aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b588:	f000 fc08 	bl	800bd9c <prvInitialiseTaskLists>
 800b58c:	e00d      	b.n	800b5aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b58e:	4b26      	ldr	r3, [pc, #152]	; (800b628 <prvAddNewTaskToReadyList+0xcc>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d109      	bne.n	800b5aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b596:	4b23      	ldr	r3, [pc, #140]	; (800b624 <prvAddNewTaskToReadyList+0xc8>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d802      	bhi.n	800b5aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5a4:	4a1f      	ldr	r2, [pc, #124]	; (800b624 <prvAddNewTaskToReadyList+0xc8>)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5aa:	4b20      	ldr	r3, [pc, #128]	; (800b62c <prvAddNewTaskToReadyList+0xd0>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	4a1e      	ldr	r2, [pc, #120]	; (800b62c <prvAddNewTaskToReadyList+0xd0>)
 800b5b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b5b4:	4b1d      	ldr	r3, [pc, #116]	; (800b62c <prvAddNewTaskToReadyList+0xd0>)
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c0:	4b1b      	ldr	r3, [pc, #108]	; (800b630 <prvAddNewTaskToReadyList+0xd4>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d903      	bls.n	800b5d0 <prvAddNewTaskToReadyList+0x74>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5cc:	4a18      	ldr	r2, [pc, #96]	; (800b630 <prvAddNewTaskToReadyList+0xd4>)
 800b5ce:	6013      	str	r3, [r2, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4413      	add	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	4a15      	ldr	r2, [pc, #84]	; (800b634 <prvAddNewTaskToReadyList+0xd8>)
 800b5de:	441a      	add	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	3304      	adds	r3, #4
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	4610      	mov	r0, r2
 800b5e8:	f7ff f871 	bl	800a6ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5ec:	f001 fa0c 	bl	800ca08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5f0:	4b0d      	ldr	r3, [pc, #52]	; (800b628 <prvAddNewTaskToReadyList+0xcc>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00e      	beq.n	800b616 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5f8:	4b0a      	ldr	r3, [pc, #40]	; (800b624 <prvAddNewTaskToReadyList+0xc8>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b602:	429a      	cmp	r2, r3
 800b604:	d207      	bcs.n	800b616 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b606:	4b0c      	ldr	r3, [pc, #48]	; (800b638 <prvAddNewTaskToReadyList+0xdc>)
 800b608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	f3bf 8f4f 	dsb	sy
 800b612:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b616:	bf00      	nop
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20000c44 	.word	0x20000c44
 800b624:	20000770 	.word	0x20000770
 800b628:	20000c50 	.word	0x20000c50
 800b62c:	20000c60 	.word	0x20000c60
 800b630:	20000c4c 	.word	0x20000c4c
 800b634:	20000774 	.word	0x20000774
 800b638:	e000ed04 	.word	0xe000ed04

0800b63c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b644:	2300      	movs	r3, #0
 800b646:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d016      	beq.n	800b67c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b64e:	4b13      	ldr	r3, [pc, #76]	; (800b69c <vTaskDelay+0x60>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d009      	beq.n	800b66a <vTaskDelay+0x2e>
 800b656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65a:	f383 8811 	msr	BASEPRI, r3
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	60bb      	str	r3, [r7, #8]
 800b668:	e7fe      	b.n	800b668 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b66a:	f000 f87f 	bl	800b76c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b66e:	2100      	movs	r1, #0
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 fcd7 	bl	800c024 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b676:	f000 f887 	bl	800b788 <xTaskResumeAll>
 800b67a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d107      	bne.n	800b692 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b682:	4b07      	ldr	r3, [pc, #28]	; (800b6a0 <vTaskDelay+0x64>)
 800b684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b688:	601a      	str	r2, [r3, #0]
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b692:	bf00      	nop
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	20000c6c 	.word	0x20000c6c
 800b6a0:	e000ed04 	.word	0xe000ed04

0800b6a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08a      	sub	sp, #40	; 0x28
 800b6a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b6b2:	463a      	mov	r2, r7
 800b6b4:	1d39      	adds	r1, r7, #4
 800b6b6:	f107 0308 	add.w	r3, r7, #8
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fe ffa6 	bl	800a60c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b6c0:	6839      	ldr	r1, [r7, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	9202      	str	r2, [sp, #8]
 800b6c8:	9301      	str	r3, [sp, #4]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	460a      	mov	r2, r1
 800b6d2:	4920      	ldr	r1, [pc, #128]	; (800b754 <vTaskStartScheduler+0xb0>)
 800b6d4:	4820      	ldr	r0, [pc, #128]	; (800b758 <vTaskStartScheduler+0xb4>)
 800b6d6:	f7ff fe13 	bl	800b300 <xTaskCreateStatic>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	4b1f      	ldr	r3, [pc, #124]	; (800b75c <vTaskStartScheduler+0xb8>)
 800b6de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b6e0:	4b1e      	ldr	r3, [pc, #120]	; (800b75c <vTaskStartScheduler+0xb8>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d002      	beq.n	800b6ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	617b      	str	r3, [r7, #20]
 800b6ec:	e001      	b.n	800b6f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d102      	bne.n	800b6fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b6f8:	f000 fce8 	bl	800c0cc <xTimerCreateTimerTask>
 800b6fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d115      	bne.n	800b730 <vTaskStartScheduler+0x8c>
 800b704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b716:	4b12      	ldr	r3, [pc, #72]	; (800b760 <vTaskStartScheduler+0xbc>)
 800b718:	f04f 32ff 	mov.w	r2, #4294967295
 800b71c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b71e:	4b11      	ldr	r3, [pc, #68]	; (800b764 <vTaskStartScheduler+0xc0>)
 800b720:	2201      	movs	r2, #1
 800b722:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b724:	4b10      	ldr	r3, [pc, #64]	; (800b768 <vTaskStartScheduler+0xc4>)
 800b726:	2200      	movs	r2, #0
 800b728:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b72a:	f001 f8a1 	bl	800c870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b72e:	e00d      	b.n	800b74c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b736:	d109      	bne.n	800b74c <vTaskStartScheduler+0xa8>
 800b738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	60fb      	str	r3, [r7, #12]
 800b74a:	e7fe      	b.n	800b74a <vTaskStartScheduler+0xa6>
}
 800b74c:	bf00      	nop
 800b74e:	3718      	adds	r7, #24
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	0800eaa0 	.word	0x0800eaa0
 800b758:	0800bd6d 	.word	0x0800bd6d
 800b75c:	20000c68 	.word	0x20000c68
 800b760:	20000c64 	.word	0x20000c64
 800b764:	20000c50 	.word	0x20000c50
 800b768:	20000c48 	.word	0x20000c48

0800b76c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b76c:	b480      	push	{r7}
 800b76e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b770:	4b04      	ldr	r3, [pc, #16]	; (800b784 <vTaskSuspendAll+0x18>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3301      	adds	r3, #1
 800b776:	4a03      	ldr	r2, [pc, #12]	; (800b784 <vTaskSuspendAll+0x18>)
 800b778:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b77a:	bf00      	nop
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr
 800b784:	20000c6c 	.word	0x20000c6c

0800b788 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b792:	2300      	movs	r3, #0
 800b794:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b796:	4b41      	ldr	r3, [pc, #260]	; (800b89c <xTaskResumeAll+0x114>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d109      	bne.n	800b7b2 <xTaskResumeAll+0x2a>
 800b79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	603b      	str	r3, [r7, #0]
 800b7b0:	e7fe      	b.n	800b7b0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b7b2:	f001 f8fb 	bl	800c9ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b7b6:	4b39      	ldr	r3, [pc, #228]	; (800b89c <xTaskResumeAll+0x114>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	4a37      	ldr	r2, [pc, #220]	; (800b89c <xTaskResumeAll+0x114>)
 800b7be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7c0:	4b36      	ldr	r3, [pc, #216]	; (800b89c <xTaskResumeAll+0x114>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d162      	bne.n	800b88e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b7c8:	4b35      	ldr	r3, [pc, #212]	; (800b8a0 <xTaskResumeAll+0x118>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d05e      	beq.n	800b88e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7d0:	e02f      	b.n	800b832 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7d2:	4b34      	ldr	r3, [pc, #208]	; (800b8a4 <xTaskResumeAll+0x11c>)
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	3318      	adds	r3, #24
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fe ffd2 	bl	800a788 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe ffcd 	bl	800a788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f2:	4b2d      	ldr	r3, [pc, #180]	; (800b8a8 <xTaskResumeAll+0x120>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d903      	bls.n	800b802 <xTaskResumeAll+0x7a>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fe:	4a2a      	ldr	r2, [pc, #168]	; (800b8a8 <xTaskResumeAll+0x120>)
 800b800:	6013      	str	r3, [r2, #0]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b806:	4613      	mov	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4a27      	ldr	r2, [pc, #156]	; (800b8ac <xTaskResumeAll+0x124>)
 800b810:	441a      	add	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	3304      	adds	r3, #4
 800b816:	4619      	mov	r1, r3
 800b818:	4610      	mov	r0, r2
 800b81a:	f7fe ff58 	bl	800a6ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b822:	4b23      	ldr	r3, [pc, #140]	; (800b8b0 <xTaskResumeAll+0x128>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b828:	429a      	cmp	r2, r3
 800b82a:	d302      	bcc.n	800b832 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b82c:	4b21      	ldr	r3, [pc, #132]	; (800b8b4 <xTaskResumeAll+0x12c>)
 800b82e:	2201      	movs	r2, #1
 800b830:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b832:	4b1c      	ldr	r3, [pc, #112]	; (800b8a4 <xTaskResumeAll+0x11c>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1cb      	bne.n	800b7d2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b840:	f000 fb46 	bl	800bed0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b844:	4b1c      	ldr	r3, [pc, #112]	; (800b8b8 <xTaskResumeAll+0x130>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d010      	beq.n	800b872 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b850:	f000 f846 	bl	800b8e0 <xTaskIncrementTick>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d002      	beq.n	800b860 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b85a:	4b16      	ldr	r3, [pc, #88]	; (800b8b4 <xTaskResumeAll+0x12c>)
 800b85c:	2201      	movs	r2, #1
 800b85e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	3b01      	subs	r3, #1
 800b864:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1f1      	bne.n	800b850 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b86c:	4b12      	ldr	r3, [pc, #72]	; (800b8b8 <xTaskResumeAll+0x130>)
 800b86e:	2200      	movs	r2, #0
 800b870:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b872:	4b10      	ldr	r3, [pc, #64]	; (800b8b4 <xTaskResumeAll+0x12c>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d009      	beq.n	800b88e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b87a:	2301      	movs	r3, #1
 800b87c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b87e:	4b0f      	ldr	r3, [pc, #60]	; (800b8bc <xTaskResumeAll+0x134>)
 800b880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b884:	601a      	str	r2, [r3, #0]
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b88e:	f001 f8bb 	bl	800ca08 <vPortExitCritical>

	return xAlreadyYielded;
 800b892:	68bb      	ldr	r3, [r7, #8]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	20000c6c 	.word	0x20000c6c
 800b8a0:	20000c44 	.word	0x20000c44
 800b8a4:	20000c04 	.word	0x20000c04
 800b8a8:	20000c4c 	.word	0x20000c4c
 800b8ac:	20000774 	.word	0x20000774
 800b8b0:	20000770 	.word	0x20000770
 800b8b4:	20000c58 	.word	0x20000c58
 800b8b8:	20000c54 	.word	0x20000c54
 800b8bc:	e000ed04 	.word	0xe000ed04

0800b8c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b8c6:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <xTaskGetTickCount+0x1c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b8cc:	687b      	ldr	r3, [r7, #4]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	370c      	adds	r7, #12
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	20000c48 	.word	0x20000c48

0800b8e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8ea:	4b4e      	ldr	r3, [pc, #312]	; (800ba24 <xTaskIncrementTick+0x144>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f040 8088 	bne.w	800ba04 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b8f4:	4b4c      	ldr	r3, [pc, #304]	; (800ba28 <xTaskIncrementTick+0x148>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b8fc:	4a4a      	ldr	r2, [pc, #296]	; (800ba28 <xTaskIncrementTick+0x148>)
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d11f      	bne.n	800b948 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b908:	4b48      	ldr	r3, [pc, #288]	; (800ba2c <xTaskIncrementTick+0x14c>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d009      	beq.n	800b926 <xTaskIncrementTick+0x46>
 800b912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	603b      	str	r3, [r7, #0]
 800b924:	e7fe      	b.n	800b924 <xTaskIncrementTick+0x44>
 800b926:	4b41      	ldr	r3, [pc, #260]	; (800ba2c <xTaskIncrementTick+0x14c>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	4b40      	ldr	r3, [pc, #256]	; (800ba30 <xTaskIncrementTick+0x150>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a3e      	ldr	r2, [pc, #248]	; (800ba2c <xTaskIncrementTick+0x14c>)
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	4a3e      	ldr	r2, [pc, #248]	; (800ba30 <xTaskIncrementTick+0x150>)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	6013      	str	r3, [r2, #0]
 800b93a:	4b3e      	ldr	r3, [pc, #248]	; (800ba34 <xTaskIncrementTick+0x154>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	3301      	adds	r3, #1
 800b940:	4a3c      	ldr	r2, [pc, #240]	; (800ba34 <xTaskIncrementTick+0x154>)
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	f000 fac4 	bl	800bed0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b948:	4b3b      	ldr	r3, [pc, #236]	; (800ba38 <xTaskIncrementTick+0x158>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d349      	bcc.n	800b9e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b952:	4b36      	ldr	r3, [pc, #216]	; (800ba2c <xTaskIncrementTick+0x14c>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d104      	bne.n	800b966 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b95c:	4b36      	ldr	r3, [pc, #216]	; (800ba38 <xTaskIncrementTick+0x158>)
 800b95e:	f04f 32ff 	mov.w	r2, #4294967295
 800b962:	601a      	str	r2, [r3, #0]
					break;
 800b964:	e03f      	b.n	800b9e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b966:	4b31      	ldr	r3, [pc, #196]	; (800ba2c <xTaskIncrementTick+0x14c>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d203      	bcs.n	800b986 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b97e:	4a2e      	ldr	r2, [pc, #184]	; (800ba38 <xTaskIncrementTick+0x158>)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b984:	e02f      	b.n	800b9e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	3304      	adds	r3, #4
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fe fefc 	bl	800a788 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b994:	2b00      	cmp	r3, #0
 800b996:	d004      	beq.n	800b9a2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	3318      	adds	r3, #24
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fe fef3 	bl	800a788 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a6:	4b25      	ldr	r3, [pc, #148]	; (800ba3c <xTaskIncrementTick+0x15c>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d903      	bls.n	800b9b6 <xTaskIncrementTick+0xd6>
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b2:	4a22      	ldr	r2, [pc, #136]	; (800ba3c <xTaskIncrementTick+0x15c>)
 800b9b4:	6013      	str	r3, [r2, #0]
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4a1f      	ldr	r2, [pc, #124]	; (800ba40 <xTaskIncrementTick+0x160>)
 800b9c4:	441a      	add	r2, r3
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	f7fe fe7e 	bl	800a6ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d6:	4b1b      	ldr	r3, [pc, #108]	; (800ba44 <xTaskIncrementTick+0x164>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d3b8      	bcc.n	800b952 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9e4:	e7b5      	b.n	800b952 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9e6:	4b17      	ldr	r3, [pc, #92]	; (800ba44 <xTaskIncrementTick+0x164>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ec:	4914      	ldr	r1, [pc, #80]	; (800ba40 <xTaskIncrementTick+0x160>)
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	4413      	add	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	440b      	add	r3, r1
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d907      	bls.n	800ba0e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	617b      	str	r3, [r7, #20]
 800ba02:	e004      	b.n	800ba0e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ba04:	4b10      	ldr	r3, [pc, #64]	; (800ba48 <xTaskIncrementTick+0x168>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	4a0f      	ldr	r2, [pc, #60]	; (800ba48 <xTaskIncrementTick+0x168>)
 800ba0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ba0e:	4b0f      	ldr	r3, [pc, #60]	; (800ba4c <xTaskIncrementTick+0x16c>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800ba16:	2301      	movs	r3, #1
 800ba18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ba1a:	697b      	ldr	r3, [r7, #20]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3718      	adds	r7, #24
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	20000c6c 	.word	0x20000c6c
 800ba28:	20000c48 	.word	0x20000c48
 800ba2c:	20000bfc 	.word	0x20000bfc
 800ba30:	20000c00 	.word	0x20000c00
 800ba34:	20000c5c 	.word	0x20000c5c
 800ba38:	20000c64 	.word	0x20000c64
 800ba3c:	20000c4c 	.word	0x20000c4c
 800ba40:	20000774 	.word	0x20000774
 800ba44:	20000770 	.word	0x20000770
 800ba48:	20000c54 	.word	0x20000c54
 800ba4c:	20000c58 	.word	0x20000c58

0800ba50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba56:	4b27      	ldr	r3, [pc, #156]	; (800baf4 <vTaskSwitchContext+0xa4>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba5e:	4b26      	ldr	r3, [pc, #152]	; (800baf8 <vTaskSwitchContext+0xa8>)
 800ba60:	2201      	movs	r2, #1
 800ba62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba64:	e040      	b.n	800bae8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800ba66:	4b24      	ldr	r3, [pc, #144]	; (800baf8 <vTaskSwitchContext+0xa8>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba6c:	4b23      	ldr	r3, [pc, #140]	; (800bafc <vTaskSwitchContext+0xac>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	60fb      	str	r3, [r7, #12]
 800ba72:	e00f      	b.n	800ba94 <vTaskSwitchContext+0x44>
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d109      	bne.n	800ba8e <vTaskSwitchContext+0x3e>
 800ba7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	607b      	str	r3, [r7, #4]
 800ba8c:	e7fe      	b.n	800ba8c <vTaskSwitchContext+0x3c>
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3b01      	subs	r3, #1
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	491a      	ldr	r1, [pc, #104]	; (800bb00 <vTaskSwitchContext+0xb0>)
 800ba96:	68fa      	ldr	r2, [r7, #12]
 800ba98:	4613      	mov	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	440b      	add	r3, r1
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d0e5      	beq.n	800ba74 <vTaskSwitchContext+0x24>
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	4613      	mov	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4413      	add	r3, r2
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	4a13      	ldr	r2, [pc, #76]	; (800bb00 <vTaskSwitchContext+0xb0>)
 800bab4:	4413      	add	r3, r2
 800bab6:	60bb      	str	r3, [r7, #8]
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	685a      	ldr	r2, [r3, #4]
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	605a      	str	r2, [r3, #4]
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	685a      	ldr	r2, [r3, #4]
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	3308      	adds	r3, #8
 800baca:	429a      	cmp	r2, r3
 800bacc:	d104      	bne.n	800bad8 <vTaskSwitchContext+0x88>
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	605a      	str	r2, [r3, #4]
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	4a09      	ldr	r2, [pc, #36]	; (800bb04 <vTaskSwitchContext+0xb4>)
 800bae0:	6013      	str	r3, [r2, #0]
 800bae2:	4a06      	ldr	r2, [pc, #24]	; (800bafc <vTaskSwitchContext+0xac>)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6013      	str	r3, [r2, #0]
}
 800bae8:	bf00      	nop
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr
 800baf4:	20000c6c 	.word	0x20000c6c
 800baf8:	20000c58 	.word	0x20000c58
 800bafc:	20000c4c 	.word	0x20000c4c
 800bb00:	20000774 	.word	0x20000774
 800bb04:	20000770 	.word	0x20000770

0800bb08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d109      	bne.n	800bb2c <vTaskPlaceOnEventList+0x24>
 800bb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1c:	f383 8811 	msr	BASEPRI, r3
 800bb20:	f3bf 8f6f 	isb	sy
 800bb24:	f3bf 8f4f 	dsb	sy
 800bb28:	60fb      	str	r3, [r7, #12]
 800bb2a:	e7fe      	b.n	800bb2a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb2c:	4b07      	ldr	r3, [pc, #28]	; (800bb4c <vTaskPlaceOnEventList+0x44>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	3318      	adds	r3, #24
 800bb32:	4619      	mov	r1, r3
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7fe fdee 	bl	800a716 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb3a:	2101      	movs	r1, #1
 800bb3c:	6838      	ldr	r0, [r7, #0]
 800bb3e:	f000 fa71 	bl	800c024 <prvAddCurrentTaskToDelayedList>
}
 800bb42:	bf00      	nop
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20000770 	.word	0x20000770

0800bb50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d109      	bne.n	800bb76 <vTaskPlaceOnEventListRestricted+0x26>
 800bb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb66:	f383 8811 	msr	BASEPRI, r3
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	617b      	str	r3, [r7, #20]
 800bb74:	e7fe      	b.n	800bb74 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb76:	4b0a      	ldr	r3, [pc, #40]	; (800bba0 <vTaskPlaceOnEventListRestricted+0x50>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3318      	adds	r3, #24
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f7fe fda5 	bl	800a6ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d002      	beq.n	800bb90 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800bb8a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb90:	6879      	ldr	r1, [r7, #4]
 800bb92:	68b8      	ldr	r0, [r7, #8]
 800bb94:	f000 fa46 	bl	800c024 <prvAddCurrentTaskToDelayedList>
	}
 800bb98:	bf00      	nop
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	20000770 	.word	0x20000770

0800bba4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d109      	bne.n	800bbce <xTaskRemoveFromEventList+0x2a>
 800bbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	e7fe      	b.n	800bbcc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	3318      	adds	r3, #24
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fe fdd8 	bl	800a788 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbd8:	4b1d      	ldr	r3, [pc, #116]	; (800bc50 <xTaskRemoveFromEventList+0xac>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d11d      	bne.n	800bc1c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fe fdcf 	bl	800a788 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbee:	4b19      	ldr	r3, [pc, #100]	; (800bc54 <xTaskRemoveFromEventList+0xb0>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d903      	bls.n	800bbfe <xTaskRemoveFromEventList+0x5a>
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfa:	4a16      	ldr	r2, [pc, #88]	; (800bc54 <xTaskRemoveFromEventList+0xb0>)
 800bbfc:	6013      	str	r3, [r2, #0]
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc02:	4613      	mov	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4a13      	ldr	r2, [pc, #76]	; (800bc58 <xTaskRemoveFromEventList+0xb4>)
 800bc0c:	441a      	add	r2, r3
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	3304      	adds	r3, #4
 800bc12:	4619      	mov	r1, r3
 800bc14:	4610      	mov	r0, r2
 800bc16:	f7fe fd5a 	bl	800a6ce <vListInsertEnd>
 800bc1a:	e005      	b.n	800bc28 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	3318      	adds	r3, #24
 800bc20:	4619      	mov	r1, r3
 800bc22:	480e      	ldr	r0, [pc, #56]	; (800bc5c <xTaskRemoveFromEventList+0xb8>)
 800bc24:	f7fe fd53 	bl	800a6ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc2c:	4b0c      	ldr	r3, [pc, #48]	; (800bc60 <xTaskRemoveFromEventList+0xbc>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d905      	bls.n	800bc42 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc36:	2301      	movs	r3, #1
 800bc38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc3a:	4b0a      	ldr	r3, [pc, #40]	; (800bc64 <xTaskRemoveFromEventList+0xc0>)
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	601a      	str	r2, [r3, #0]
 800bc40:	e001      	b.n	800bc46 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bc42:	2300      	movs	r3, #0
 800bc44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc46:	697b      	ldr	r3, [r7, #20]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3718      	adds	r7, #24
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	20000c6c 	.word	0x20000c6c
 800bc54:	20000c4c 	.word	0x20000c4c
 800bc58:	20000774 	.word	0x20000774
 800bc5c:	20000c04 	.word	0x20000c04
 800bc60:	20000770 	.word	0x20000770
 800bc64:	20000c58 	.word	0x20000c58

0800bc68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc70:	4b06      	ldr	r3, [pc, #24]	; (800bc8c <vTaskInternalSetTimeOutState+0x24>)
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc78:	4b05      	ldr	r3, [pc, #20]	; (800bc90 <vTaskInternalSetTimeOutState+0x28>)
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	605a      	str	r2, [r3, #4]
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	20000c5c 	.word	0x20000c5c
 800bc90:	20000c48 	.word	0x20000c48

0800bc94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b088      	sub	sp, #32
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d109      	bne.n	800bcb8 <xTaskCheckForTimeOut+0x24>
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	613b      	str	r3, [r7, #16]
 800bcb6:	e7fe      	b.n	800bcb6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d109      	bne.n	800bcd2 <xTaskCheckForTimeOut+0x3e>
 800bcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	60fb      	str	r3, [r7, #12]
 800bcd0:	e7fe      	b.n	800bcd0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800bcd2:	f000 fe6b 	bl	800c9ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bcd6:	4b1d      	ldr	r3, [pc, #116]	; (800bd4c <xTaskCheckForTimeOut+0xb8>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcee:	d102      	bne.n	800bcf6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	61fb      	str	r3, [r7, #28]
 800bcf4:	e023      	b.n	800bd3e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	4b15      	ldr	r3, [pc, #84]	; (800bd50 <xTaskCheckForTimeOut+0xbc>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d007      	beq.n	800bd12 <xTaskCheckForTimeOut+0x7e>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	69ba      	ldr	r2, [r7, #24]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d302      	bcc.n	800bd12 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	61fb      	str	r3, [r7, #28]
 800bd10:	e015      	b.n	800bd3e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	697a      	ldr	r2, [r7, #20]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d20b      	bcs.n	800bd34 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	1ad2      	subs	r2, r2, r3
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f7ff ff9d 	bl	800bc68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	61fb      	str	r3, [r7, #28]
 800bd32:	e004      	b.n	800bd3e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	2200      	movs	r2, #0
 800bd38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd3e:	f000 fe63 	bl	800ca08 <vPortExitCritical>

	return xReturn;
 800bd42:	69fb      	ldr	r3, [r7, #28]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3720      	adds	r7, #32
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	20000c48 	.word	0x20000c48
 800bd50:	20000c5c 	.word	0x20000c5c

0800bd54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd54:	b480      	push	{r7}
 800bd56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd58:	4b03      	ldr	r3, [pc, #12]	; (800bd68 <vTaskMissedYield+0x14>)
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	601a      	str	r2, [r3, #0]
}
 800bd5e:	bf00      	nop
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	20000c58 	.word	0x20000c58

0800bd6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd74:	f000 f852 	bl	800be1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd78:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <prvIdleTask+0x28>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d9f9      	bls.n	800bd74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd80:	4b05      	ldr	r3, [pc, #20]	; (800bd98 <prvIdleTask+0x2c>)
 800bd82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd86:	601a      	str	r2, [r3, #0]
 800bd88:	f3bf 8f4f 	dsb	sy
 800bd8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd90:	e7f0      	b.n	800bd74 <prvIdleTask+0x8>
 800bd92:	bf00      	nop
 800bd94:	20000774 	.word	0x20000774
 800bd98:	e000ed04 	.word	0xe000ed04

0800bd9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bda2:	2300      	movs	r3, #0
 800bda4:	607b      	str	r3, [r7, #4]
 800bda6:	e00c      	b.n	800bdc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4413      	add	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4a12      	ldr	r2, [pc, #72]	; (800bdfc <prvInitialiseTaskLists+0x60>)
 800bdb4:	4413      	add	r3, r2
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe fc5c 	bl	800a674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	607b      	str	r3, [r7, #4]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b37      	cmp	r3, #55	; 0x37
 800bdc6:	d9ef      	bls.n	800bda8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bdc8:	480d      	ldr	r0, [pc, #52]	; (800be00 <prvInitialiseTaskLists+0x64>)
 800bdca:	f7fe fc53 	bl	800a674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bdce:	480d      	ldr	r0, [pc, #52]	; (800be04 <prvInitialiseTaskLists+0x68>)
 800bdd0:	f7fe fc50 	bl	800a674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bdd4:	480c      	ldr	r0, [pc, #48]	; (800be08 <prvInitialiseTaskLists+0x6c>)
 800bdd6:	f7fe fc4d 	bl	800a674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bdda:	480c      	ldr	r0, [pc, #48]	; (800be0c <prvInitialiseTaskLists+0x70>)
 800bddc:	f7fe fc4a 	bl	800a674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bde0:	480b      	ldr	r0, [pc, #44]	; (800be10 <prvInitialiseTaskLists+0x74>)
 800bde2:	f7fe fc47 	bl	800a674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bde6:	4b0b      	ldr	r3, [pc, #44]	; (800be14 <prvInitialiseTaskLists+0x78>)
 800bde8:	4a05      	ldr	r2, [pc, #20]	; (800be00 <prvInitialiseTaskLists+0x64>)
 800bdea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bdec:	4b0a      	ldr	r3, [pc, #40]	; (800be18 <prvInitialiseTaskLists+0x7c>)
 800bdee:	4a05      	ldr	r2, [pc, #20]	; (800be04 <prvInitialiseTaskLists+0x68>)
 800bdf0:	601a      	str	r2, [r3, #0]
}
 800bdf2:	bf00      	nop
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	20000774 	.word	0x20000774
 800be00:	20000bd4 	.word	0x20000bd4
 800be04:	20000be8 	.word	0x20000be8
 800be08:	20000c04 	.word	0x20000c04
 800be0c:	20000c18 	.word	0x20000c18
 800be10:	20000c30 	.word	0x20000c30
 800be14:	20000bfc 	.word	0x20000bfc
 800be18:	20000c00 	.word	0x20000c00

0800be1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be22:	e019      	b.n	800be58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be24:	f000 fdc2 	bl	800c9ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be28:	4b0f      	ldr	r3, [pc, #60]	; (800be68 <prvCheckTasksWaitingTermination+0x4c>)
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	3304      	adds	r3, #4
 800be34:	4618      	mov	r0, r3
 800be36:	f7fe fca7 	bl	800a788 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be3a:	4b0c      	ldr	r3, [pc, #48]	; (800be6c <prvCheckTasksWaitingTermination+0x50>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3b01      	subs	r3, #1
 800be40:	4a0a      	ldr	r2, [pc, #40]	; (800be6c <prvCheckTasksWaitingTermination+0x50>)
 800be42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be44:	4b0a      	ldr	r3, [pc, #40]	; (800be70 <prvCheckTasksWaitingTermination+0x54>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	3b01      	subs	r3, #1
 800be4a:	4a09      	ldr	r2, [pc, #36]	; (800be70 <prvCheckTasksWaitingTermination+0x54>)
 800be4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be4e:	f000 fddb 	bl	800ca08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f80e 	bl	800be74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be58:	4b05      	ldr	r3, [pc, #20]	; (800be70 <prvCheckTasksWaitingTermination+0x54>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1e1      	bne.n	800be24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be60:	bf00      	nop
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	20000c18 	.word	0x20000c18
 800be6c:	20000c44 	.word	0x20000c44
 800be70:	20000c2c 	.word	0x20000c2c

0800be74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be82:	2b00      	cmp	r3, #0
 800be84:	d108      	bne.n	800be98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 ff6a 	bl	800cd64 <vPortFree>
				vPortFree( pxTCB );
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 ff67 	bl	800cd64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be96:	e017      	b.n	800bec8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d103      	bne.n	800beaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 ff5e 	bl	800cd64 <vPortFree>
	}
 800bea8:	e00e      	b.n	800bec8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	d009      	beq.n	800bec8 <prvDeleteTCB+0x54>
 800beb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	60fb      	str	r3, [r7, #12]
 800bec6:	e7fe      	b.n	800bec6 <prvDeleteTCB+0x52>
	}
 800bec8:	bf00      	nop
 800beca:	3710      	adds	r7, #16
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bed6:	4b0c      	ldr	r3, [pc, #48]	; (800bf08 <prvResetNextTaskUnblockTime+0x38>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d104      	bne.n	800beea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bee0:	4b0a      	ldr	r3, [pc, #40]	; (800bf0c <prvResetNextTaskUnblockTime+0x3c>)
 800bee2:	f04f 32ff 	mov.w	r2, #4294967295
 800bee6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bee8:	e008      	b.n	800befc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beea:	4b07      	ldr	r3, [pc, #28]	; (800bf08 <prvResetNextTaskUnblockTime+0x38>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	4a04      	ldr	r2, [pc, #16]	; (800bf0c <prvResetNextTaskUnblockTime+0x3c>)
 800befa:	6013      	str	r3, [r2, #0]
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr
 800bf08:	20000bfc 	.word	0x20000bfc
 800bf0c:	20000c64 	.word	0x20000c64

0800bf10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf16:	4b0b      	ldr	r3, [pc, #44]	; (800bf44 <xTaskGetSchedulerState+0x34>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d102      	bne.n	800bf24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	607b      	str	r3, [r7, #4]
 800bf22:	e008      	b.n	800bf36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf24:	4b08      	ldr	r3, [pc, #32]	; (800bf48 <xTaskGetSchedulerState+0x38>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d102      	bne.n	800bf32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	607b      	str	r3, [r7, #4]
 800bf30:	e001      	b.n	800bf36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf32:	2300      	movs	r3, #0
 800bf34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf36:	687b      	ldr	r3, [r7, #4]
	}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	370c      	adds	r7, #12
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr
 800bf44:	20000c50 	.word	0x20000c50
 800bf48:	20000c6c 	.word	0x20000c6c

0800bf4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b086      	sub	sp, #24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d054      	beq.n	800c00c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bf62:	4b2d      	ldr	r3, [pc, #180]	; (800c018 <xTaskPriorityDisinherit+0xcc>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d009      	beq.n	800bf80 <xTaskPriorityDisinherit+0x34>
 800bf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf70:	f383 8811 	msr	BASEPRI, r3
 800bf74:	f3bf 8f6f 	isb	sy
 800bf78:	f3bf 8f4f 	dsb	sy
 800bf7c:	60fb      	str	r3, [r7, #12]
 800bf7e:	e7fe      	b.n	800bf7e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d109      	bne.n	800bf9c <xTaskPriorityDisinherit+0x50>
 800bf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	60bb      	str	r3, [r7, #8]
 800bf9a:	e7fe      	b.n	800bf9a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfa0:	1e5a      	subs	r2, r3, #1
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d02c      	beq.n	800c00c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d128      	bne.n	800c00c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fe fbe2 	bl	800a788 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfdc:	4b0f      	ldr	r3, [pc, #60]	; (800c01c <xTaskPriorityDisinherit+0xd0>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d903      	bls.n	800bfec <xTaskPriorityDisinherit+0xa0>
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe8:	4a0c      	ldr	r2, [pc, #48]	; (800c01c <xTaskPriorityDisinherit+0xd0>)
 800bfea:	6013      	str	r3, [r2, #0]
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff0:	4613      	mov	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	4413      	add	r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	4a09      	ldr	r2, [pc, #36]	; (800c020 <xTaskPriorityDisinherit+0xd4>)
 800bffa:	441a      	add	r2, r3
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	3304      	adds	r3, #4
 800c000:	4619      	mov	r1, r3
 800c002:	4610      	mov	r0, r2
 800c004:	f7fe fb63 	bl	800a6ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c008:	2301      	movs	r3, #1
 800c00a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c00c:	697b      	ldr	r3, [r7, #20]
	}
 800c00e:	4618      	mov	r0, r3
 800c010:	3718      	adds	r7, #24
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	20000770 	.word	0x20000770
 800c01c:	20000c4c 	.word	0x20000c4c
 800c020:	20000774 	.word	0x20000774

0800c024 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c02e:	4b21      	ldr	r3, [pc, #132]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c034:	4b20      	ldr	r3, [pc, #128]	; (800c0b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	3304      	adds	r3, #4
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fe fba4 	bl	800a788 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c046:	d10a      	bne.n	800c05e <prvAddCurrentTaskToDelayedList+0x3a>
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d007      	beq.n	800c05e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c04e:	4b1a      	ldr	r3, [pc, #104]	; (800c0b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	3304      	adds	r3, #4
 800c054:	4619      	mov	r1, r3
 800c056:	4819      	ldr	r0, [pc, #100]	; (800c0bc <prvAddCurrentTaskToDelayedList+0x98>)
 800c058:	f7fe fb39 	bl	800a6ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c05c:	e026      	b.n	800c0ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4413      	add	r3, r2
 800c064:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c066:	4b14      	ldr	r3, [pc, #80]	; (800c0b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	429a      	cmp	r2, r3
 800c074:	d209      	bcs.n	800c08a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c076:	4b12      	ldr	r3, [pc, #72]	; (800c0c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	4b0f      	ldr	r3, [pc, #60]	; (800c0b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	3304      	adds	r3, #4
 800c080:	4619      	mov	r1, r3
 800c082:	4610      	mov	r0, r2
 800c084:	f7fe fb47 	bl	800a716 <vListInsert>
}
 800c088:	e010      	b.n	800c0ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c08a:	4b0e      	ldr	r3, [pc, #56]	; (800c0c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	4b0a      	ldr	r3, [pc, #40]	; (800c0b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3304      	adds	r3, #4
 800c094:	4619      	mov	r1, r3
 800c096:	4610      	mov	r0, r2
 800c098:	f7fe fb3d 	bl	800a716 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c09c:	4b0a      	ldr	r3, [pc, #40]	; (800c0c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d202      	bcs.n	800c0ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c0a6:	4a08      	ldr	r2, [pc, #32]	; (800c0c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	6013      	str	r3, [r2, #0]
}
 800c0ac:	bf00      	nop
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	20000c48 	.word	0x20000c48
 800c0b8:	20000770 	.word	0x20000770
 800c0bc:	20000c30 	.word	0x20000c30
 800c0c0:	20000c00 	.word	0x20000c00
 800c0c4:	20000bfc 	.word	0x20000bfc
 800c0c8:	20000c64 	.word	0x20000c64

0800c0cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b08a      	sub	sp, #40	; 0x28
 800c0d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c0d6:	f000 faff 	bl	800c6d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c0da:	4b1c      	ldr	r3, [pc, #112]	; (800c14c <xTimerCreateTimerTask+0x80>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d021      	beq.n	800c126 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c0ea:	1d3a      	adds	r2, r7, #4
 800c0ec:	f107 0108 	add.w	r1, r7, #8
 800c0f0:	f107 030c 	add.w	r3, r7, #12
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7fe faa3 	bl	800a640 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c0fa:	6879      	ldr	r1, [r7, #4]
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	9202      	str	r2, [sp, #8]
 800c102:	9301      	str	r3, [sp, #4]
 800c104:	2302      	movs	r3, #2
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	2300      	movs	r3, #0
 800c10a:	460a      	mov	r2, r1
 800c10c:	4910      	ldr	r1, [pc, #64]	; (800c150 <xTimerCreateTimerTask+0x84>)
 800c10e:	4811      	ldr	r0, [pc, #68]	; (800c154 <xTimerCreateTimerTask+0x88>)
 800c110:	f7ff f8f6 	bl	800b300 <xTaskCreateStatic>
 800c114:	4602      	mov	r2, r0
 800c116:	4b10      	ldr	r3, [pc, #64]	; (800c158 <xTimerCreateTimerTask+0x8c>)
 800c118:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c11a:	4b0f      	ldr	r3, [pc, #60]	; (800c158 <xTimerCreateTimerTask+0x8c>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d001      	beq.n	800c126 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c122:	2301      	movs	r3, #1
 800c124:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d109      	bne.n	800c140 <xTimerCreateTimerTask+0x74>
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	613b      	str	r3, [r7, #16]
 800c13e:	e7fe      	b.n	800c13e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c140:	697b      	ldr	r3, [r7, #20]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3718      	adds	r7, #24
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	20000ca0 	.word	0x20000ca0
 800c150:	0800eaa8 	.word	0x0800eaa8
 800c154:	0800c28d 	.word	0x0800c28d
 800c158:	20000ca4 	.word	0x20000ca4

0800c15c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b08a      	sub	sp, #40	; 0x28
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c16a:	2300      	movs	r3, #0
 800c16c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d109      	bne.n	800c188 <xTimerGenericCommand+0x2c>
 800c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c178:	f383 8811 	msr	BASEPRI, r3
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	623b      	str	r3, [r7, #32]
 800c186:	e7fe      	b.n	800c186 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c188:	4b19      	ldr	r3, [pc, #100]	; (800c1f0 <xTimerGenericCommand+0x94>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d02a      	beq.n	800c1e6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2b05      	cmp	r3, #5
 800c1a0:	dc18      	bgt.n	800c1d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c1a2:	f7ff feb5 	bl	800bf10 <xTaskGetSchedulerState>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b02      	cmp	r3, #2
 800c1aa:	d109      	bne.n	800c1c0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c1ac:	4b10      	ldr	r3, [pc, #64]	; (800c1f0 <xTimerGenericCommand+0x94>)
 800c1ae:	6818      	ldr	r0, [r3, #0]
 800c1b0:	f107 0110 	add.w	r1, r7, #16
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1b8:	f7fe fc4e 	bl	800aa58 <xQueueGenericSend>
 800c1bc:	6278      	str	r0, [r7, #36]	; 0x24
 800c1be:	e012      	b.n	800c1e6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c1c0:	4b0b      	ldr	r3, [pc, #44]	; (800c1f0 <xTimerGenericCommand+0x94>)
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	f107 0110 	add.w	r1, r7, #16
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f7fe fc44 	bl	800aa58 <xQueueGenericSend>
 800c1d0:	6278      	str	r0, [r7, #36]	; 0x24
 800c1d2:	e008      	b.n	800c1e6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c1d4:	4b06      	ldr	r3, [pc, #24]	; (800c1f0 <xTimerGenericCommand+0x94>)
 800c1d6:	6818      	ldr	r0, [r3, #0]
 800c1d8:	f107 0110 	add.w	r1, r7, #16
 800c1dc:	2300      	movs	r3, #0
 800c1de:	683a      	ldr	r2, [r7, #0]
 800c1e0:	f7fe fd34 	bl	800ac4c <xQueueGenericSendFromISR>
 800c1e4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3728      	adds	r7, #40	; 0x28
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	20000ca0 	.word	0x20000ca0

0800c1f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b088      	sub	sp, #32
 800c1f8:	af02      	add	r7, sp, #8
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1fe:	4b22      	ldr	r3, [pc, #136]	; (800c288 <prvProcessExpiredTimer+0x94>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	3304      	adds	r3, #4
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fe fabb 	bl	800a788 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c218:	f003 0304 	and.w	r3, r3, #4
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d021      	beq.n	800c264 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	699a      	ldr	r2, [r3, #24]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	18d1      	adds	r1, r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	6978      	ldr	r0, [r7, #20]
 800c22e:	f000 f8d1 	bl	800c3d4 <prvInsertTimerInActiveList>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d01e      	beq.n	800c276 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c238:	2300      	movs	r3, #0
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	2300      	movs	r3, #0
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	2100      	movs	r1, #0
 800c242:	6978      	ldr	r0, [r7, #20]
 800c244:	f7ff ff8a 	bl	800c15c <xTimerGenericCommand>
 800c248:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d112      	bne.n	800c276 <prvProcessExpiredTimer+0x82>
 800c250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	60fb      	str	r3, [r7, #12]
 800c262:	e7fe      	b.n	800c262 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c26a:	f023 0301 	bic.w	r3, r3, #1
 800c26e:	b2da      	uxtb	r2, r3
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	6978      	ldr	r0, [r7, #20]
 800c27c:	4798      	blx	r3
}
 800c27e:	bf00      	nop
 800c280:	3718      	adds	r7, #24
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	20000c98 	.word	0x20000c98

0800c28c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c294:	f107 0308 	add.w	r3, r7, #8
 800c298:	4618      	mov	r0, r3
 800c29a:	f000 f857 	bl	800c34c <prvGetNextExpireTime>
 800c29e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f000 f803 	bl	800c2b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c2aa:	f000 f8d5 	bl	800c458 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c2ae:	e7f1      	b.n	800c294 <prvTimerTask+0x8>

0800c2b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c2ba:	f7ff fa57 	bl	800b76c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2be:	f107 0308 	add.w	r3, r7, #8
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f000 f866 	bl	800c394 <prvSampleTimeNow>
 800c2c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d130      	bne.n	800c332 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10a      	bne.n	800c2ec <prvProcessTimerOrBlockTask+0x3c>
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d806      	bhi.n	800c2ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c2de:	f7ff fa53 	bl	800b788 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2e2:	68f9      	ldr	r1, [r7, #12]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f7ff ff85 	bl	800c1f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2ea:	e024      	b.n	800c336 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d008      	beq.n	800c304 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2f2:	4b13      	ldr	r3, [pc, #76]	; (800c340 <prvProcessTimerOrBlockTask+0x90>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d101      	bne.n	800c300 <prvProcessTimerOrBlockTask+0x50>
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e000      	b.n	800c302 <prvProcessTimerOrBlockTask+0x52>
 800c300:	2300      	movs	r3, #0
 800c302:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c304:	4b0f      	ldr	r3, [pc, #60]	; (800c344 <prvProcessTimerOrBlockTask+0x94>)
 800c306:	6818      	ldr	r0, [r3, #0]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	1ad3      	subs	r3, r2, r3
 800c30e:	683a      	ldr	r2, [r7, #0]
 800c310:	4619      	mov	r1, r3
 800c312:	f7fe ffc1 	bl	800b298 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c316:	f7ff fa37 	bl	800b788 <xTaskResumeAll>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10a      	bne.n	800c336 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c320:	4b09      	ldr	r3, [pc, #36]	; (800c348 <prvProcessTimerOrBlockTask+0x98>)
 800c322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c326:	601a      	str	r2, [r3, #0]
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	f3bf 8f6f 	isb	sy
}
 800c330:	e001      	b.n	800c336 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c332:	f7ff fa29 	bl	800b788 <xTaskResumeAll>
}
 800c336:	bf00      	nop
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	20000c9c 	.word	0x20000c9c
 800c344:	20000ca0 	.word	0x20000ca0
 800c348:	e000ed04 	.word	0xe000ed04

0800c34c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c354:	4b0e      	ldr	r3, [pc, #56]	; (800c390 <prvGetNextExpireTime+0x44>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <prvGetNextExpireTime+0x16>
 800c35e:	2201      	movs	r2, #1
 800c360:	e000      	b.n	800c364 <prvGetNextExpireTime+0x18>
 800c362:	2200      	movs	r2, #0
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d105      	bne.n	800c37c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c370:	4b07      	ldr	r3, [pc, #28]	; (800c390 <prvGetNextExpireTime+0x44>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	60fb      	str	r3, [r7, #12]
 800c37a:	e001      	b.n	800c380 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c37c:	2300      	movs	r3, #0
 800c37e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c380:	68fb      	ldr	r3, [r7, #12]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	20000c98 	.word	0x20000c98

0800c394 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c39c:	f7ff fa90 	bl	800b8c0 <xTaskGetTickCount>
 800c3a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c3a2:	4b0b      	ldr	r3, [pc, #44]	; (800c3d0 <prvSampleTimeNow+0x3c>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d205      	bcs.n	800c3b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c3ac:	f000 f930 	bl	800c610 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	601a      	str	r2, [r3, #0]
 800c3b6:	e002      	b.n	800c3be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c3be:	4a04      	ldr	r2, [pc, #16]	; (800c3d0 <prvSampleTimeNow+0x3c>)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	20000ca8 	.word	0x20000ca8

0800c3d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b086      	sub	sp, #24
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	607a      	str	r2, [r7, #4]
 800c3e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d812      	bhi.n	800c420 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	1ad2      	subs	r2, r2, r3
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	699b      	ldr	r3, [r3, #24]
 800c404:	429a      	cmp	r2, r3
 800c406:	d302      	bcc.n	800c40e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c408:	2301      	movs	r3, #1
 800c40a:	617b      	str	r3, [r7, #20]
 800c40c:	e01b      	b.n	800c446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c40e:	4b10      	ldr	r3, [pc, #64]	; (800c450 <prvInsertTimerInActiveList+0x7c>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	3304      	adds	r3, #4
 800c416:	4619      	mov	r1, r3
 800c418:	4610      	mov	r0, r2
 800c41a:	f7fe f97c 	bl	800a716 <vListInsert>
 800c41e:	e012      	b.n	800c446 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	429a      	cmp	r2, r3
 800c426:	d206      	bcs.n	800c436 <prvInsertTimerInActiveList+0x62>
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d302      	bcc.n	800c436 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c430:	2301      	movs	r3, #1
 800c432:	617b      	str	r3, [r7, #20]
 800c434:	e007      	b.n	800c446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c436:	4b07      	ldr	r3, [pc, #28]	; (800c454 <prvInsertTimerInActiveList+0x80>)
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3304      	adds	r3, #4
 800c43e:	4619      	mov	r1, r3
 800c440:	4610      	mov	r0, r2
 800c442:	f7fe f968 	bl	800a716 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c446:	697b      	ldr	r3, [r7, #20]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3718      	adds	r7, #24
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	20000c9c 	.word	0x20000c9c
 800c454:	20000c98 	.word	0x20000c98

0800c458 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b08e      	sub	sp, #56	; 0x38
 800c45c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c45e:	e0c6      	b.n	800c5ee <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	da17      	bge.n	800c496 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c466:	1d3b      	adds	r3, r7, #4
 800c468:	3304      	adds	r3, #4
 800c46a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d109      	bne.n	800c486 <prvProcessReceivedCommands+0x2e>
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	61fb      	str	r3, [r7, #28]
 800c484:	e7fe      	b.n	800c484 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c48c:	6850      	ldr	r0, [r2, #4]
 800c48e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c490:	6892      	ldr	r2, [r2, #8]
 800c492:	4611      	mov	r1, r2
 800c494:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f2c0 80a7 	blt.w	800c5ec <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a4:	695b      	ldr	r3, [r3, #20]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d004      	beq.n	800c4b4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ac:	3304      	adds	r3, #4
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fe f96a 	bl	800a788 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4b4:	463b      	mov	r3, r7
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7ff ff6c 	bl	800c394 <prvSampleTimeNow>
 800c4bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b09      	cmp	r3, #9
 800c4c2:	f200 8094 	bhi.w	800c5ee <prvProcessReceivedCommands+0x196>
 800c4c6:	a201      	add	r2, pc, #4	; (adr r2, 800c4cc <prvProcessReceivedCommands+0x74>)
 800c4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4cc:	0800c4f5 	.word	0x0800c4f5
 800c4d0:	0800c4f5 	.word	0x0800c4f5
 800c4d4:	0800c4f5 	.word	0x0800c4f5
 800c4d8:	0800c567 	.word	0x0800c567
 800c4dc:	0800c57b 	.word	0x0800c57b
 800c4e0:	0800c5c3 	.word	0x0800c5c3
 800c4e4:	0800c4f5 	.word	0x0800c4f5
 800c4e8:	0800c4f5 	.word	0x0800c4f5
 800c4ec:	0800c567 	.word	0x0800c567
 800c4f0:	0800c57b 	.word	0x0800c57b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4fa:	f043 0301 	orr.w	r3, r3, #1
 800c4fe:	b2da      	uxtb	r2, r3
 800c500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	18d1      	adds	r1, r2, r3
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c514:	f7ff ff5e 	bl	800c3d4 <prvInsertTimerInActiveList>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d067      	beq.n	800c5ee <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c520:	6a1b      	ldr	r3, [r3, #32]
 800c522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c524:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c52c:	f003 0304 	and.w	r3, r3, #4
 800c530:	2b00      	cmp	r3, #0
 800c532:	d05c      	beq.n	800c5ee <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c538:	699b      	ldr	r3, [r3, #24]
 800c53a:	441a      	add	r2, r3
 800c53c:	2300      	movs	r3, #0
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	2300      	movs	r3, #0
 800c542:	2100      	movs	r1, #0
 800c544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c546:	f7ff fe09 	bl	800c15c <xTimerGenericCommand>
 800c54a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c54c:	6a3b      	ldr	r3, [r7, #32]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d14d      	bne.n	800c5ee <prvProcessReceivedCommands+0x196>
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	61bb      	str	r3, [r7, #24]
 800c564:	e7fe      	b.n	800c564 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c56c:	f023 0301 	bic.w	r3, r3, #1
 800c570:	b2da      	uxtb	r2, r3
 800c572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c574:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c578:	e039      	b.n	800c5ee <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c580:	f043 0301 	orr.w	r3, r3, #1
 800c584:	b2da      	uxtb	r2, r3
 800c586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c588:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c590:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	699b      	ldr	r3, [r3, #24]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d109      	bne.n	800c5ae <prvProcessReceivedCommands+0x156>
 800c59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	617b      	str	r3, [r7, #20]
 800c5ac:	e7fe      	b.n	800c5ac <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b0:	699a      	ldr	r2, [r3, #24]
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b4:	18d1      	adds	r1, r2, r3
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5bc:	f7ff ff0a 	bl	800c3d4 <prvInsertTimerInActiveList>
					break;
 800c5c0:	e015      	b.n	800c5ee <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5c8:	f003 0302 	and.w	r3, r3, #2
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d103      	bne.n	800c5d8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800c5d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5d2:	f000 fbc7 	bl	800cd64 <vPortFree>
 800c5d6:	e00a      	b.n	800c5ee <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5de:	f023 0301 	bic.w	r3, r3, #1
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5ea:	e000      	b.n	800c5ee <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c5ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5ee:	4b07      	ldr	r3, [pc, #28]	; (800c60c <prvProcessReceivedCommands+0x1b4>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	1d39      	adds	r1, r7, #4
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fe fbbc 	bl	800ad74 <xQueueReceive>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	f47f af2e 	bne.w	800c460 <prvProcessReceivedCommands+0x8>
	}
}
 800c604:	bf00      	nop
 800c606:	3730      	adds	r7, #48	; 0x30
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	20000ca0 	.word	0x20000ca0

0800c610 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b088      	sub	sp, #32
 800c614:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c616:	e047      	b.n	800c6a8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c618:	4b2d      	ldr	r3, [pc, #180]	; (800c6d0 <prvSwitchTimerLists+0xc0>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c622:	4b2b      	ldr	r3, [pc, #172]	; (800c6d0 <prvSwitchTimerLists+0xc0>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	3304      	adds	r3, #4
 800c630:	4618      	mov	r0, r3
 800c632:	f7fe f8a9 	bl	800a788 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6a1b      	ldr	r3, [r3, #32]
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c644:	f003 0304 	and.w	r3, r3, #4
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d02d      	beq.n	800c6a8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	693a      	ldr	r2, [r7, #16]
 800c652:	4413      	add	r3, r2
 800c654:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d90e      	bls.n	800c67c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	68ba      	ldr	r2, [r7, #8]
 800c662:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c66a:	4b19      	ldr	r3, [pc, #100]	; (800c6d0 <prvSwitchTimerLists+0xc0>)
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	3304      	adds	r3, #4
 800c672:	4619      	mov	r1, r3
 800c674:	4610      	mov	r0, r2
 800c676:	f7fe f84e 	bl	800a716 <vListInsert>
 800c67a:	e015      	b.n	800c6a8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c67c:	2300      	movs	r3, #0
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	2300      	movs	r3, #0
 800c682:	693a      	ldr	r2, [r7, #16]
 800c684:	2100      	movs	r1, #0
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f7ff fd68 	bl	800c15c <xTimerGenericCommand>
 800c68c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d109      	bne.n	800c6a8 <prvSwitchTimerLists+0x98>
 800c694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c698:	f383 8811 	msr	BASEPRI, r3
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	603b      	str	r3, [r7, #0]
 800c6a6:	e7fe      	b.n	800c6a6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6a8:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <prvSwitchTimerLists+0xc0>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1b2      	bne.n	800c618 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c6b2:	4b07      	ldr	r3, [pc, #28]	; (800c6d0 <prvSwitchTimerLists+0xc0>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c6b8:	4b06      	ldr	r3, [pc, #24]	; (800c6d4 <prvSwitchTimerLists+0xc4>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a04      	ldr	r2, [pc, #16]	; (800c6d0 <prvSwitchTimerLists+0xc0>)
 800c6be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c6c0:	4a04      	ldr	r2, [pc, #16]	; (800c6d4 <prvSwitchTimerLists+0xc4>)
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	6013      	str	r3, [r2, #0]
}
 800c6c6:	bf00      	nop
 800c6c8:	3718      	adds	r7, #24
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	20000c98 	.word	0x20000c98
 800c6d4:	20000c9c 	.word	0x20000c9c

0800c6d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6de:	f000 f965 	bl	800c9ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6e2:	4b15      	ldr	r3, [pc, #84]	; (800c738 <prvCheckForValidListAndQueue+0x60>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d120      	bne.n	800c72c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6ea:	4814      	ldr	r0, [pc, #80]	; (800c73c <prvCheckForValidListAndQueue+0x64>)
 800c6ec:	f7fd ffc2 	bl	800a674 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6f0:	4813      	ldr	r0, [pc, #76]	; (800c740 <prvCheckForValidListAndQueue+0x68>)
 800c6f2:	f7fd ffbf 	bl	800a674 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6f6:	4b13      	ldr	r3, [pc, #76]	; (800c744 <prvCheckForValidListAndQueue+0x6c>)
 800c6f8:	4a10      	ldr	r2, [pc, #64]	; (800c73c <prvCheckForValidListAndQueue+0x64>)
 800c6fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6fc:	4b12      	ldr	r3, [pc, #72]	; (800c748 <prvCheckForValidListAndQueue+0x70>)
 800c6fe:	4a10      	ldr	r2, [pc, #64]	; (800c740 <prvCheckForValidListAndQueue+0x68>)
 800c700:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c702:	2300      	movs	r3, #0
 800c704:	9300      	str	r3, [sp, #0]
 800c706:	4b11      	ldr	r3, [pc, #68]	; (800c74c <prvCheckForValidListAndQueue+0x74>)
 800c708:	4a11      	ldr	r2, [pc, #68]	; (800c750 <prvCheckForValidListAndQueue+0x78>)
 800c70a:	2110      	movs	r1, #16
 800c70c:	200a      	movs	r0, #10
 800c70e:	f7fe f8cd 	bl	800a8ac <xQueueGenericCreateStatic>
 800c712:	4602      	mov	r2, r0
 800c714:	4b08      	ldr	r3, [pc, #32]	; (800c738 <prvCheckForValidListAndQueue+0x60>)
 800c716:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c718:	4b07      	ldr	r3, [pc, #28]	; (800c738 <prvCheckForValidListAndQueue+0x60>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d005      	beq.n	800c72c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c720:	4b05      	ldr	r3, [pc, #20]	; (800c738 <prvCheckForValidListAndQueue+0x60>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	490b      	ldr	r1, [pc, #44]	; (800c754 <prvCheckForValidListAndQueue+0x7c>)
 800c726:	4618      	mov	r0, r3
 800c728:	f7fe fd8e 	bl	800b248 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c72c:	f000 f96c 	bl	800ca08 <vPortExitCritical>
}
 800c730:	bf00      	nop
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	20000ca0 	.word	0x20000ca0
 800c73c:	20000c70 	.word	0x20000c70
 800c740:	20000c84 	.word	0x20000c84
 800c744:	20000c98 	.word	0x20000c98
 800c748:	20000c9c 	.word	0x20000c9c
 800c74c:	20000d4c 	.word	0x20000d4c
 800c750:	20000cac 	.word	0x20000cac
 800c754:	0800eab0 	.word	0x0800eab0

0800c758 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	3b04      	subs	r3, #4
 800c768:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	3b04      	subs	r3, #4
 800c776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	f023 0201 	bic.w	r2, r3, #1
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3b04      	subs	r3, #4
 800c786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c788:	4a0c      	ldr	r2, [pc, #48]	; (800c7bc <pxPortInitialiseStack+0x64>)
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3b14      	subs	r3, #20
 800c792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	3b04      	subs	r3, #4
 800c79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f06f 0202 	mvn.w	r2, #2
 800c7a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	3b20      	subs	r3, #32
 800c7ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr
 800c7bc:	0800c7c1 	.word	0x0800c7c1

0800c7c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7ca:	4b11      	ldr	r3, [pc, #68]	; (800c810 <prvTaskExitError+0x50>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d2:	d009      	beq.n	800c7e8 <prvTaskExitError+0x28>
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	60fb      	str	r3, [r7, #12]
 800c7e6:	e7fe      	b.n	800c7e6 <prvTaskExitError+0x26>
 800c7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ec:	f383 8811 	msr	BASEPRI, r3
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7fa:	bf00      	nop
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d0fc      	beq.n	800c7fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c802:	bf00      	nop
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	20000028 	.word	0x20000028
	...

0800c820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c820:	4b07      	ldr	r3, [pc, #28]	; (800c840 <pxCurrentTCBConst2>)
 800c822:	6819      	ldr	r1, [r3, #0]
 800c824:	6808      	ldr	r0, [r1, #0]
 800c826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82a:	f380 8809 	msr	PSP, r0
 800c82e:	f3bf 8f6f 	isb	sy
 800c832:	f04f 0000 	mov.w	r0, #0
 800c836:	f380 8811 	msr	BASEPRI, r0
 800c83a:	4770      	bx	lr
 800c83c:	f3af 8000 	nop.w

0800c840 <pxCurrentTCBConst2>:
 800c840:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c844:	bf00      	nop
 800c846:	bf00      	nop

0800c848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c848:	4808      	ldr	r0, [pc, #32]	; (800c86c <prvPortStartFirstTask+0x24>)
 800c84a:	6800      	ldr	r0, [r0, #0]
 800c84c:	6800      	ldr	r0, [r0, #0]
 800c84e:	f380 8808 	msr	MSP, r0
 800c852:	f04f 0000 	mov.w	r0, #0
 800c856:	f380 8814 	msr	CONTROL, r0
 800c85a:	b662      	cpsie	i
 800c85c:	b661      	cpsie	f
 800c85e:	f3bf 8f4f 	dsb	sy
 800c862:	f3bf 8f6f 	isb	sy
 800c866:	df00      	svc	0
 800c868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c86a:	bf00      	nop
 800c86c:	e000ed08 	.word	0xe000ed08

0800c870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b086      	sub	sp, #24
 800c874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c876:	4b44      	ldr	r3, [pc, #272]	; (800c988 <xPortStartScheduler+0x118>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a44      	ldr	r2, [pc, #272]	; (800c98c <xPortStartScheduler+0x11c>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d109      	bne.n	800c894 <xPortStartScheduler+0x24>
 800c880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	613b      	str	r3, [r7, #16]
 800c892:	e7fe      	b.n	800c892 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c894:	4b3c      	ldr	r3, [pc, #240]	; (800c988 <xPortStartScheduler+0x118>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a3d      	ldr	r2, [pc, #244]	; (800c990 <xPortStartScheduler+0x120>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d109      	bne.n	800c8b2 <xPortStartScheduler+0x42>
 800c89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	60fb      	str	r3, [r7, #12]
 800c8b0:	e7fe      	b.n	800c8b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8b2:	4b38      	ldr	r3, [pc, #224]	; (800c994 <xPortStartScheduler+0x124>)
 800c8b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	22ff      	movs	r2, #255	; 0xff
 800c8c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8cc:	78fb      	ldrb	r3, [r7, #3]
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	4b30      	ldr	r3, [pc, #192]	; (800c998 <xPortStartScheduler+0x128>)
 800c8d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8da:	4b30      	ldr	r3, [pc, #192]	; (800c99c <xPortStartScheduler+0x12c>)
 800c8dc:	2207      	movs	r2, #7
 800c8de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8e0:	e009      	b.n	800c8f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c8e2:	4b2e      	ldr	r3, [pc, #184]	; (800c99c <xPortStartScheduler+0x12c>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	4a2c      	ldr	r2, [pc, #176]	; (800c99c <xPortStartScheduler+0x12c>)
 800c8ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8ec:	78fb      	ldrb	r3, [r7, #3]
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	005b      	lsls	r3, r3, #1
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8f6:	78fb      	ldrb	r3, [r7, #3]
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8fe:	2b80      	cmp	r3, #128	; 0x80
 800c900:	d0ef      	beq.n	800c8e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c902:	4b26      	ldr	r3, [pc, #152]	; (800c99c <xPortStartScheduler+0x12c>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f1c3 0307 	rsb	r3, r3, #7
 800c90a:	2b04      	cmp	r3, #4
 800c90c:	d009      	beq.n	800c922 <xPortStartScheduler+0xb2>
 800c90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	60bb      	str	r3, [r7, #8]
 800c920:	e7fe      	b.n	800c920 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c922:	4b1e      	ldr	r3, [pc, #120]	; (800c99c <xPortStartScheduler+0x12c>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	021b      	lsls	r3, r3, #8
 800c928:	4a1c      	ldr	r2, [pc, #112]	; (800c99c <xPortStartScheduler+0x12c>)
 800c92a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c92c:	4b1b      	ldr	r3, [pc, #108]	; (800c99c <xPortStartScheduler+0x12c>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c934:	4a19      	ldr	r2, [pc, #100]	; (800c99c <xPortStartScheduler+0x12c>)
 800c936:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	b2da      	uxtb	r2, r3
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c940:	4b17      	ldr	r3, [pc, #92]	; (800c9a0 <xPortStartScheduler+0x130>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a16      	ldr	r2, [pc, #88]	; (800c9a0 <xPortStartScheduler+0x130>)
 800c946:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c94a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c94c:	4b14      	ldr	r3, [pc, #80]	; (800c9a0 <xPortStartScheduler+0x130>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a13      	ldr	r2, [pc, #76]	; (800c9a0 <xPortStartScheduler+0x130>)
 800c952:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c956:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c958:	f000 f8d6 	bl	800cb08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c95c:	4b11      	ldr	r3, [pc, #68]	; (800c9a4 <xPortStartScheduler+0x134>)
 800c95e:	2200      	movs	r2, #0
 800c960:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c962:	f000 f8f5 	bl	800cb50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c966:	4b10      	ldr	r3, [pc, #64]	; (800c9a8 <xPortStartScheduler+0x138>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a0f      	ldr	r2, [pc, #60]	; (800c9a8 <xPortStartScheduler+0x138>)
 800c96c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c970:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c972:	f7ff ff69 	bl	800c848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c976:	f7ff f86b 	bl	800ba50 <vTaskSwitchContext>
	prvTaskExitError();
 800c97a:	f7ff ff21 	bl	800c7c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c97e:	2300      	movs	r3, #0
}
 800c980:	4618      	mov	r0, r3
 800c982:	3718      	adds	r7, #24
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	e000ed00 	.word	0xe000ed00
 800c98c:	410fc271 	.word	0x410fc271
 800c990:	410fc270 	.word	0x410fc270
 800c994:	e000e400 	.word	0xe000e400
 800c998:	20000d9c 	.word	0x20000d9c
 800c99c:	20000da0 	.word	0x20000da0
 800c9a0:	e000ed20 	.word	0xe000ed20
 800c9a4:	20000028 	.word	0x20000028
 800c9a8:	e000ef34 	.word	0xe000ef34

0800c9ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b6:	f383 8811 	msr	BASEPRI, r3
 800c9ba:	f3bf 8f6f 	isb	sy
 800c9be:	f3bf 8f4f 	dsb	sy
 800c9c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9c4:	4b0e      	ldr	r3, [pc, #56]	; (800ca00 <vPortEnterCritical+0x54>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	4a0d      	ldr	r2, [pc, #52]	; (800ca00 <vPortEnterCritical+0x54>)
 800c9cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ca00 <vPortEnterCritical+0x54>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d10e      	bne.n	800c9f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ca04 <vPortEnterCritical+0x58>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d009      	beq.n	800c9f4 <vPortEnterCritical+0x48>
 800c9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e4:	f383 8811 	msr	BASEPRI, r3
 800c9e8:	f3bf 8f6f 	isb	sy
 800c9ec:	f3bf 8f4f 	dsb	sy
 800c9f0:	603b      	str	r3, [r7, #0]
 800c9f2:	e7fe      	b.n	800c9f2 <vPortEnterCritical+0x46>
	}
}
 800c9f4:	bf00      	nop
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	20000028 	.word	0x20000028
 800ca04:	e000ed04 	.word	0xe000ed04

0800ca08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca0e:	4b11      	ldr	r3, [pc, #68]	; (800ca54 <vPortExitCritical+0x4c>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d109      	bne.n	800ca2a <vPortExitCritical+0x22>
 800ca16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	607b      	str	r3, [r7, #4]
 800ca28:	e7fe      	b.n	800ca28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ca2a:	4b0a      	ldr	r3, [pc, #40]	; (800ca54 <vPortExitCritical+0x4c>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	4a08      	ldr	r2, [pc, #32]	; (800ca54 <vPortExitCritical+0x4c>)
 800ca32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca34:	4b07      	ldr	r3, [pc, #28]	; (800ca54 <vPortExitCritical+0x4c>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d104      	bne.n	800ca46 <vPortExitCritical+0x3e>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca46:	bf00      	nop
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	20000028 	.word	0x20000028
	...

0800ca60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca60:	f3ef 8009 	mrs	r0, PSP
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	4b15      	ldr	r3, [pc, #84]	; (800cac0 <pxCurrentTCBConst>)
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	f01e 0f10 	tst.w	lr, #16
 800ca70:	bf08      	it	eq
 800ca72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7a:	6010      	str	r0, [r2, #0]
 800ca7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca84:	f380 8811 	msr	BASEPRI, r0
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f7fe ffde 	bl	800ba50 <vTaskSwitchContext>
 800ca94:	f04f 0000 	mov.w	r0, #0
 800ca98:	f380 8811 	msr	BASEPRI, r0
 800ca9c:	bc09      	pop	{r0, r3}
 800ca9e:	6819      	ldr	r1, [r3, #0]
 800caa0:	6808      	ldr	r0, [r1, #0]
 800caa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa6:	f01e 0f10 	tst.w	lr, #16
 800caaa:	bf08      	it	eq
 800caac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cab0:	f380 8809 	msr	PSP, r0
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	f3af 8000 	nop.w

0800cac0 <pxCurrentTCBConst>:
 800cac0:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cac4:	bf00      	nop
 800cac6:	bf00      	nop

0800cac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cae0:	f7fe fefe 	bl	800b8e0 <xTaskIncrementTick>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d003      	beq.n	800caf2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800caea:	4b06      	ldr	r3, [pc, #24]	; (800cb04 <xPortSysTickHandler+0x3c>)
 800caec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caf0:	601a      	str	r2, [r3, #0]
 800caf2:	2300      	movs	r3, #0
 800caf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800cafc:	bf00      	nop
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	e000ed04 	.word	0xe000ed04

0800cb08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb08:	b480      	push	{r7}
 800cb0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb0c:	4b0b      	ldr	r3, [pc, #44]	; (800cb3c <vPortSetupTimerInterrupt+0x34>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb12:	4b0b      	ldr	r3, [pc, #44]	; (800cb40 <vPortSetupTimerInterrupt+0x38>)
 800cb14:	2200      	movs	r2, #0
 800cb16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb18:	4b0a      	ldr	r3, [pc, #40]	; (800cb44 <vPortSetupTimerInterrupt+0x3c>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a0a      	ldr	r2, [pc, #40]	; (800cb48 <vPortSetupTimerInterrupt+0x40>)
 800cb1e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb22:	099b      	lsrs	r3, r3, #6
 800cb24:	4a09      	ldr	r2, [pc, #36]	; (800cb4c <vPortSetupTimerInterrupt+0x44>)
 800cb26:	3b01      	subs	r3, #1
 800cb28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb2a:	4b04      	ldr	r3, [pc, #16]	; (800cb3c <vPortSetupTimerInterrupt+0x34>)
 800cb2c:	2207      	movs	r2, #7
 800cb2e:	601a      	str	r2, [r3, #0]
}
 800cb30:	bf00      	nop
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	e000e010 	.word	0xe000e010
 800cb40:	e000e018 	.word	0xe000e018
 800cb44:	2000002c 	.word	0x2000002c
 800cb48:	10624dd3 	.word	0x10624dd3
 800cb4c:	e000e014 	.word	0xe000e014

0800cb50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb60 <vPortEnableVFP+0x10>
 800cb54:	6801      	ldr	r1, [r0, #0]
 800cb56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb5a:	6001      	str	r1, [r0, #0]
 800cb5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb5e:	bf00      	nop
 800cb60:	e000ed88 	.word	0xe000ed88

0800cb64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb6a:	f3ef 8305 	mrs	r3, IPSR
 800cb6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2b0f      	cmp	r3, #15
 800cb74:	d913      	bls.n	800cb9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb76:	4a16      	ldr	r2, [pc, #88]	; (800cbd0 <vPortValidateInterruptPriority+0x6c>)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb80:	4b14      	ldr	r3, [pc, #80]	; (800cbd4 <vPortValidateInterruptPriority+0x70>)
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	7afa      	ldrb	r2, [r7, #11]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d209      	bcs.n	800cb9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	607b      	str	r3, [r7, #4]
 800cb9c:	e7fe      	b.n	800cb9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb9e:	4b0e      	ldr	r3, [pc, #56]	; (800cbd8 <vPortValidateInterruptPriority+0x74>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cba6:	4b0d      	ldr	r3, [pc, #52]	; (800cbdc <vPortValidateInterruptPriority+0x78>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d909      	bls.n	800cbc2 <vPortValidateInterruptPriority+0x5e>
 800cbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	603b      	str	r3, [r7, #0]
 800cbc0:	e7fe      	b.n	800cbc0 <vPortValidateInterruptPriority+0x5c>
	}
 800cbc2:	bf00      	nop
 800cbc4:	3714      	adds	r7, #20
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	e000e3f0 	.word	0xe000e3f0
 800cbd4:	20000d9c 	.word	0x20000d9c
 800cbd8:	e000ed0c 	.word	0xe000ed0c
 800cbdc:	20000da0 	.word	0x20000da0

0800cbe0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b08a      	sub	sp, #40	; 0x28
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cbec:	f7fe fdbe 	bl	800b76c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cbf0:	4b57      	ldr	r3, [pc, #348]	; (800cd50 <pvPortMalloc+0x170>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d101      	bne.n	800cbfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cbf8:	f000 f90c 	bl	800ce14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cbfc:	4b55      	ldr	r3, [pc, #340]	; (800cd54 <pvPortMalloc+0x174>)
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4013      	ands	r3, r2
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	f040 808c 	bne.w	800cd22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d01c      	beq.n	800cc4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800cc10:	2208      	movs	r2, #8
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4413      	add	r3, r2
 800cc16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f003 0307 	and.w	r3, r3, #7
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d013      	beq.n	800cc4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f023 0307 	bic.w	r3, r3, #7
 800cc28:	3308      	adds	r3, #8
 800cc2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f003 0307 	and.w	r3, r3, #7
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d009      	beq.n	800cc4a <pvPortMalloc+0x6a>
 800cc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	617b      	str	r3, [r7, #20]
 800cc48:	e7fe      	b.n	800cc48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d068      	beq.n	800cd22 <pvPortMalloc+0x142>
 800cc50:	4b41      	ldr	r3, [pc, #260]	; (800cd58 <pvPortMalloc+0x178>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d863      	bhi.n	800cd22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc5a:	4b40      	ldr	r3, [pc, #256]	; (800cd5c <pvPortMalloc+0x17c>)
 800cc5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc5e:	4b3f      	ldr	r3, [pc, #252]	; (800cd5c <pvPortMalloc+0x17c>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc64:	e004      	b.n	800cc70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800cc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d903      	bls.n	800cc82 <pvPortMalloc+0xa2>
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1f1      	bne.n	800cc66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc82:	4b33      	ldr	r3, [pc, #204]	; (800cd50 <pvPortMalloc+0x170>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d04a      	beq.n	800cd22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc8c:	6a3b      	ldr	r3, [r7, #32]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2208      	movs	r2, #8
 800cc92:	4413      	add	r3, r2
 800cc94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	6a3b      	ldr	r3, [r7, #32]
 800cc9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca0:	685a      	ldr	r2, [r3, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	1ad2      	subs	r2, r2, r3
 800cca6:	2308      	movs	r3, #8
 800cca8:	005b      	lsls	r3, r3, #1
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d91e      	bls.n	800ccec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ccae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	f003 0307 	and.w	r3, r3, #7
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d009      	beq.n	800ccd4 <pvPortMalloc+0xf4>
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	613b      	str	r3, [r7, #16]
 800ccd2:	e7fe      	b.n	800ccd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	685a      	ldr	r2, [r3, #4]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	1ad2      	subs	r2, r2, r3
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cce6:	69b8      	ldr	r0, [r7, #24]
 800cce8:	f000 f8f6 	bl	800ced8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ccec:	4b1a      	ldr	r3, [pc, #104]	; (800cd58 <pvPortMalloc+0x178>)
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	4a18      	ldr	r2, [pc, #96]	; (800cd58 <pvPortMalloc+0x178>)
 800ccf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ccfa:	4b17      	ldr	r3, [pc, #92]	; (800cd58 <pvPortMalloc+0x178>)
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	4b18      	ldr	r3, [pc, #96]	; (800cd60 <pvPortMalloc+0x180>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d203      	bcs.n	800cd0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd06:	4b14      	ldr	r3, [pc, #80]	; (800cd58 <pvPortMalloc+0x178>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a15      	ldr	r2, [pc, #84]	; (800cd60 <pvPortMalloc+0x180>)
 800cd0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd10:	685a      	ldr	r2, [r3, #4]
 800cd12:	4b10      	ldr	r3, [pc, #64]	; (800cd54 <pvPortMalloc+0x174>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	431a      	orrs	r2, r3
 800cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	2200      	movs	r2, #0
 800cd20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd22:	f7fe fd31 	bl	800b788 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	f003 0307 	and.w	r3, r3, #7
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d009      	beq.n	800cd44 <pvPortMalloc+0x164>
 800cd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd34:	f383 8811 	msr	BASEPRI, r3
 800cd38:	f3bf 8f6f 	isb	sy
 800cd3c:	f3bf 8f4f 	dsb	sy
 800cd40:	60fb      	str	r3, [r7, #12]
 800cd42:	e7fe      	b.n	800cd42 <pvPortMalloc+0x162>
	return pvReturn;
 800cd44:	69fb      	ldr	r3, [r7, #28]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3728      	adds	r7, #40	; 0x28
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	20001964 	.word	0x20001964
 800cd54:	20001970 	.word	0x20001970
 800cd58:	20001968 	.word	0x20001968
 800cd5c:	2000195c 	.word	0x2000195c
 800cd60:	2000196c 	.word	0x2000196c

0800cd64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b086      	sub	sp, #24
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d046      	beq.n	800ce04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd76:	2308      	movs	r3, #8
 800cd78:	425b      	negs	r3, r3
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	685a      	ldr	r2, [r3, #4]
 800cd88:	4b20      	ldr	r3, [pc, #128]	; (800ce0c <vPortFree+0xa8>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d109      	bne.n	800cda6 <vPortFree+0x42>
 800cd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	60fb      	str	r3, [r7, #12]
 800cda4:	e7fe      	b.n	800cda4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d009      	beq.n	800cdc2 <vPortFree+0x5e>
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	60bb      	str	r3, [r7, #8]
 800cdc0:	e7fe      	b.n	800cdc0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	4b11      	ldr	r3, [pc, #68]	; (800ce0c <vPortFree+0xa8>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4013      	ands	r3, r2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d019      	beq.n	800ce04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d115      	bne.n	800ce04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	685a      	ldr	r2, [r3, #4]
 800cddc:	4b0b      	ldr	r3, [pc, #44]	; (800ce0c <vPortFree+0xa8>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	43db      	mvns	r3, r3
 800cde2:	401a      	ands	r2, r3
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cde8:	f7fe fcc0 	bl	800b76c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	685a      	ldr	r2, [r3, #4]
 800cdf0:	4b07      	ldr	r3, [pc, #28]	; (800ce10 <vPortFree+0xac>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	4a06      	ldr	r2, [pc, #24]	; (800ce10 <vPortFree+0xac>)
 800cdf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cdfa:	6938      	ldr	r0, [r7, #16]
 800cdfc:	f000 f86c 	bl	800ced8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ce00:	f7fe fcc2 	bl	800b788 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce04:	bf00      	nop
 800ce06:	3718      	adds	r7, #24
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	20001970 	.word	0x20001970
 800ce10:	20001968 	.word	0x20001968

0800ce14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce14:	b480      	push	{r7}
 800ce16:	b085      	sub	sp, #20
 800ce18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ce1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce20:	4b27      	ldr	r3, [pc, #156]	; (800cec0 <prvHeapInit+0xac>)
 800ce22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f003 0307 	and.w	r3, r3, #7
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00c      	beq.n	800ce48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	3307      	adds	r3, #7
 800ce32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f023 0307 	bic.w	r3, r3, #7
 800ce3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	4a1f      	ldr	r2, [pc, #124]	; (800cec0 <prvHeapInit+0xac>)
 800ce44:	4413      	add	r3, r2
 800ce46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce4c:	4a1d      	ldr	r2, [pc, #116]	; (800cec4 <prvHeapInit+0xb0>)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce52:	4b1c      	ldr	r3, [pc, #112]	; (800cec4 <prvHeapInit+0xb0>)
 800ce54:	2200      	movs	r2, #0
 800ce56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	68ba      	ldr	r2, [r7, #8]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce60:	2208      	movs	r2, #8
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	1a9b      	subs	r3, r3, r2
 800ce66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f023 0307 	bic.w	r3, r3, #7
 800ce6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	4a15      	ldr	r2, [pc, #84]	; (800cec8 <prvHeapInit+0xb4>)
 800ce74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce76:	4b14      	ldr	r3, [pc, #80]	; (800cec8 <prvHeapInit+0xb4>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce7e:	4b12      	ldr	r3, [pc, #72]	; (800cec8 <prvHeapInit+0xb4>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2200      	movs	r2, #0
 800ce84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	68fa      	ldr	r2, [r7, #12]
 800ce8e:	1ad2      	subs	r2, r2, r3
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce94:	4b0c      	ldr	r3, [pc, #48]	; (800cec8 <prvHeapInit+0xb4>)
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	4a0a      	ldr	r2, [pc, #40]	; (800cecc <prvHeapInit+0xb8>)
 800cea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	4a09      	ldr	r2, [pc, #36]	; (800ced0 <prvHeapInit+0xbc>)
 800ceaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ceac:	4b09      	ldr	r3, [pc, #36]	; (800ced4 <prvHeapInit+0xc0>)
 800ceae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ceb2:	601a      	str	r2, [r3, #0]
}
 800ceb4:	bf00      	nop
 800ceb6:	3714      	adds	r7, #20
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr
 800cec0:	20000da4 	.word	0x20000da4
 800cec4:	2000195c 	.word	0x2000195c
 800cec8:	20001964 	.word	0x20001964
 800cecc:	2000196c 	.word	0x2000196c
 800ced0:	20001968 	.word	0x20001968
 800ced4:	20001970 	.word	0x20001970

0800ced8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ced8:	b480      	push	{r7}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cee0:	4b28      	ldr	r3, [pc, #160]	; (800cf84 <prvInsertBlockIntoFreeList+0xac>)
 800cee2:	60fb      	str	r3, [r7, #12]
 800cee4:	e002      	b.n	800ceec <prvInsertBlockIntoFreeList+0x14>
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	60fb      	str	r3, [r7, #12]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d8f7      	bhi.n	800cee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	4413      	add	r3, r2
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d108      	bne.n	800cf1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	685a      	ldr	r2, [r3, #4]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	441a      	add	r2, r3
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	68ba      	ldr	r2, [r7, #8]
 800cf24:	441a      	add	r2, r3
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d118      	bne.n	800cf60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	4b15      	ldr	r3, [pc, #84]	; (800cf88 <prvInsertBlockIntoFreeList+0xb0>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d00d      	beq.n	800cf56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	685a      	ldr	r2, [r3, #4]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	441a      	add	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	e008      	b.n	800cf68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf56:	4b0c      	ldr	r3, [pc, #48]	; (800cf88 <prvInsertBlockIntoFreeList+0xb0>)
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	601a      	str	r2, [r3, #0]
 800cf5e:	e003      	b.n	800cf68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf68:	68fa      	ldr	r2, [r7, #12]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d002      	beq.n	800cf76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf76:	bf00      	nop
 800cf78:	3714      	adds	r7, #20
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	2000195c 	.word	0x2000195c
 800cf88:	20001964 	.word	0x20001964

0800cf8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cf90:	f7f3 fa9e 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cf94:	f000 f82c 	bl	800cff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cf98:	f000 fbfc 	bl	800d794 <MX_GPIO_Init>
  MX_DMA_Init();
 800cf9c:	f000 fbdc 	bl	800d758 <MX_DMA_Init>
  MX_ADC1_Init();
 800cfa0:	f000 f8d0 	bl	800d144 <MX_ADC1_Init>
  MX_DAC1_Init();
 800cfa4:	f000 f94c 	bl	800d240 <MX_DAC1_Init>
  MX_I2C1_Init();
 800cfa8:	f000 f97c 	bl	800d2a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800cfac:	f000 f9ba 	bl	800d324 <MX_I2C2_Init>
  MX_LCD_Init();
 800cfb0:	f000 f9f8 	bl	800d3a4 <MX_LCD_Init>
  MX_QUADSPI_Init();
 800cfb4:	f000 fa2e 	bl	800d414 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800cfb8:	f000 fa52 	bl	800d460 <MX_SAI1_Init>
  MX_SPI2_Init();
 800cfbc:	f000 faf8 	bl	800d5b0 <MX_SPI2_Init>
  MX_TIM4_Init();
 800cfc0:	f000 fb34 	bl	800d62c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800cfc4:	f000 fb98 	bl	800d6f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800cfc8:	f7fd f876 	bl	800a0b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800cfcc:	4a05      	ldr	r2, [pc, #20]	; (800cfe4 <main+0x58>)
 800cfce:	2100      	movs	r1, #0
 800cfd0:	4805      	ldr	r0, [pc, #20]	; (800cfe8 <main+0x5c>)
 800cfd2:	f7fd f8db 	bl	800a18c <osThreadNew>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	4b04      	ldr	r3, [pc, #16]	; (800cfec <main+0x60>)
 800cfda:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800cfdc:	f7fd f8a0 	bl	800a120 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800cfe0:	e7fe      	b.n	800cfe0 <main+0x54>
 800cfe2:	bf00      	nop
 800cfe4:	0800eac4 	.word	0x0800eac4
 800cfe8:	0800da0d 	.word	0x0800da0d
 800cfec:	200019f0 	.word	0x200019f0

0800cff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b0b8      	sub	sp, #224	; 0xe0
 800cff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cff6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cffa:	2244      	movs	r2, #68	; 0x44
 800cffc:	2100      	movs	r1, #0
 800cffe:	4618      	mov	r0, r3
 800d000:	f001 fc77 	bl	800e8f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d004:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800d008:	2200      	movs	r2, #0
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	605a      	str	r2, [r3, #4]
 800d00e:	609a      	str	r2, [r3, #8]
 800d010:	60da      	str	r2, [r3, #12]
 800d012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d014:	463b      	mov	r3, r7
 800d016:	2288      	movs	r2, #136	; 0x88
 800d018:	2100      	movs	r1, #0
 800d01a:	4618      	mov	r0, r3
 800d01c:	f001 fc69 	bl	800e8f2 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800d020:	f7f6 fdaa 	bl	8003b78 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800d024:	4b45      	ldr	r3, [pc, #276]	; (800d13c <SystemClock_Config+0x14c>)
 800d026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d02a:	4a44      	ldr	r2, [pc, #272]	; (800d13c <SystemClock_Config+0x14c>)
 800d02c:	f023 0318 	bic.w	r3, r3, #24
 800d030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800d034:	231c      	movs	r3, #28
 800d036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d03a:	2301      	movs	r3, #1
 800d03c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800d040:	2301      	movs	r3, #1
 800d042:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800d046:	2301      	movs	r3, #1
 800d048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800d052:	2360      	movs	r3, #96	; 0x60
 800d054:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d058:	2302      	movs	r3, #2
 800d05a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800d05e:	2301      	movs	r3, #1
 800d060:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800d064:	2301      	movs	r3, #1
 800d066:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 800d06a:	2314      	movs	r3, #20
 800d06c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800d070:	2307      	movs	r3, #7
 800d072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800d076:	2302      	movs	r3, #2
 800d078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800d07c:	2302      	movs	r3, #2
 800d07e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d082:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d086:	4618      	mov	r0, r3
 800d088:	f7f6 fec2 	bl	8003e10 <HAL_RCC_OscConfig>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d001      	beq.n	800d096 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800d092:	f000 fcc5 	bl	800da20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d096:	230f      	movs	r3, #15
 800d098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d09c:	2303      	movs	r3, #3
 800d09e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800d0a2:	2380      	movs	r3, #128	; 0x80
 800d0a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800d0b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800d0b8:	2101      	movs	r1, #1
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7f7 fa8e 	bl	80045dc <HAL_RCC_ClockConfig>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d001      	beq.n	800d0ca <SystemClock_Config+0xda>
  {
    Error_Handler();
 800d0c6:	f000 fcab 	bl	800da20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 800d0ca:	4b1d      	ldr	r3, [pc, #116]	; (800d140 <SystemClock_Config+0x150>)
 800d0cc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800d0de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800d0e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d0ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800d0f4:	2318      	movs	r3, #24
 800d0f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800d0f8:	2307      	movs	r3, #7
 800d0fa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800d0fc:	2302      	movs	r3, #2
 800d0fe:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800d100:	2302      	movs	r3, #2
 800d102:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 800d104:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800d108:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d10a:	463b      	mov	r3, r7
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7f7 fc69 	bl	80049e4 <HAL_RCCEx_PeriphCLKConfig>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d001      	beq.n	800d11c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 800d118:	f000 fc82 	bl	800da20 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800d11c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d120:	f7f6 fd48 	bl	8003bb4 <HAL_PWREx_ControlVoltageScaling>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <SystemClock_Config+0x13e>
  {
    Error_Handler();
 800d12a:	f000 fc79 	bl	800da20 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800d12e:	f7f8 fbc5 	bl	80058bc <HAL_RCCEx_EnableMSIPLLMode>
}
 800d132:	bf00      	nop
 800d134:	37e0      	adds	r7, #224	; 0xe0
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	40021000 	.word	0x40021000
 800d140:	000228c2 	.word	0x000228c2

0800d144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b08a      	sub	sp, #40	; 0x28
 800d148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800d14a:	f107 031c 	add.w	r3, r7, #28
 800d14e:	2200      	movs	r2, #0
 800d150:	601a      	str	r2, [r3, #0]
 800d152:	605a      	str	r2, [r3, #4]
 800d154:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800d156:	1d3b      	adds	r3, r7, #4
 800d158:	2200      	movs	r2, #0
 800d15a:	601a      	str	r2, [r3, #0]
 800d15c:	605a      	str	r2, [r3, #4]
 800d15e:	609a      	str	r2, [r3, #8]
 800d160:	60da      	str	r2, [r3, #12]
 800d162:	611a      	str	r2, [r3, #16]
 800d164:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800d166:	4b33      	ldr	r3, [pc, #204]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d168:	4a33      	ldr	r2, [pc, #204]	; (800d238 <MX_ADC1_Init+0xf4>)
 800d16a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800d16c:	4b31      	ldr	r3, [pc, #196]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d16e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d172:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d174:	4b2f      	ldr	r3, [pc, #188]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d176:	2200      	movs	r2, #0
 800d178:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800d17a:	4b2e      	ldr	r3, [pc, #184]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d17c:	2220      	movs	r2, #32
 800d17e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800d180:	4b2c      	ldr	r3, [pc, #176]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d182:	2200      	movs	r2, #0
 800d184:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d186:	4b2b      	ldr	r3, [pc, #172]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d188:	2204      	movs	r2, #4
 800d18a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800d18c:	4b29      	ldr	r3, [pc, #164]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d18e:	2200      	movs	r2, #0
 800d190:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800d192:	4b28      	ldr	r3, [pc, #160]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d194:	2200      	movs	r2, #0
 800d196:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800d198:	4b26      	ldr	r3, [pc, #152]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d19a:	2201      	movs	r2, #1
 800d19c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d19e:	4b25      	ldr	r3, [pc, #148]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800d1a6:	4b23      	ldr	r3, [pc, #140]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 800d1ac:	4b21      	ldr	r3, [pc, #132]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d1ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800d1b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800d1b4:	4b1f      	ldr	r3, [pc, #124]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d1b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d1ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800d1bc:	4b1d      	ldr	r3, [pc, #116]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800d1c4:	4b1b      	ldr	r3, [pc, #108]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d1c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d1ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800d1cc:	4b19      	ldr	r3, [pc, #100]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d1d4:	4817      	ldr	r0, [pc, #92]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d1d6:	f7f3 fb95 	bl	8000904 <HAL_ADC_Init>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d001      	beq.n	800d1e4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800d1e0:	f000 fc1e 	bl	800da20 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800d1e8:	f107 031c 	add.w	r3, r7, #28
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	4811      	ldr	r0, [pc, #68]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d1f0:	f7f4 f866 	bl	80012c0 <HAL_ADCEx_MultiModeConfigChannel>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d001      	beq.n	800d1fe <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800d1fa:	f000 fc11 	bl	800da20 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800d1fe:	4b0f      	ldr	r3, [pc, #60]	; (800d23c <MX_ADC1_Init+0xf8>)
 800d200:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800d202:	2306      	movs	r3, #6
 800d204:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800d206:	2300      	movs	r3, #0
 800d208:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800d20a:	237f      	movs	r3, #127	; 0x7f
 800d20c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800d20e:	2304      	movs	r3, #4
 800d210:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800d212:	2300      	movs	r3, #0
 800d214:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d216:	1d3b      	adds	r3, r7, #4
 800d218:	4619      	mov	r1, r3
 800d21a:	4806      	ldr	r0, [pc, #24]	; (800d234 <MX_ADC1_Init+0xf0>)
 800d21c:	f7f3 fcc6 	bl	8000bac <HAL_ADC_ConfigChannel>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800d226:	f000 fbfb 	bl	800da20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800d22a:	bf00      	nop
 800d22c:	3728      	adds	r7, #40	; 0x28
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	20001bc8 	.word	0x20001bc8
 800d238:	50040000 	.word	0x50040000
 800d23c:	19200040 	.word	0x19200040

0800d240 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b08a      	sub	sp, #40	; 0x28
 800d244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800d246:	1d3b      	adds	r3, r7, #4
 800d248:	2224      	movs	r2, #36	; 0x24
 800d24a:	2100      	movs	r1, #0
 800d24c:	4618      	mov	r0, r3
 800d24e:	f001 fb50 	bl	800e8f2 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800d252:	4b12      	ldr	r3, [pc, #72]	; (800d29c <MX_DAC1_Init+0x5c>)
 800d254:	4a12      	ldr	r2, [pc, #72]	; (800d2a0 <MX_DAC1_Init+0x60>)
 800d256:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800d258:	4810      	ldr	r0, [pc, #64]	; (800d29c <MX_DAC1_Init+0x5c>)
 800d25a:	f7f4 f9ee 	bl	800163a <HAL_DAC_Init>
 800d25e:	4603      	mov	r3, r0
 800d260:	2b00      	cmp	r3, #0
 800d262:	d001      	beq.n	800d268 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800d264:	f000 fbdc 	bl	800da20 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800d268:	2300      	movs	r3, #0
 800d26a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800d26c:	232c      	movs	r3, #44	; 0x2c
 800d26e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800d270:	2300      	movs	r3, #0
 800d272:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800d274:	2300      	movs	r3, #0
 800d276:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800d278:	2300      	movs	r3, #0
 800d27a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800d27c:	1d3b      	adds	r3, r7, #4
 800d27e:	2210      	movs	r2, #16
 800d280:	4619      	mov	r1, r3
 800d282:	4806      	ldr	r0, [pc, #24]	; (800d29c <MX_DAC1_Init+0x5c>)
 800d284:	f7f4 f9fb 	bl	800167e <HAL_DAC_ConfigChannel>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d001      	beq.n	800d292 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800d28e:	f000 fbc7 	bl	800da20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800d292:	bf00      	nop
 800d294:	3728      	adds	r7, #40	; 0x28
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	20001a98 	.word	0x20001a98
 800d2a0:	40007400 	.word	0x40007400

0800d2a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d2a8:	4b1b      	ldr	r3, [pc, #108]	; (800d318 <MX_I2C1_Init+0x74>)
 800d2aa:	4a1c      	ldr	r2, [pc, #112]	; (800d31c <MX_I2C1_Init+0x78>)
 800d2ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 800d2ae:	4b1a      	ldr	r3, [pc, #104]	; (800d318 <MX_I2C1_Init+0x74>)
 800d2b0:	4a1b      	ldr	r2, [pc, #108]	; (800d320 <MX_I2C1_Init+0x7c>)
 800d2b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800d2b4:	4b18      	ldr	r3, [pc, #96]	; (800d318 <MX_I2C1_Init+0x74>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d2ba:	4b17      	ldr	r3, [pc, #92]	; (800d318 <MX_I2C1_Init+0x74>)
 800d2bc:	2201      	movs	r2, #1
 800d2be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d2c0:	4b15      	ldr	r3, [pc, #84]	; (800d318 <MX_I2C1_Init+0x74>)
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800d2c6:	4b14      	ldr	r3, [pc, #80]	; (800d318 <MX_I2C1_Init+0x74>)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d2cc:	4b12      	ldr	r3, [pc, #72]	; (800d318 <MX_I2C1_Init+0x74>)
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d2d2:	4b11      	ldr	r3, [pc, #68]	; (800d318 <MX_I2C1_Init+0x74>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d2d8:	4b0f      	ldr	r3, [pc, #60]	; (800d318 <MX_I2C1_Init+0x74>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d2de:	480e      	ldr	r0, [pc, #56]	; (800d318 <MX_I2C1_Init+0x74>)
 800d2e0:	f7f6 fa41 	bl	8003766 <HAL_I2C_Init>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800d2ea:	f000 fb99 	bl	800da20 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	4809      	ldr	r0, [pc, #36]	; (800d318 <MX_I2C1_Init+0x74>)
 800d2f2:	f7f6 fac7 	bl	8003884 <HAL_I2CEx_ConfigAnalogFilter>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d001      	beq.n	800d300 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800d2fc:	f000 fb90 	bl	800da20 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800d300:	2100      	movs	r1, #0
 800d302:	4805      	ldr	r0, [pc, #20]	; (800d318 <MX_I2C1_Init+0x74>)
 800d304:	f7f6 fb09 	bl	800391a <HAL_I2CEx_ConfigDigitalFilter>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800d30e:	f000 fb87 	bl	800da20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d312:	bf00      	nop
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	20001aac 	.word	0x20001aac
 800d31c:	40005400 	.word	0x40005400
 800d320:	00404c74 	.word	0x00404c74

0800d324 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800d328:	4b1b      	ldr	r3, [pc, #108]	; (800d398 <MX_I2C2_Init+0x74>)
 800d32a:	4a1c      	ldr	r2, [pc, #112]	; (800d39c <MX_I2C2_Init+0x78>)
 800d32c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 800d32e:	4b1a      	ldr	r3, [pc, #104]	; (800d398 <MX_I2C2_Init+0x74>)
 800d330:	4a1b      	ldr	r2, [pc, #108]	; (800d3a0 <MX_I2C2_Init+0x7c>)
 800d332:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800d334:	4b18      	ldr	r3, [pc, #96]	; (800d398 <MX_I2C2_Init+0x74>)
 800d336:	2200      	movs	r2, #0
 800d338:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d33a:	4b17      	ldr	r3, [pc, #92]	; (800d398 <MX_I2C2_Init+0x74>)
 800d33c:	2201      	movs	r2, #1
 800d33e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d340:	4b15      	ldr	r3, [pc, #84]	; (800d398 <MX_I2C2_Init+0x74>)
 800d342:	2200      	movs	r2, #0
 800d344:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800d346:	4b14      	ldr	r3, [pc, #80]	; (800d398 <MX_I2C2_Init+0x74>)
 800d348:	2200      	movs	r2, #0
 800d34a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d34c:	4b12      	ldr	r3, [pc, #72]	; (800d398 <MX_I2C2_Init+0x74>)
 800d34e:	2200      	movs	r2, #0
 800d350:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d352:	4b11      	ldr	r3, [pc, #68]	; (800d398 <MX_I2C2_Init+0x74>)
 800d354:	2200      	movs	r2, #0
 800d356:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d358:	4b0f      	ldr	r3, [pc, #60]	; (800d398 <MX_I2C2_Init+0x74>)
 800d35a:	2200      	movs	r2, #0
 800d35c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800d35e:	480e      	ldr	r0, [pc, #56]	; (800d398 <MX_I2C2_Init+0x74>)
 800d360:	f7f6 fa01 	bl	8003766 <HAL_I2C_Init>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d001      	beq.n	800d36e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800d36a:	f000 fb59 	bl	800da20 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800d36e:	2100      	movs	r1, #0
 800d370:	4809      	ldr	r0, [pc, #36]	; (800d398 <MX_I2C2_Init+0x74>)
 800d372:	f7f6 fa87 	bl	8003884 <HAL_I2CEx_ConfigAnalogFilter>
 800d376:	4603      	mov	r3, r0
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d001      	beq.n	800d380 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800d37c:	f000 fb50 	bl	800da20 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800d380:	2100      	movs	r1, #0
 800d382:	4805      	ldr	r0, [pc, #20]	; (800d398 <MX_I2C2_Init+0x74>)
 800d384:	f7f6 fac9 	bl	800391a <HAL_I2CEx_ConfigDigitalFilter>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d001      	beq.n	800d392 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800d38e:	f000 fb47 	bl	800da20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800d392:	bf00      	nop
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	20001af8 	.word	0x20001af8
 800d39c:	40005800 	.word	0x40005800
 800d3a0:	00404c74 	.word	0x00404c74

0800d3a4 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 800d3a8:	4b18      	ldr	r3, [pc, #96]	; (800d40c <MX_LCD_Init+0x68>)
 800d3aa:	4a19      	ldr	r2, [pc, #100]	; (800d410 <MX_LCD_Init+0x6c>)
 800d3ac:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800d3ae:	4b17      	ldr	r3, [pc, #92]	; (800d40c <MX_LCD_Init+0x68>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 800d3b4:	4b15      	ldr	r3, [pc, #84]	; (800d40c <MX_LCD_Init+0x68>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 800d3ba:	4b14      	ldr	r3, [pc, #80]	; (800d40c <MX_LCD_Init+0x68>)
 800d3bc:	220c      	movs	r2, #12
 800d3be:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 800d3c0:	4b12      	ldr	r3, [pc, #72]	; (800d40c <MX_LCD_Init+0x68>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800d3c6:	4b11      	ldr	r3, [pc, #68]	; (800d40c <MX_LCD_Init+0x68>)
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 800d3cc:	4b0f      	ldr	r3, [pc, #60]	; (800d40c <MX_LCD_Init+0x68>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800d3d2:	4b0e      	ldr	r3, [pc, #56]	; (800d40c <MX_LCD_Init+0x68>)
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 800d3d8:	4b0c      	ldr	r3, [pc, #48]	; (800d40c <MX_LCD_Init+0x68>)
 800d3da:	2200      	movs	r2, #0
 800d3dc:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 800d3de:	4b0b      	ldr	r3, [pc, #44]	; (800d40c <MX_LCD_Init+0x68>)
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 800d3e4:	4b09      	ldr	r3, [pc, #36]	; (800d40c <MX_LCD_Init+0x68>)
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 800d3ea:	4b08      	ldr	r3, [pc, #32]	; (800d40c <MX_LCD_Init+0x68>)
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 800d3f0:	4b06      	ldr	r3, [pc, #24]	; (800d40c <MX_LCD_Init+0x68>)
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800d3f6:	4805      	ldr	r0, [pc, #20]	; (800d40c <MX_LCD_Init+0x68>)
 800d3f8:	f7f6 fadc 	bl	80039b4 <HAL_LCD_Init>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d001      	beq.n	800d406 <MX_LCD_Init+0x62>
  {
    Error_Handler();
 800d402:	f000 fb0d 	bl	800da20 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 800d406:	bf00      	nop
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	20001c74 	.word	0x20001c74
 800d410:	40002400 	.word	0x40002400

0800d414 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800d418:	4b0f      	ldr	r3, [pc, #60]	; (800d458 <MX_QUADSPI_Init+0x44>)
 800d41a:	4a10      	ldr	r2, [pc, #64]	; (800d45c <MX_QUADSPI_Init+0x48>)
 800d41c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800d41e:	4b0e      	ldr	r3, [pc, #56]	; (800d458 <MX_QUADSPI_Init+0x44>)
 800d420:	22ff      	movs	r2, #255	; 0xff
 800d422:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800d424:	4b0c      	ldr	r3, [pc, #48]	; (800d458 <MX_QUADSPI_Init+0x44>)
 800d426:	2201      	movs	r2, #1
 800d428:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800d42a:	4b0b      	ldr	r3, [pc, #44]	; (800d458 <MX_QUADSPI_Init+0x44>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800d430:	4b09      	ldr	r3, [pc, #36]	; (800d458 <MX_QUADSPI_Init+0x44>)
 800d432:	2201      	movs	r2, #1
 800d434:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800d436:	4b08      	ldr	r3, [pc, #32]	; (800d458 <MX_QUADSPI_Init+0x44>)
 800d438:	2200      	movs	r2, #0
 800d43a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800d43c:	4b06      	ldr	r3, [pc, #24]	; (800d458 <MX_QUADSPI_Init+0x44>)
 800d43e:	2200      	movs	r2, #0
 800d440:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800d442:	4805      	ldr	r0, [pc, #20]	; (800d458 <MX_QUADSPI_Init+0x44>)
 800d444:	f7f6 fc1c 	bl	8003c80 <HAL_QSPI_Init>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800d44e:	f000 fae7 	bl	800da20 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800d452:	bf00      	nop
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	20001db4 	.word	0x20001db4
 800d45c:	a0001000 	.word	0xa0001000

0800d460 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800d464:	4b4d      	ldr	r3, [pc, #308]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d466:	4a4e      	ldr	r2, [pc, #312]	; (800d5a0 <MX_SAI1_Init+0x140>)
 800d468:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800d46a:	4b4c      	ldr	r3, [pc, #304]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d46c:	2200      	movs	r2, #0
 800d46e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800d470:	4b4a      	ldr	r3, [pc, #296]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d472:	2200      	movs	r2, #0
 800d474:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800d476:	4b49      	ldr	r3, [pc, #292]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d478:	2240      	movs	r2, #64	; 0x40
 800d47a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800d47c:	4b47      	ldr	r3, [pc, #284]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d47e:	2200      	movs	r2, #0
 800d480:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800d482:	4b46      	ldr	r3, [pc, #280]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d484:	2200      	movs	r2, #0
 800d486:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800d488:	4b44      	ldr	r3, [pc, #272]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800d48e:	4b43      	ldr	r3, [pc, #268]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d490:	2200      	movs	r2, #0
 800d492:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800d494:	4b41      	ldr	r3, [pc, #260]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d496:	2200      	movs	r2, #0
 800d498:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800d49a:	4b40      	ldr	r3, [pc, #256]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d49c:	2200      	movs	r2, #0
 800d49e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800d4a0:	4b3e      	ldr	r3, [pc, #248]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4a2:	4a40      	ldr	r2, [pc, #256]	; (800d5a4 <MX_SAI1_Init+0x144>)
 800d4a4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800d4a6:	4b3d      	ldr	r3, [pc, #244]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800d4ac:	4b3b      	ldr	r3, [pc, #236]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800d4b2:	4b3a      	ldr	r3, [pc, #232]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800d4b8:	4b38      	ldr	r3, [pc, #224]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800d4be:	4b37      	ldr	r3, [pc, #220]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4c0:	2208      	movs	r2, #8
 800d4c2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800d4c4:	4b35      	ldr	r3, [pc, #212]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800d4ca:	4b34      	ldr	r3, [pc, #208]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800d4d0:	4b32      	ldr	r3, [pc, #200]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800d4d6:	4b31      	ldr	r3, [pc, #196]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800d4dc:	4b2f      	ldr	r3, [pc, #188]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800d4e2:	4b2e      	ldr	r3, [pc, #184]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800d4e8:	4b2c      	ldr	r3, [pc, #176]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800d4ee:	4b2b      	ldr	r3, [pc, #172]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800d4f4:	4829      	ldr	r0, [pc, #164]	; (800d59c <MX_SAI1_Init+0x13c>)
 800d4f6:	f7f8 fcab 	bl	8005e50 <HAL_SAI_Init>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d001      	beq.n	800d504 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 800d500:	f000 fa8e 	bl	800da20 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800d504:	4b28      	ldr	r3, [pc, #160]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d506:	4a29      	ldr	r2, [pc, #164]	; (800d5ac <MX_SAI1_Init+0x14c>)
 800d508:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800d50a:	4b27      	ldr	r3, [pc, #156]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d50c:	2200      	movs	r2, #0
 800d50e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800d510:	4b25      	ldr	r3, [pc, #148]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d512:	2203      	movs	r2, #3
 800d514:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800d516:	4b24      	ldr	r3, [pc, #144]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d518:	2240      	movs	r2, #64	; 0x40
 800d51a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800d51c:	4b22      	ldr	r3, [pc, #136]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d51e:	2200      	movs	r2, #0
 800d520:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800d522:	4b21      	ldr	r3, [pc, #132]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d524:	2200      	movs	r2, #0
 800d526:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800d528:	4b1f      	ldr	r3, [pc, #124]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d52a:	2201      	movs	r2, #1
 800d52c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800d52e:	4b1e      	ldr	r3, [pc, #120]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d530:	2200      	movs	r2, #0
 800d532:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800d534:	4b1c      	ldr	r3, [pc, #112]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d536:	2200      	movs	r2, #0
 800d538:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800d53a:	4b1b      	ldr	r3, [pc, #108]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d53c:	2200      	movs	r2, #0
 800d53e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800d540:	4b19      	ldr	r3, [pc, #100]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d542:	2200      	movs	r2, #0
 800d544:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800d546:	4b18      	ldr	r3, [pc, #96]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d548:	2200      	movs	r2, #0
 800d54a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800d54c:	4b16      	ldr	r3, [pc, #88]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d54e:	2200      	movs	r2, #0
 800d550:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800d552:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d554:	2208      	movs	r2, #8
 800d556:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800d558:	4b13      	ldr	r3, [pc, #76]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d55a:	2201      	movs	r2, #1
 800d55c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800d55e:	4b12      	ldr	r3, [pc, #72]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d560:	2200      	movs	r2, #0
 800d562:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800d564:	4b10      	ldr	r3, [pc, #64]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d566:	2200      	movs	r2, #0
 800d568:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800d56a:	4b0f      	ldr	r3, [pc, #60]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800d570:	4b0d      	ldr	r3, [pc, #52]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d572:	2200      	movs	r2, #0
 800d574:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800d576:	4b0c      	ldr	r3, [pc, #48]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d578:	2200      	movs	r2, #0
 800d57a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 800d57c:	4b0a      	ldr	r3, [pc, #40]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d57e:	2201      	movs	r2, #1
 800d580:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800d582:	4b09      	ldr	r3, [pc, #36]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d584:	2200      	movs	r2, #0
 800d586:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800d588:	4807      	ldr	r0, [pc, #28]	; (800d5a8 <MX_SAI1_Init+0x148>)
 800d58a:	f7f8 fc61 	bl	8005e50 <HAL_SAI_Init>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d001      	beq.n	800d598 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 800d594:	f000 fa44 	bl	800da20 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800d598:	bf00      	nop
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	20001cb0 	.word	0x20001cb0
 800d5a0:	40015404 	.word	0x40015404
 800d5a4:	0002ee00 	.word	0x0002ee00
 800d5a8:	20001b44 	.word	0x20001b44
 800d5ac:	40015424 	.word	0x40015424

0800d5b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800d5b4:	4b1b      	ldr	r3, [pc, #108]	; (800d624 <MX_SPI2_Init+0x74>)
 800d5b6:	4a1c      	ldr	r2, [pc, #112]	; (800d628 <MX_SPI2_Init+0x78>)
 800d5b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800d5ba:	4b1a      	ldr	r3, [pc, #104]	; (800d624 <MX_SPI2_Init+0x74>)
 800d5bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d5c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800d5c2:	4b18      	ldr	r3, [pc, #96]	; (800d624 <MX_SPI2_Init+0x74>)
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800d5c8:	4b16      	ldr	r3, [pc, #88]	; (800d624 <MX_SPI2_Init+0x74>)
 800d5ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 800d5ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d5d0:	4b14      	ldr	r3, [pc, #80]	; (800d624 <MX_SPI2_Init+0x74>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d5d6:	4b13      	ldr	r3, [pc, #76]	; (800d624 <MX_SPI2_Init+0x74>)
 800d5d8:	2200      	movs	r2, #0
 800d5da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800d5dc:	4b11      	ldr	r3, [pc, #68]	; (800d624 <MX_SPI2_Init+0x74>)
 800d5de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d5e4:	4b0f      	ldr	r3, [pc, #60]	; (800d624 <MX_SPI2_Init+0x74>)
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d5ea:	4b0e      	ldr	r3, [pc, #56]	; (800d624 <MX_SPI2_Init+0x74>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d5f0:	4b0c      	ldr	r3, [pc, #48]	; (800d624 <MX_SPI2_Init+0x74>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d5f6:	4b0b      	ldr	r3, [pc, #44]	; (800d624 <MX_SPI2_Init+0x74>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800d5fc:	4b09      	ldr	r3, [pc, #36]	; (800d624 <MX_SPI2_Init+0x74>)
 800d5fe:	2207      	movs	r2, #7
 800d600:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800d602:	4b08      	ldr	r3, [pc, #32]	; (800d624 <MX_SPI2_Init+0x74>)
 800d604:	2200      	movs	r2, #0
 800d606:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d608:	4b06      	ldr	r3, [pc, #24]	; (800d624 <MX_SPI2_Init+0x74>)
 800d60a:	2208      	movs	r2, #8
 800d60c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800d60e:	4805      	ldr	r0, [pc, #20]	; (800d624 <MX_SPI2_Init+0x74>)
 800d610:	f7f8 fdc2 	bl	8006198 <HAL_SPI_Init>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d001      	beq.n	800d61e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800d61a:	f000 fa01 	bl	800da20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800d61e:	bf00      	nop
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	200019f4 	.word	0x200019f4
 800d628:	40003800 	.word	0x40003800

0800d62c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08c      	sub	sp, #48	; 0x30
 800d630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d632:	f107 0320 	add.w	r3, r7, #32
 800d636:	2200      	movs	r2, #0
 800d638:	601a      	str	r2, [r3, #0]
 800d63a:	605a      	str	r2, [r3, #4]
 800d63c:	609a      	str	r2, [r3, #8]
 800d63e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800d640:	f107 030c 	add.w	r3, r7, #12
 800d644:	2200      	movs	r2, #0
 800d646:	601a      	str	r2, [r3, #0]
 800d648:	605a      	str	r2, [r3, #4]
 800d64a:	609a      	str	r2, [r3, #8]
 800d64c:	60da      	str	r2, [r3, #12]
 800d64e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d650:	463b      	mov	r3, r7
 800d652:	2200      	movs	r2, #0
 800d654:	601a      	str	r2, [r3, #0]
 800d656:	605a      	str	r2, [r3, #4]
 800d658:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800d65a:	4b25      	ldr	r3, [pc, #148]	; (800d6f0 <MX_TIM4_Init+0xc4>)
 800d65c:	4a25      	ldr	r2, [pc, #148]	; (800d6f4 <MX_TIM4_Init+0xc8>)
 800d65e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800d660:	4b23      	ldr	r3, [pc, #140]	; (800d6f0 <MX_TIM4_Init+0xc4>)
 800d662:	2200      	movs	r2, #0
 800d664:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d666:	4b22      	ldr	r3, [pc, #136]	; (800d6f0 <MX_TIM4_Init+0xc4>)
 800d668:	2200      	movs	r2, #0
 800d66a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1667;
 800d66c:	4b20      	ldr	r3, [pc, #128]	; (800d6f0 <MX_TIM4_Init+0xc4>)
 800d66e:	f240 6283 	movw	r2, #1667	; 0x683
 800d672:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d674:	4b1e      	ldr	r3, [pc, #120]	; (800d6f0 <MX_TIM4_Init+0xc4>)
 800d676:	2200      	movs	r2, #0
 800d678:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d67a:	4b1d      	ldr	r3, [pc, #116]	; (800d6f0 <MX_TIM4_Init+0xc4>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800d680:	481b      	ldr	r0, [pc, #108]	; (800d6f0 <MX_TIM4_Init+0xc4>)
 800d682:	f7f8 fe13 	bl	80062ac <HAL_TIM_Base_Init>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d001      	beq.n	800d690 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800d68c:	f000 f9c8 	bl	800da20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d694:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800d696:	f107 0320 	add.w	r3, r7, #32
 800d69a:	4619      	mov	r1, r3
 800d69c:	4814      	ldr	r0, [pc, #80]	; (800d6f0 <MX_TIM4_Init+0xc4>)
 800d69e:	f7f8 fe30 	bl	8006302 <HAL_TIM_ConfigClockSource>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d001      	beq.n	800d6ac <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800d6a8:	f000 f9ba 	bl	800da20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800d6b4:	f107 030c 	add.w	r3, r7, #12
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	480d      	ldr	r0, [pc, #52]	; (800d6f0 <MX_TIM4_Init+0xc4>)
 800d6bc:	f7f8 feda 	bl	8006474 <HAL_TIM_SlaveConfigSynchro>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d001      	beq.n	800d6ca <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800d6c6:	f000 f9ab 	bl	800da20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800d6ca:	2320      	movs	r3, #32
 800d6cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d6d2:	463b      	mov	r3, r7
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	4806      	ldr	r0, [pc, #24]	; (800d6f0 <MX_TIM4_Init+0xc4>)
 800d6d8:	f7f9 f8ca 	bl	8006870 <HAL_TIMEx_MasterConfigSynchronization>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <MX_TIM4_Init+0xba>
  {
    Error_Handler();
 800d6e2:	f000 f99d 	bl	800da20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800d6e6:	bf00      	nop
 800d6e8:	3730      	adds	r7, #48	; 0x30
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	20001a58 	.word	0x20001a58
 800d6f4:	40000800 	.word	0x40000800

0800d6f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800d6fc:	4b14      	ldr	r3, [pc, #80]	; (800d750 <MX_USART2_UART_Init+0x58>)
 800d6fe:	4a15      	ldr	r2, [pc, #84]	; (800d754 <MX_USART2_UART_Init+0x5c>)
 800d700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800d702:	4b13      	ldr	r3, [pc, #76]	; (800d750 <MX_USART2_UART_Init+0x58>)
 800d704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d70a:	4b11      	ldr	r3, [pc, #68]	; (800d750 <MX_USART2_UART_Init+0x58>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d710:	4b0f      	ldr	r3, [pc, #60]	; (800d750 <MX_USART2_UART_Init+0x58>)
 800d712:	2200      	movs	r2, #0
 800d714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d716:	4b0e      	ldr	r3, [pc, #56]	; (800d750 <MX_USART2_UART_Init+0x58>)
 800d718:	2200      	movs	r2, #0
 800d71a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d71c:	4b0c      	ldr	r3, [pc, #48]	; (800d750 <MX_USART2_UART_Init+0x58>)
 800d71e:	220c      	movs	r2, #12
 800d720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d722:	4b0b      	ldr	r3, [pc, #44]	; (800d750 <MX_USART2_UART_Init+0x58>)
 800d724:	2200      	movs	r2, #0
 800d726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d728:	4b09      	ldr	r3, [pc, #36]	; (800d750 <MX_USART2_UART_Init+0x58>)
 800d72a:	2200      	movs	r2, #0
 800d72c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d72e:	4b08      	ldr	r3, [pc, #32]	; (800d750 <MX_USART2_UART_Init+0x58>)
 800d730:	2200      	movs	r2, #0
 800d732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d734:	4b06      	ldr	r3, [pc, #24]	; (800d750 <MX_USART2_UART_Init+0x58>)
 800d736:	2200      	movs	r2, #0
 800d738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d73a:	4805      	ldr	r0, [pc, #20]	; (800d750 <MX_USART2_UART_Init+0x58>)
 800d73c:	f7f9 f920 	bl	8006980 <HAL_UART_Init>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d001      	beq.n	800d74a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800d746:	f000 f96b 	bl	800da20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800d74a:	bf00      	nop
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	20001d34 	.word	0x20001d34
 800d754:	40004400 	.word	0x40004400

0800d758 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800d75e:	4b0c      	ldr	r3, [pc, #48]	; (800d790 <MX_DMA_Init+0x38>)
 800d760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d762:	4a0b      	ldr	r2, [pc, #44]	; (800d790 <MX_DMA_Init+0x38>)
 800d764:	f043 0301 	orr.w	r3, r3, #1
 800d768:	6493      	str	r3, [r2, #72]	; 0x48
 800d76a:	4b09      	ldr	r3, [pc, #36]	; (800d790 <MX_DMA_Init+0x38>)
 800d76c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d76e:	f003 0301 	and.w	r3, r3, #1
 800d772:	607b      	str	r3, [r7, #4]
 800d774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800d776:	2200      	movs	r2, #0
 800d778:	2105      	movs	r1, #5
 800d77a:	200b      	movs	r0, #11
 800d77c:	f7f3 ff27 	bl	80015ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800d780:	200b      	movs	r0, #11
 800d782:	f7f3 ff40 	bl	8001606 <HAL_NVIC_EnableIRQ>

}
 800d786:	bf00      	nop
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	40021000 	.word	0x40021000

0800d794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b08c      	sub	sp, #48	; 0x30
 800d798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d79a:	f107 031c 	add.w	r3, r7, #28
 800d79e:	2200      	movs	r2, #0
 800d7a0:	601a      	str	r2, [r3, #0]
 800d7a2:	605a      	str	r2, [r3, #4]
 800d7a4:	609a      	str	r2, [r3, #8]
 800d7a6:	60da      	str	r2, [r3, #12]
 800d7a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d7aa:	4b92      	ldr	r3, [pc, #584]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d7ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ae:	4a91      	ldr	r2, [pc, #580]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d7b0:	f043 0310 	orr.w	r3, r3, #16
 800d7b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d7b6:	4b8f      	ldr	r3, [pc, #572]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d7b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ba:	f003 0310 	and.w	r3, r3, #16
 800d7be:	61bb      	str	r3, [r7, #24]
 800d7c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d7c2:	4b8c      	ldr	r3, [pc, #560]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7c6:	4a8b      	ldr	r2, [pc, #556]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d7c8:	f043 0304 	orr.w	r3, r3, #4
 800d7cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d7ce:	4b89      	ldr	r3, [pc, #548]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7d2:	f003 0304 	and.w	r3, r3, #4
 800d7d6:	617b      	str	r3, [r7, #20]
 800d7d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d7da:	4b86      	ldr	r3, [pc, #536]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d7dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7de:	4a85      	ldr	r2, [pc, #532]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d7e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d7e6:	4b83      	ldr	r3, [pc, #524]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7ee:	613b      	str	r3, [r7, #16]
 800d7f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d7f2:	4b80      	ldr	r3, [pc, #512]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d7f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7f6:	4a7f      	ldr	r2, [pc, #508]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d7f8:	f043 0301 	orr.w	r3, r3, #1
 800d7fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d7fe:	4b7d      	ldr	r3, [pc, #500]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d802:	f003 0301 	and.w	r3, r3, #1
 800d806:	60fb      	str	r3, [r7, #12]
 800d808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d80a:	4b7a      	ldr	r3, [pc, #488]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d80c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d80e:	4a79      	ldr	r2, [pc, #484]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d810:	f043 0302 	orr.w	r3, r3, #2
 800d814:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d816:	4b77      	ldr	r3, [pc, #476]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d81a:	f003 0302 	and.w	r3, r3, #2
 800d81e:	60bb      	str	r3, [r7, #8]
 800d820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d822:	4b74      	ldr	r3, [pc, #464]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d826:	4a73      	ldr	r2, [pc, #460]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d828:	f043 0308 	orr.w	r3, r3, #8
 800d82c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d82e:	4b71      	ldr	r3, [pc, #452]	; (800d9f4 <MX_GPIO_Init+0x260>)
 800d830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d832:	f003 0308 	and.w	r3, r3, #8
 800d836:	607b      	str	r3, [r7, #4]
 800d838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 800d83a:	2200      	movs	r2, #0
 800d83c:	f240 1109 	movw	r1, #265	; 0x109
 800d840:	486d      	ldr	r0, [pc, #436]	; (800d9f8 <MX_GPIO_Init+0x264>)
 800d842:	f7f4 fb47 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800d846:	2200      	movs	r2, #0
 800d848:	210c      	movs	r1, #12
 800d84a:	486c      	ldr	r0, [pc, #432]	; (800d9fc <MX_GPIO_Init+0x268>)
 800d84c:	f7f4 fb42 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800d850:	2201      	movs	r2, #1
 800d852:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d856:	486a      	ldr	r0, [pc, #424]	; (800da00 <MX_GPIO_Init+0x26c>)
 800d858:	f7f4 fb3c 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 800d85c:	2200      	movs	r2, #0
 800d85e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d862:	4867      	ldr	r0, [pc, #412]	; (800da00 <MX_GPIO_Init+0x26c>)
 800d864:	f7f4 fb36 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800d868:	2200      	movs	r2, #0
 800d86a:	2180      	movs	r1, #128	; 0x80
 800d86c:	4865      	ldr	r0, [pc, #404]	; (800da04 <MX_GPIO_Init+0x270>)
 800d86e:	f7f4 fb31 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800d872:	2308      	movs	r3, #8
 800d874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d876:	2301      	movs	r3, #1
 800d878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d87a:	2300      	movs	r3, #0
 800d87c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d87e:	2302      	movs	r3, #2
 800d880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 800d882:	f107 031c 	add.w	r3, r7, #28
 800d886:	4619      	mov	r1, r3
 800d888:	485b      	ldr	r0, [pc, #364]	; (800d9f8 <MX_GPIO_Init+0x264>)
 800d88a:	f7f4 f97b 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 800d88e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800d892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800d894:	4b5c      	ldr	r3, [pc, #368]	; (800da08 <MX_GPIO_Init+0x274>)
 800d896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d898:	2300      	movs	r3, #0
 800d89a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d89c:	f107 031c 	add.w	r3, r7, #28
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	4857      	ldr	r0, [pc, #348]	; (800da00 <MX_GPIO_Init+0x26c>)
 800d8a4:	f7f4 f96e 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 800d8a8:	2307      	movs	r3, #7
 800d8aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d8b4:	f107 031c 	add.w	r3, r7, #28
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	4851      	ldr	r0, [pc, #324]	; (800da00 <MX_GPIO_Init+0x26c>)
 800d8bc:	f7f4 f962 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_RIGHT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_RIGHT_Pin|JOY_UP_Pin;
 800d8c0:	230d      	movs	r3, #13
 800d8c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8cc:	f107 031c 	add.w	r3, r7, #28
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d8d6:	f7f4 f955 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800d8da:	2310      	movs	r3, #16
 800d8dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800d8de:	4b4a      	ldr	r3, [pc, #296]	; (800da08 <MX_GPIO_Init+0x274>)
 800d8e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800d8e6:	f107 031c 	add.w	r3, r7, #28
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d8f0:	f7f4 f948 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 800d8f4:	2304      	movs	r3, #4
 800d8f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d900:	2303      	movs	r3, #3
 800d902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800d904:	f107 031c 	add.w	r3, r7, #28
 800d908:	4619      	mov	r1, r3
 800d90a:	483c      	ldr	r0, [pc, #240]	; (800d9fc <MX_GPIO_Init+0x268>)
 800d90c:	f7f4 f93a 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 800d910:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d916:	2301      	movs	r3, #1
 800d918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d91a:	2301      	movs	r3, #1
 800d91c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d91e:	2303      	movs	r3, #3
 800d920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800d922:	f107 031c 	add.w	r3, r7, #28
 800d926:	4619      	mov	r1, r3
 800d928:	4833      	ldr	r0, [pc, #204]	; (800d9f8 <MX_GPIO_Init+0x264>)
 800d92a:	f7f4 f92b 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 800d92e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800d932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d934:	2301      	movs	r3, #1
 800d936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d938:	2300      	movs	r3, #0
 800d93a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d93c:	2300      	movs	r3, #0
 800d93e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d940:	f107 031c 	add.w	r3, r7, #28
 800d944:	4619      	mov	r1, r3
 800d946:	482e      	ldr	r0, [pc, #184]	; (800da00 <MX_GPIO_Init+0x26c>)
 800d948:	f7f4 f91c 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 800d94c:	2305      	movs	r3, #5
 800d94e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800d950:	4b2d      	ldr	r3, [pc, #180]	; (800da08 <MX_GPIO_Init+0x274>)
 800d952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d954:	2300      	movs	r3, #0
 800d956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d958:	f107 031c 	add.w	r3, r7, #28
 800d95c:	4619      	mov	r1, r3
 800d95e:	4829      	ldr	r0, [pc, #164]	; (800da04 <MX_GPIO_Init+0x270>)
 800d960:	f7f4 f910 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 800d964:	2380      	movs	r3, #128	; 0x80
 800d966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d968:	2301      	movs	r3, #1
 800d96a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d96c:	2300      	movs	r3, #0
 800d96e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d970:	2303      	movs	r3, #3
 800d972:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 800d974:	f107 031c 	add.w	r3, r7, #28
 800d978:	4619      	mov	r1, r3
 800d97a:	4822      	ldr	r0, [pc, #136]	; (800da04 <MX_GPIO_Init+0x270>)
 800d97c:	f7f4 f902 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 800d980:	2308      	movs	r3, #8
 800d982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d984:	2301      	movs	r3, #1
 800d986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d988:	2300      	movs	r3, #0
 800d98a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d98c:	2300      	movs	r3, #0
 800d98e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 800d990:	f107 031c 	add.w	r3, r7, #28
 800d994:	4619      	mov	r1, r3
 800d996:	4819      	ldr	r0, [pc, #100]	; (800d9fc <MX_GPIO_Init+0x268>)
 800d998:	f7f4 f8f4 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 800d99c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800d9a2:	4b19      	ldr	r3, [pc, #100]	; (800da08 <MX_GPIO_Init+0x274>)
 800d9a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 800d9aa:	f107 031c 	add.w	r3, r7, #28
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	4812      	ldr	r0, [pc, #72]	; (800d9fc <MX_GPIO_Init+0x268>)
 800d9b2:	f7f4 f8e7 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 800d9c6:	f107 031c 	add.w	r3, r7, #28
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	480a      	ldr	r0, [pc, #40]	; (800d9f8 <MX_GPIO_Init+0x264>)
 800d9ce:	f7f4 f8d9 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800d9d6:	4b0c      	ldr	r3, [pc, #48]	; (800da08 <MX_GPIO_Init+0x274>)
 800d9d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 800d9de:	f107 031c 	add.w	r3, r7, #28
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	4804      	ldr	r0, [pc, #16]	; (800d9f8 <MX_GPIO_Init+0x264>)
 800d9e6:	f7f4 f8cd 	bl	8001b84 <HAL_GPIO_Init>

}
 800d9ea:	bf00      	nop
 800d9ec:	3730      	adds	r7, #48	; 0x30
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	40021000 	.word	0x40021000
 800d9f8:	48001000 	.word	0x48001000
 800d9fc:	48000400 	.word	0x48000400
 800da00:	48000800 	.word	0x48000800
 800da04:	48000c00 	.word	0x48000c00
 800da08:	10120000 	.word	0x10120000

0800da0c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800da14:	f000 fbf8 	bl	800e208 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800da18:	2001      	movs	r0, #1
 800da1a:	f7fc fc5d 	bl	800a2d8 <osDelay>
 800da1e:	e7fb      	b.n	800da18 <StartDefaultTask+0xc>

0800da20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800da20:	b480      	push	{r7}
 800da22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800da24:	bf00      	nop
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
	...

0800da30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da36:	4b11      	ldr	r3, [pc, #68]	; (800da7c <HAL_MspInit+0x4c>)
 800da38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da3a:	4a10      	ldr	r2, [pc, #64]	; (800da7c <HAL_MspInit+0x4c>)
 800da3c:	f043 0301 	orr.w	r3, r3, #1
 800da40:	6613      	str	r3, [r2, #96]	; 0x60
 800da42:	4b0e      	ldr	r3, [pc, #56]	; (800da7c <HAL_MspInit+0x4c>)
 800da44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da46:	f003 0301 	and.w	r3, r3, #1
 800da4a:	607b      	str	r3, [r7, #4]
 800da4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800da4e:	4b0b      	ldr	r3, [pc, #44]	; (800da7c <HAL_MspInit+0x4c>)
 800da50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da52:	4a0a      	ldr	r2, [pc, #40]	; (800da7c <HAL_MspInit+0x4c>)
 800da54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da58:	6593      	str	r3, [r2, #88]	; 0x58
 800da5a:	4b08      	ldr	r3, [pc, #32]	; (800da7c <HAL_MspInit+0x4c>)
 800da5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da62:	603b      	str	r3, [r7, #0]
 800da64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800da66:	2200      	movs	r2, #0
 800da68:	210f      	movs	r1, #15
 800da6a:	f06f 0001 	mvn.w	r0, #1
 800da6e:	f7f3 fdae 	bl	80015ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800da72:	bf00      	nop
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	40021000 	.word	0x40021000

0800da80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b08a      	sub	sp, #40	; 0x28
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da88:	f107 0314 	add.w	r3, r7, #20
 800da8c:	2200      	movs	r2, #0
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	605a      	str	r2, [r3, #4]
 800da92:	609a      	str	r2, [r3, #8]
 800da94:	60da      	str	r2, [r3, #12]
 800da96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a2b      	ldr	r2, [pc, #172]	; (800db4c <HAL_ADC_MspInit+0xcc>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d14f      	bne.n	800db42 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800daa2:	4b2b      	ldr	r3, [pc, #172]	; (800db50 <HAL_ADC_MspInit+0xd0>)
 800daa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800daa6:	4a2a      	ldr	r2, [pc, #168]	; (800db50 <HAL_ADC_MspInit+0xd0>)
 800daa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800daac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800daae:	4b28      	ldr	r3, [pc, #160]	; (800db50 <HAL_ADC_MspInit+0xd0>)
 800dab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dab6:	613b      	str	r3, [r7, #16]
 800dab8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800daba:	4b25      	ldr	r3, [pc, #148]	; (800db50 <HAL_ADC_MspInit+0xd0>)
 800dabc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dabe:	4a24      	ldr	r2, [pc, #144]	; (800db50 <HAL_ADC_MspInit+0xd0>)
 800dac0:	f043 0301 	orr.w	r3, r3, #1
 800dac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dac6:	4b22      	ldr	r3, [pc, #136]	; (800db50 <HAL_ADC_MspInit+0xd0>)
 800dac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800daca:	f003 0301 	and.w	r3, r3, #1
 800dace:	60fb      	str	r3, [r7, #12]
 800dad0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800dad2:	2302      	movs	r3, #2
 800dad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800dad6:	230b      	movs	r3, #11
 800dad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dada:	2300      	movs	r3, #0
 800dadc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dade:	f107 0314 	add.w	r3, r7, #20
 800dae2:	4619      	mov	r1, r3
 800dae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dae8:	f7f4 f84c 	bl	8001b84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800daec:	4b19      	ldr	r3, [pc, #100]	; (800db54 <HAL_ADC_MspInit+0xd4>)
 800daee:	4a1a      	ldr	r2, [pc, #104]	; (800db58 <HAL_ADC_MspInit+0xd8>)
 800daf0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800daf2:	4b18      	ldr	r3, [pc, #96]	; (800db54 <HAL_ADC_MspInit+0xd4>)
 800daf4:	2200      	movs	r2, #0
 800daf6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800daf8:	4b16      	ldr	r3, [pc, #88]	; (800db54 <HAL_ADC_MspInit+0xd4>)
 800dafa:	2200      	movs	r2, #0
 800dafc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800dafe:	4b15      	ldr	r3, [pc, #84]	; (800db54 <HAL_ADC_MspInit+0xd4>)
 800db00:	2200      	movs	r2, #0
 800db02:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800db04:	4b13      	ldr	r3, [pc, #76]	; (800db54 <HAL_ADC_MspInit+0xd4>)
 800db06:	2280      	movs	r2, #128	; 0x80
 800db08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800db0a:	4b12      	ldr	r3, [pc, #72]	; (800db54 <HAL_ADC_MspInit+0xd4>)
 800db0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800db12:	4b10      	ldr	r3, [pc, #64]	; (800db54 <HAL_ADC_MspInit+0xd4>)
 800db14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800db18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800db1a:	4b0e      	ldr	r3, [pc, #56]	; (800db54 <HAL_ADC_MspInit+0xd4>)
 800db1c:	2200      	movs	r2, #0
 800db1e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800db20:	4b0c      	ldr	r3, [pc, #48]	; (800db54 <HAL_ADC_MspInit+0xd4>)
 800db22:	2200      	movs	r2, #0
 800db24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800db26:	480b      	ldr	r0, [pc, #44]	; (800db54 <HAL_ADC_MspInit+0xd4>)
 800db28:	f7f3 fec4 	bl	80018b4 <HAL_DMA_Init>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d001      	beq.n	800db36 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800db32:	f7ff ff75 	bl	800da20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4a06      	ldr	r2, [pc, #24]	; (800db54 <HAL_ADC_MspInit+0xd4>)
 800db3a:	64da      	str	r2, [r3, #76]	; 0x4c
 800db3c:	4a05      	ldr	r2, [pc, #20]	; (800db54 <HAL_ADC_MspInit+0xd4>)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800db42:	bf00      	nop
 800db44:	3728      	adds	r7, #40	; 0x28
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	50040000 	.word	0x50040000
 800db50:	40021000 	.word	0x40021000
 800db54:	20001c2c 	.word	0x20001c2c
 800db58:	40020008 	.word	0x40020008

0800db5c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b08a      	sub	sp, #40	; 0x28
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db64:	f107 0314 	add.w	r3, r7, #20
 800db68:	2200      	movs	r2, #0
 800db6a:	601a      	str	r2, [r3, #0]
 800db6c:	605a      	str	r2, [r3, #4]
 800db6e:	609a      	str	r2, [r3, #8]
 800db70:	60da      	str	r2, [r3, #12]
 800db72:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a15      	ldr	r2, [pc, #84]	; (800dbd0 <HAL_DAC_MspInit+0x74>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d124      	bne.n	800dbc8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800db7e:	4b15      	ldr	r3, [pc, #84]	; (800dbd4 <HAL_DAC_MspInit+0x78>)
 800db80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db82:	4a14      	ldr	r2, [pc, #80]	; (800dbd4 <HAL_DAC_MspInit+0x78>)
 800db84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db88:	6593      	str	r3, [r2, #88]	; 0x58
 800db8a:	4b12      	ldr	r3, [pc, #72]	; (800dbd4 <HAL_DAC_MspInit+0x78>)
 800db8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db92:	613b      	str	r3, [r7, #16]
 800db94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db96:	4b0f      	ldr	r3, [pc, #60]	; (800dbd4 <HAL_DAC_MspInit+0x78>)
 800db98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db9a:	4a0e      	ldr	r2, [pc, #56]	; (800dbd4 <HAL_DAC_MspInit+0x78>)
 800db9c:	f043 0301 	orr.w	r3, r3, #1
 800dba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dba2:	4b0c      	ldr	r3, [pc, #48]	; (800dbd4 <HAL_DAC_MspInit+0x78>)
 800dba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dba6:	f003 0301 	and.w	r3, r3, #1
 800dbaa:	60fb      	str	r3, [r7, #12]
 800dbac:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800dbae:	2320      	movs	r3, #32
 800dbb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dbb2:	2303      	movs	r3, #3
 800dbb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dbba:	f107 0314 	add.w	r3, r7, #20
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dbc4:	f7f3 ffde 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800dbc8:	bf00      	nop
 800dbca:	3728      	adds	r7, #40	; 0x28
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	40007400 	.word	0x40007400
 800dbd4:	40021000 	.word	0x40021000

0800dbd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b08c      	sub	sp, #48	; 0x30
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dbe0:	f107 031c 	add.w	r3, r7, #28
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	601a      	str	r2, [r3, #0]
 800dbe8:	605a      	str	r2, [r3, #4]
 800dbea:	609a      	str	r2, [r3, #8]
 800dbec:	60da      	str	r2, [r3, #12]
 800dbee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a2e      	ldr	r2, [pc, #184]	; (800dcb0 <HAL_I2C_MspInit+0xd8>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d128      	bne.n	800dc4c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dbfa:	4b2e      	ldr	r3, [pc, #184]	; (800dcb4 <HAL_I2C_MspInit+0xdc>)
 800dbfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbfe:	4a2d      	ldr	r2, [pc, #180]	; (800dcb4 <HAL_I2C_MspInit+0xdc>)
 800dc00:	f043 0302 	orr.w	r3, r3, #2
 800dc04:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dc06:	4b2b      	ldr	r3, [pc, #172]	; (800dcb4 <HAL_I2C_MspInit+0xdc>)
 800dc08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc0a:	f003 0302 	and.w	r3, r3, #2
 800dc0e:	61bb      	str	r3, [r7, #24]
 800dc10:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800dc12:	23c0      	movs	r3, #192	; 0xc0
 800dc14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800dc16:	2312      	movs	r3, #18
 800dc18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc1e:	2303      	movs	r3, #3
 800dc20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800dc22:	2304      	movs	r3, #4
 800dc24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dc26:	f107 031c 	add.w	r3, r7, #28
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	4822      	ldr	r0, [pc, #136]	; (800dcb8 <HAL_I2C_MspInit+0xe0>)
 800dc2e:	f7f3 ffa9 	bl	8001b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800dc32:	4b20      	ldr	r3, [pc, #128]	; (800dcb4 <HAL_I2C_MspInit+0xdc>)
 800dc34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc36:	4a1f      	ldr	r2, [pc, #124]	; (800dcb4 <HAL_I2C_MspInit+0xdc>)
 800dc38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dc3c:	6593      	str	r3, [r2, #88]	; 0x58
 800dc3e:	4b1d      	ldr	r3, [pc, #116]	; (800dcb4 <HAL_I2C_MspInit+0xdc>)
 800dc40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc46:	617b      	str	r3, [r7, #20]
 800dc48:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800dc4a:	e02d      	b.n	800dca8 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a1a      	ldr	r2, [pc, #104]	; (800dcbc <HAL_I2C_MspInit+0xe4>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d128      	bne.n	800dca8 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dc56:	4b17      	ldr	r3, [pc, #92]	; (800dcb4 <HAL_I2C_MspInit+0xdc>)
 800dc58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc5a:	4a16      	ldr	r2, [pc, #88]	; (800dcb4 <HAL_I2C_MspInit+0xdc>)
 800dc5c:	f043 0302 	orr.w	r3, r3, #2
 800dc60:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dc62:	4b14      	ldr	r3, [pc, #80]	; (800dcb4 <HAL_I2C_MspInit+0xdc>)
 800dc64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc66:	f003 0302 	and.w	r3, r3, #2
 800dc6a:	613b      	str	r3, [r7, #16]
 800dc6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800dc6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800dc72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800dc74:	2312      	movs	r3, #18
 800dc76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc7c:	2303      	movs	r3, #3
 800dc7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800dc80:	2304      	movs	r3, #4
 800dc82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dc84:	f107 031c 	add.w	r3, r7, #28
 800dc88:	4619      	mov	r1, r3
 800dc8a:	480b      	ldr	r0, [pc, #44]	; (800dcb8 <HAL_I2C_MspInit+0xe0>)
 800dc8c:	f7f3 ff7a 	bl	8001b84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800dc90:	4b08      	ldr	r3, [pc, #32]	; (800dcb4 <HAL_I2C_MspInit+0xdc>)
 800dc92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc94:	4a07      	ldr	r2, [pc, #28]	; (800dcb4 <HAL_I2C_MspInit+0xdc>)
 800dc96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dc9a:	6593      	str	r3, [r2, #88]	; 0x58
 800dc9c:	4b05      	ldr	r3, [pc, #20]	; (800dcb4 <HAL_I2C_MspInit+0xdc>)
 800dc9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dca4:	60fb      	str	r3, [r7, #12]
 800dca6:	68fb      	ldr	r3, [r7, #12]
}
 800dca8:	bf00      	nop
 800dcaa:	3730      	adds	r7, #48	; 0x30
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	40005400 	.word	0x40005400
 800dcb4:	40021000 	.word	0x40021000
 800dcb8:	48000400 	.word	0x48000400
 800dcbc:	40005800 	.word	0x40005800

0800dcc0 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b08c      	sub	sp, #48	; 0x30
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dcc8:	f107 031c 	add.w	r3, r7, #28
 800dccc:	2200      	movs	r2, #0
 800dcce:	601a      	str	r2, [r3, #0]
 800dcd0:	605a      	str	r2, [r3, #4]
 800dcd2:	609a      	str	r2, [r3, #8]
 800dcd4:	60da      	str	r2, [r3, #12]
 800dcd6:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a44      	ldr	r2, [pc, #272]	; (800ddf0 <HAL_LCD_MspInit+0x130>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	f040 8081 	bne.w	800dde6 <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800dce4:	4b43      	ldr	r3, [pc, #268]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dce8:	4a42      	ldr	r2, [pc, #264]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dcea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dcee:	6593      	str	r3, [r2, #88]	; 0x58
 800dcf0:	4b40      	ldr	r3, [pc, #256]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dcf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dcf8:	61bb      	str	r3, [r7, #24]
 800dcfa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dcfc:	4b3d      	ldr	r3, [pc, #244]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dcfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd00:	4a3c      	ldr	r2, [pc, #240]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dd02:	f043 0304 	orr.w	r3, r3, #4
 800dd06:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dd08:	4b3a      	ldr	r3, [pc, #232]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dd0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd0c:	f003 0304 	and.w	r3, r3, #4
 800dd10:	617b      	str	r3, [r7, #20]
 800dd12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd14:	4b37      	ldr	r3, [pc, #220]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dd16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd18:	4a36      	ldr	r2, [pc, #216]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dd1a:	f043 0301 	orr.w	r3, r3, #1
 800dd1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dd20:	4b34      	ldr	r3, [pc, #208]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dd22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd24:	f003 0301 	and.w	r3, r3, #1
 800dd28:	613b      	str	r3, [r7, #16]
 800dd2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dd2c:	4b31      	ldr	r3, [pc, #196]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dd2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd30:	4a30      	ldr	r2, [pc, #192]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dd32:	f043 0302 	orr.w	r3, r3, #2
 800dd36:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dd38:	4b2e      	ldr	r3, [pc, #184]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dd3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd3c:	f003 0302 	and.w	r3, r3, #2
 800dd40:	60fb      	str	r3, [r7, #12]
 800dd42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800dd44:	4b2b      	ldr	r3, [pc, #172]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dd46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd48:	4a2a      	ldr	r2, [pc, #168]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dd4a:	f043 0308 	orr.w	r3, r3, #8
 800dd4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dd50:	4b28      	ldr	r3, [pc, #160]	; (800ddf4 <HAL_LCD_MspInit+0x134>)
 800dd52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd54:	f003 0308 	and.w	r3, r3, #8
 800dd58:	60bb      	str	r3, [r7, #8]
 800dd5a:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 800dd5c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800dd60:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd62:	2302      	movs	r3, #2
 800dd64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd66:	2300      	movs	r3, #0
 800dd68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800dd6e:	230b      	movs	r3, #11
 800dd70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dd72:	f107 031c 	add.w	r3, r7, #28
 800dd76:	4619      	mov	r1, r3
 800dd78:	481f      	ldr	r0, [pc, #124]	; (800ddf8 <HAL_LCD_MspInit+0x138>)
 800dd7a:	f7f3 ff03 	bl	8001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 800dd7e:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800dd82:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd84:	2302      	movs	r3, #2
 800dd86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800dd90:	230b      	movs	r3, #11
 800dd92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd94:	f107 031c 	add.w	r3, r7, #28
 800dd98:	4619      	mov	r1, r3
 800dd9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dd9e:	f7f3 fef1 	bl	8001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 800dda2:	f24f 2333 	movw	r3, #62003	; 0xf233
 800dda6:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dda8:	2302      	movs	r3, #2
 800ddaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddac:	2300      	movs	r3, #0
 800ddae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800ddb4:	230b      	movs	r3, #11
 800ddb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ddb8:	f107 031c 	add.w	r3, r7, #28
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	480f      	ldr	r0, [pc, #60]	; (800ddfc <HAL_LCD_MspInit+0x13c>)
 800ddc0:	f7f3 fee0 	bl	8001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 800ddc4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800ddc8:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddca:	2302      	movs	r3, #2
 800ddcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800ddd6:	230b      	movs	r3, #11
 800ddd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ddda:	f107 031c 	add.w	r3, r7, #28
 800ddde:	4619      	mov	r1, r3
 800dde0:	4807      	ldr	r0, [pc, #28]	; (800de00 <HAL_LCD_MspInit+0x140>)
 800dde2:	f7f3 fecf 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 800dde6:	bf00      	nop
 800dde8:	3730      	adds	r7, #48	; 0x30
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	40002400 	.word	0x40002400
 800ddf4:	40021000 	.word	0x40021000
 800ddf8:	48000800 	.word	0x48000800
 800ddfc:	48000400 	.word	0x48000400
 800de00:	48000c00 	.word	0x48000c00

0800de04 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b08a      	sub	sp, #40	; 0x28
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de0c:	f107 0314 	add.w	r3, r7, #20
 800de10:	2200      	movs	r2, #0
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	605a      	str	r2, [r3, #4]
 800de16:	609a      	str	r2, [r3, #8]
 800de18:	60da      	str	r2, [r3, #12]
 800de1a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a17      	ldr	r2, [pc, #92]	; (800de80 <HAL_QSPI_MspInit+0x7c>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d128      	bne.n	800de78 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800de26:	4b17      	ldr	r3, [pc, #92]	; (800de84 <HAL_QSPI_MspInit+0x80>)
 800de28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de2a:	4a16      	ldr	r2, [pc, #88]	; (800de84 <HAL_QSPI_MspInit+0x80>)
 800de2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de30:	6513      	str	r3, [r2, #80]	; 0x50
 800de32:	4b14      	ldr	r3, [pc, #80]	; (800de84 <HAL_QSPI_MspInit+0x80>)
 800de34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de3a:	613b      	str	r3, [r7, #16]
 800de3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800de3e:	4b11      	ldr	r3, [pc, #68]	; (800de84 <HAL_QSPI_MspInit+0x80>)
 800de40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de42:	4a10      	ldr	r2, [pc, #64]	; (800de84 <HAL_QSPI_MspInit+0x80>)
 800de44:	f043 0310 	orr.w	r3, r3, #16
 800de48:	64d3      	str	r3, [r2, #76]	; 0x4c
 800de4a:	4b0e      	ldr	r3, [pc, #56]	; (800de84 <HAL_QSPI_MspInit+0x80>)
 800de4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de4e:	f003 0310 	and.w	r3, r3, #16
 800de52:	60fb      	str	r3, [r7, #12]
 800de54:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 800de56:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800de5a:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de5c:	2302      	movs	r3, #2
 800de5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de60:	2300      	movs	r3, #0
 800de62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de64:	2303      	movs	r3, #3
 800de66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800de68:	230a      	movs	r3, #10
 800de6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800de6c:	f107 0314 	add.w	r3, r7, #20
 800de70:	4619      	mov	r1, r3
 800de72:	4805      	ldr	r0, [pc, #20]	; (800de88 <HAL_QSPI_MspInit+0x84>)
 800de74:	f7f3 fe86 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800de78:	bf00      	nop
 800de7a:	3728      	adds	r7, #40	; 0x28
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	a0001000 	.word	0xa0001000
 800de84:	40021000 	.word	0x40021000
 800de88:	48001000 	.word	0x48001000

0800de8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b08a      	sub	sp, #40	; 0x28
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de94:	f107 0314 	add.w	r3, r7, #20
 800de98:	2200      	movs	r2, #0
 800de9a:	601a      	str	r2, [r3, #0]
 800de9c:	605a      	str	r2, [r3, #4]
 800de9e:	609a      	str	r2, [r3, #8]
 800dea0:	60da      	str	r2, [r3, #12]
 800dea2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	4a17      	ldr	r2, [pc, #92]	; (800df08 <HAL_SPI_MspInit+0x7c>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d127      	bne.n	800defe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800deae:	4b17      	ldr	r3, [pc, #92]	; (800df0c <HAL_SPI_MspInit+0x80>)
 800deb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deb2:	4a16      	ldr	r2, [pc, #88]	; (800df0c <HAL_SPI_MspInit+0x80>)
 800deb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800deb8:	6593      	str	r3, [r2, #88]	; 0x58
 800deba:	4b14      	ldr	r3, [pc, #80]	; (800df0c <HAL_SPI_MspInit+0x80>)
 800debc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800debe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dec2:	613b      	str	r3, [r7, #16]
 800dec4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800dec6:	4b11      	ldr	r3, [pc, #68]	; (800df0c <HAL_SPI_MspInit+0x80>)
 800dec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800deca:	4a10      	ldr	r2, [pc, #64]	; (800df0c <HAL_SPI_MspInit+0x80>)
 800decc:	f043 0308 	orr.w	r3, r3, #8
 800ded0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ded2:	4b0e      	ldr	r3, [pc, #56]	; (800df0c <HAL_SPI_MspInit+0x80>)
 800ded4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ded6:	f003 0308 	and.w	r3, r3, #8
 800deda:	60fb      	str	r3, [r7, #12]
 800dedc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 800dede:	231a      	movs	r3, #26
 800dee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dee2:	2302      	movs	r3, #2
 800dee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dee6:	2300      	movs	r3, #0
 800dee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800deea:	2303      	movs	r3, #3
 800deec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800deee:	2305      	movs	r3, #5
 800def0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800def2:	f107 0314 	add.w	r3, r7, #20
 800def6:	4619      	mov	r1, r3
 800def8:	4805      	ldr	r0, [pc, #20]	; (800df10 <HAL_SPI_MspInit+0x84>)
 800defa:	f7f3 fe43 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800defe:	bf00      	nop
 800df00:	3728      	adds	r7, #40	; 0x28
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	40003800 	.word	0x40003800
 800df0c:	40021000 	.word	0x40021000
 800df10:	48000c00 	.word	0x48000c00

0800df14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a0a      	ldr	r2, [pc, #40]	; (800df4c <HAL_TIM_Base_MspInit+0x38>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d10b      	bne.n	800df3e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800df26:	4b0a      	ldr	r3, [pc, #40]	; (800df50 <HAL_TIM_Base_MspInit+0x3c>)
 800df28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df2a:	4a09      	ldr	r2, [pc, #36]	; (800df50 <HAL_TIM_Base_MspInit+0x3c>)
 800df2c:	f043 0304 	orr.w	r3, r3, #4
 800df30:	6593      	str	r3, [r2, #88]	; 0x58
 800df32:	4b07      	ldr	r3, [pc, #28]	; (800df50 <HAL_TIM_Base_MspInit+0x3c>)
 800df34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df36:	f003 0304 	and.w	r3, r3, #4
 800df3a:	60fb      	str	r3, [r7, #12]
 800df3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800df3e:	bf00      	nop
 800df40:	3714      	adds	r7, #20
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	40000800 	.word	0x40000800
 800df50:	40021000 	.word	0x40021000

0800df54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b08a      	sub	sp, #40	; 0x28
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df5c:	f107 0314 	add.w	r3, r7, #20
 800df60:	2200      	movs	r2, #0
 800df62:	601a      	str	r2, [r3, #0]
 800df64:	605a      	str	r2, [r3, #4]
 800df66:	609a      	str	r2, [r3, #8]
 800df68:	60da      	str	r2, [r3, #12]
 800df6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a17      	ldr	r2, [pc, #92]	; (800dfd0 <HAL_UART_MspInit+0x7c>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d127      	bne.n	800dfc6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800df76:	4b17      	ldr	r3, [pc, #92]	; (800dfd4 <HAL_UART_MspInit+0x80>)
 800df78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df7a:	4a16      	ldr	r2, [pc, #88]	; (800dfd4 <HAL_UART_MspInit+0x80>)
 800df7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df80:	6593      	str	r3, [r2, #88]	; 0x58
 800df82:	4b14      	ldr	r3, [pc, #80]	; (800dfd4 <HAL_UART_MspInit+0x80>)
 800df84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df8a:	613b      	str	r3, [r7, #16]
 800df8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800df8e:	4b11      	ldr	r3, [pc, #68]	; (800dfd4 <HAL_UART_MspInit+0x80>)
 800df90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df92:	4a10      	ldr	r2, [pc, #64]	; (800dfd4 <HAL_UART_MspInit+0x80>)
 800df94:	f043 0308 	orr.w	r3, r3, #8
 800df98:	64d3      	str	r3, [r2, #76]	; 0x4c
 800df9a:	4b0e      	ldr	r3, [pc, #56]	; (800dfd4 <HAL_UART_MspInit+0x80>)
 800df9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df9e:	f003 0308 	and.w	r3, r3, #8
 800dfa2:	60fb      	str	r3, [r7, #12]
 800dfa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800dfa6:	2360      	movs	r3, #96	; 0x60
 800dfa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfaa:	2302      	movs	r3, #2
 800dfac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dfb2:	2303      	movs	r3, #3
 800dfb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800dfb6:	2307      	movs	r3, #7
 800dfb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800dfba:	f107 0314 	add.w	r3, r7, #20
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	4805      	ldr	r0, [pc, #20]	; (800dfd8 <HAL_UART_MspInit+0x84>)
 800dfc2:	f7f3 fddf 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800dfc6:	bf00      	nop
 800dfc8:	3728      	adds	r7, #40	; 0x28
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	40004400 	.word	0x40004400
 800dfd4:	40021000 	.word	0x40021000
 800dfd8:	48000c00 	.word	0x48000c00

0800dfdc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b08a      	sub	sp, #40	; 0x28
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4a33      	ldr	r2, [pc, #204]	; (800e0b8 <HAL_SAI_MspInit+0xdc>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d135      	bne.n	800e05a <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800dfee:	4b33      	ldr	r3, [pc, #204]	; (800e0bc <HAL_SAI_MspInit+0xe0>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d10b      	bne.n	800e00e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800dff6:	4b32      	ldr	r3, [pc, #200]	; (800e0c0 <HAL_SAI_MspInit+0xe4>)
 800dff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dffa:	4a31      	ldr	r2, [pc, #196]	; (800e0c0 <HAL_SAI_MspInit+0xe4>)
 800dffc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e000:	6613      	str	r3, [r2, #96]	; 0x60
 800e002:	4b2f      	ldr	r3, [pc, #188]	; (800e0c0 <HAL_SAI_MspInit+0xe4>)
 800e004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e00a:	613b      	str	r3, [r7, #16]
 800e00c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800e00e:	4b2b      	ldr	r3, [pc, #172]	; (800e0bc <HAL_SAI_MspInit+0xe0>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	3301      	adds	r3, #1
 800e014:	4a29      	ldr	r2, [pc, #164]	; (800e0bc <HAL_SAI_MspInit+0xe0>)
 800e016:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 800e018:	2374      	movs	r3, #116	; 0x74
 800e01a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e01c:	2302      	movs	r3, #2
 800e01e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e020:	2300      	movs	r3, #0
 800e022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e024:	2303      	movs	r3, #3
 800e026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800e028:	230d      	movs	r3, #13
 800e02a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e02c:	f107 0314 	add.w	r3, r7, #20
 800e030:	4619      	mov	r1, r3
 800e032:	4824      	ldr	r0, [pc, #144]	; (800e0c4 <HAL_SAI_MspInit+0xe8>)
 800e034:	f7f3 fda6 	bl	8001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 800e038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e03c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e03e:	2302      	movs	r3, #2
 800e040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e042:	2300      	movs	r3, #0
 800e044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e046:	2300      	movs	r3, #0
 800e048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800e04a:	230d      	movs	r3, #13
 800e04c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800e04e:	f107 0314 	add.w	r3, r7, #20
 800e052:	4619      	mov	r1, r3
 800e054:	481b      	ldr	r0, [pc, #108]	; (800e0c4 <HAL_SAI_MspInit+0xe8>)
 800e056:	f7f3 fd95 	bl	8001b84 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4a1a      	ldr	r2, [pc, #104]	; (800e0c8 <HAL_SAI_MspInit+0xec>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d124      	bne.n	800e0ae <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800e064:	4b15      	ldr	r3, [pc, #84]	; (800e0bc <HAL_SAI_MspInit+0xe0>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d10b      	bne.n	800e084 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800e06c:	4b14      	ldr	r3, [pc, #80]	; (800e0c0 <HAL_SAI_MspInit+0xe4>)
 800e06e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e070:	4a13      	ldr	r2, [pc, #76]	; (800e0c0 <HAL_SAI_MspInit+0xe4>)
 800e072:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e076:	6613      	str	r3, [r2, #96]	; 0x60
 800e078:	4b11      	ldr	r3, [pc, #68]	; (800e0c0 <HAL_SAI_MspInit+0xe4>)
 800e07a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e07c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e080:	60fb      	str	r3, [r7, #12]
 800e082:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800e084:	4b0d      	ldr	r3, [pc, #52]	; (800e0bc <HAL_SAI_MspInit+0xe0>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	3301      	adds	r3, #1
 800e08a:	4a0c      	ldr	r2, [pc, #48]	; (800e0bc <HAL_SAI_MspInit+0xe0>)
 800e08c:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 800e08e:	2380      	movs	r3, #128	; 0x80
 800e090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e092:	2302      	movs	r3, #2
 800e094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e096:	2300      	movs	r3, #0
 800e098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e09a:	2303      	movs	r3, #3
 800e09c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800e09e:	230d      	movs	r3, #13
 800e0a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 800e0a2:	f107 0314 	add.w	r3, r7, #20
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	4806      	ldr	r0, [pc, #24]	; (800e0c4 <HAL_SAI_MspInit+0xe8>)
 800e0aa:	f7f3 fd6b 	bl	8001b84 <HAL_GPIO_Init>

    }
}
 800e0ae:	bf00      	nop
 800e0b0:	3728      	adds	r7, #40	; 0x28
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	40015404 	.word	0x40015404
 800e0bc:	20001974 	.word	0x20001974
 800e0c0:	40021000 	.word	0x40021000
 800e0c4:	48001000 	.word	0x48001000
 800e0c8:	40015424 	.word	0x40015424

0800e0cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e0d0:	bf00      	nop
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr

0800e0da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e0da:	b480      	push	{r7}
 800e0dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e0de:	e7fe      	b.n	800e0de <HardFault_Handler+0x4>

0800e0e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e0e4:	e7fe      	b.n	800e0e4 <MemManage_Handler+0x4>

0800e0e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e0e6:	b480      	push	{r7}
 800e0e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e0ea:	e7fe      	b.n	800e0ea <BusFault_Handler+0x4>

0800e0ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e0f0:	e7fe      	b.n	800e0f0 <UsageFault_Handler+0x4>

0800e0f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e0f2:	b480      	push	{r7}
 800e0f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e0f6:	bf00      	nop
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e104:	f7f2 fa3e 	bl	8000584 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e108:	f7fd ff02 	bl	800bf10 <xTaskGetSchedulerState>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d001      	beq.n	800e116 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800e112:	f7fe fcd9 	bl	800cac8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e116:	bf00      	nop
 800e118:	bd80      	pop	{r7, pc}
	...

0800e11c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800e120:	4802      	ldr	r0, [pc, #8]	; (800e12c <DMA1_Channel1_IRQHandler+0x10>)
 800e122:	f7f3 fc7f 	bl	8001a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800e126:	bf00      	nop
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop
 800e12c:	20001c2c 	.word	0x20001c2c

0800e130 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800e134:	4802      	ldr	r0, [pc, #8]	; (800e140 <OTG_FS_IRQHandler+0x10>)
 800e136:	f7f4 f971 	bl	800241c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800e13a:	bf00      	nop
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	200021d4 	.word	0x200021d4

0800e144 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800e14c:	4b11      	ldr	r3, [pc, #68]	; (800e194 <_sbrk+0x50>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d102      	bne.n	800e15a <_sbrk+0x16>
		heap_end = &end;
 800e154:	4b0f      	ldr	r3, [pc, #60]	; (800e194 <_sbrk+0x50>)
 800e156:	4a10      	ldr	r2, [pc, #64]	; (800e198 <_sbrk+0x54>)
 800e158:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800e15a:	4b0e      	ldr	r3, [pc, #56]	; (800e194 <_sbrk+0x50>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800e160:	4b0c      	ldr	r3, [pc, #48]	; (800e194 <_sbrk+0x50>)
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4413      	add	r3, r2
 800e168:	466a      	mov	r2, sp
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d907      	bls.n	800e17e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800e16e:	f000 fb7b 	bl	800e868 <__errno>
 800e172:	4602      	mov	r2, r0
 800e174:	230c      	movs	r3, #12
 800e176:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800e178:	f04f 33ff 	mov.w	r3, #4294967295
 800e17c:	e006      	b.n	800e18c <_sbrk+0x48>
	}

	heap_end += incr;
 800e17e:	4b05      	ldr	r3, [pc, #20]	; (800e194 <_sbrk+0x50>)
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	4413      	add	r3, r2
 800e186:	4a03      	ldr	r2, [pc, #12]	; (800e194 <_sbrk+0x50>)
 800e188:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800e18a:	68fb      	ldr	r3, [r7, #12]
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3710      	adds	r7, #16
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	20001978 	.word	0x20001978
 800e198:	200024a0 	.word	0x200024a0

0800e19c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800e19c:	b480      	push	{r7}
 800e19e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e1a0:	4b17      	ldr	r3, [pc, #92]	; (800e200 <SystemInit+0x64>)
 800e1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1a6:	4a16      	ldr	r2, [pc, #88]	; (800e200 <SystemInit+0x64>)
 800e1a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e1ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800e1b0:	4b14      	ldr	r3, [pc, #80]	; (800e204 <SystemInit+0x68>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a13      	ldr	r2, [pc, #76]	; (800e204 <SystemInit+0x68>)
 800e1b6:	f043 0301 	orr.w	r3, r3, #1
 800e1ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800e1bc:	4b11      	ldr	r3, [pc, #68]	; (800e204 <SystemInit+0x68>)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800e1c2:	4b10      	ldr	r3, [pc, #64]	; (800e204 <SystemInit+0x68>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4a0f      	ldr	r2, [pc, #60]	; (800e204 <SystemInit+0x68>)
 800e1c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800e1cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800e1d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800e1d2:	4b0c      	ldr	r3, [pc, #48]	; (800e204 <SystemInit+0x68>)
 800e1d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e1d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800e1da:	4b0a      	ldr	r3, [pc, #40]	; (800e204 <SystemInit+0x68>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	4a09      	ldr	r2, [pc, #36]	; (800e204 <SystemInit+0x68>)
 800e1e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e1e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800e1e6:	4b07      	ldr	r3, [pc, #28]	; (800e204 <SystemInit+0x68>)
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e1ec:	4b04      	ldr	r3, [pc, #16]	; (800e200 <SystemInit+0x64>)
 800e1ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e1f2:	609a      	str	r2, [r3, #8]
#endif
}
 800e1f4:	bf00      	nop
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop
 800e200:	e000ed00 	.word	0xe000ed00
 800e204:	40021000 	.word	0x40021000

0800e208 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e20c:	2201      	movs	r2, #1
 800e20e:	490e      	ldr	r1, [pc, #56]	; (800e248 <MX_USB_HOST_Init+0x40>)
 800e210:	480e      	ldr	r0, [pc, #56]	; (800e24c <MX_USB_HOST_Init+0x44>)
 800e212:	f7fa fb03 	bl	800881c <USBH_Init>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d001      	beq.n	800e220 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e21c:	f7ff fc00 	bl	800da20 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e220:	490b      	ldr	r1, [pc, #44]	; (800e250 <MX_USB_HOST_Init+0x48>)
 800e222:	480a      	ldr	r0, [pc, #40]	; (800e24c <MX_USB_HOST_Init+0x44>)
 800e224:	f7fa fba1 	bl	800896a <USBH_RegisterClass>
 800e228:	4603      	mov	r3, r0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d001      	beq.n	800e232 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e22e:	f7ff fbf7 	bl	800da20 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e232:	4806      	ldr	r0, [pc, #24]	; (800e24c <MX_USB_HOST_Init+0x44>)
 800e234:	f7fa fc26 	bl	8008a84 <USBH_Start>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d001      	beq.n	800e242 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e23e:	f7ff fbef 	bl	800da20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e242:	bf00      	nop
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	0800e255 	.word	0x0800e255
 800e24c:	20001df8 	.word	0x20001df8
 800e250:	20000008 	.word	0x20000008

0800e254 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	460b      	mov	r3, r1
 800e25e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e260:	78fb      	ldrb	r3, [r7, #3]
 800e262:	3b01      	subs	r3, #1
 800e264:	2b04      	cmp	r3, #4
 800e266:	d819      	bhi.n	800e29c <USBH_UserProcess+0x48>
 800e268:	a201      	add	r2, pc, #4	; (adr r2, 800e270 <USBH_UserProcess+0x1c>)
 800e26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e26e:	bf00      	nop
 800e270:	0800e29d 	.word	0x0800e29d
 800e274:	0800e28d 	.word	0x0800e28d
 800e278:	0800e29d 	.word	0x0800e29d
 800e27c:	0800e295 	.word	0x0800e295
 800e280:	0800e285 	.word	0x0800e285
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e284:	4b09      	ldr	r3, [pc, #36]	; (800e2ac <USBH_UserProcess+0x58>)
 800e286:	2203      	movs	r2, #3
 800e288:	701a      	strb	r2, [r3, #0]
  break;
 800e28a:	e008      	b.n	800e29e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e28c:	4b07      	ldr	r3, [pc, #28]	; (800e2ac <USBH_UserProcess+0x58>)
 800e28e:	2202      	movs	r2, #2
 800e290:	701a      	strb	r2, [r3, #0]
  break;
 800e292:	e004      	b.n	800e29e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e294:	4b05      	ldr	r3, [pc, #20]	; (800e2ac <USBH_UserProcess+0x58>)
 800e296:	2201      	movs	r2, #1
 800e298:	701a      	strb	r2, [r3, #0]
  break;
 800e29a:	e000      	b.n	800e29e <USBH_UserProcess+0x4a>

  default:
  break;
 800e29c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e29e:	bf00      	nop
 800e2a0:	370c      	adds	r7, #12
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	2000197c 	.word	0x2000197c

0800e2b0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b08a      	sub	sp, #40	; 0x28
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2b8:	f107 0314 	add.w	r3, r7, #20
 800e2bc:	2200      	movs	r2, #0
 800e2be:	601a      	str	r2, [r3, #0]
 800e2c0:	605a      	str	r2, [r3, #4]
 800e2c2:	609a      	str	r2, [r3, #8]
 800e2c4:	60da      	str	r2, [r3, #12]
 800e2c6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e2d0:	d14e      	bne.n	800e370 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2d2:	4b29      	ldr	r3, [pc, #164]	; (800e378 <HAL_HCD_MspInit+0xc8>)
 800e2d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2d6:	4a28      	ldr	r2, [pc, #160]	; (800e378 <HAL_HCD_MspInit+0xc8>)
 800e2d8:	f043 0301 	orr.w	r3, r3, #1
 800e2dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e2de:	4b26      	ldr	r3, [pc, #152]	; (800e378 <HAL_HCD_MspInit+0xc8>)
 800e2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2e2:	f003 0301 	and.w	r3, r3, #1
 800e2e6:	613b      	str	r3, [r7, #16]
 800e2e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e2ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e2ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2f0:	2302      	movs	r3, #2
 800e2f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2f8:	2303      	movs	r3, #3
 800e2fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e2fc:	230a      	movs	r3, #10
 800e2fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e300:	f107 0314 	add.w	r3, r7, #20
 800e304:	4619      	mov	r1, r3
 800e306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e30a:	f7f3 fc3b 	bl	8001b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e30e:	4b1a      	ldr	r3, [pc, #104]	; (800e378 <HAL_HCD_MspInit+0xc8>)
 800e310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e312:	4a19      	ldr	r2, [pc, #100]	; (800e378 <HAL_HCD_MspInit+0xc8>)
 800e314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e31a:	4b17      	ldr	r3, [pc, #92]	; (800e378 <HAL_HCD_MspInit+0xc8>)
 800e31c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e31e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e322:	60fb      	str	r3, [r7, #12]
 800e324:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e326:	4b14      	ldr	r3, [pc, #80]	; (800e378 <HAL_HCD_MspInit+0xc8>)
 800e328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e32a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d114      	bne.n	800e35c <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e332:	4b11      	ldr	r3, [pc, #68]	; (800e378 <HAL_HCD_MspInit+0xc8>)
 800e334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e336:	4a10      	ldr	r2, [pc, #64]	; (800e378 <HAL_HCD_MspInit+0xc8>)
 800e338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e33c:	6593      	str	r3, [r2, #88]	; 0x58
 800e33e:	4b0e      	ldr	r3, [pc, #56]	; (800e378 <HAL_HCD_MspInit+0xc8>)
 800e340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e346:	60bb      	str	r3, [r7, #8]
 800e348:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800e34a:	f7f5 fc89 	bl	8003c60 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e34e:	4b0a      	ldr	r3, [pc, #40]	; (800e378 <HAL_HCD_MspInit+0xc8>)
 800e350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e352:	4a09      	ldr	r2, [pc, #36]	; (800e378 <HAL_HCD_MspInit+0xc8>)
 800e354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e358:	6593      	str	r3, [r2, #88]	; 0x58
 800e35a:	e001      	b.n	800e360 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800e35c:	f7f5 fc80 	bl	8003c60 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e360:	2200      	movs	r2, #0
 800e362:	2105      	movs	r1, #5
 800e364:	2043      	movs	r0, #67	; 0x43
 800e366:	f7f3 f932 	bl	80015ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e36a:	2043      	movs	r0, #67	; 0x43
 800e36c:	f7f3 f94b 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e370:	bf00      	nop
 800e372:	3728      	adds	r7, #40	; 0x28
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	40021000 	.word	0x40021000

0800e37c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7fa fefb 	bl	8009186 <USBH_LL_IncTimer>
}
 800e390:	bf00      	nop
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fa ff3f 	bl	800922a <USBH_LL_Connect>
}
 800e3ac:	bf00      	nop
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fa ff54 	bl	8009270 <USBH_LL_Disconnect>
}
 800e3c8:	bf00      	nop
 800e3ca:	3708      	adds	r7, #8
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	460b      	mov	r3, r1
 800e3da:	70fb      	strb	r3, [r7, #3]
 800e3dc:	4613      	mov	r3, r2
 800e3de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fa ff8b 	bl	8009302 <USBH_LL_NotifyURBChange>
#endif
}
 800e3ec:	bf00      	nop
 800e3ee:	3708      	adds	r7, #8
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e402:	4618      	mov	r0, r3
 800e404:	f7fa fee9 	bl	80091da <USBH_LL_PortEnabled>
} 
 800e408:	bf00      	nop
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e41e:	4618      	mov	r0, r3
 800e420:	f7fa fef5 	bl	800920e <USBH_LL_PortDisabled>
} 
 800e424:	bf00      	nop
 800e426:	3708      	adds	r7, #8
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d12a      	bne.n	800e494 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e43e:	4a18      	ldr	r2, [pc, #96]	; (800e4a0 <USBH_LL_Init+0x74>)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4a15      	ldr	r2, [pc, #84]	; (800e4a0 <USBH_LL_Init+0x74>)
 800e44a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e44e:	4b14      	ldr	r3, [pc, #80]	; (800e4a0 <USBH_LL_Init+0x74>)
 800e450:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e454:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e456:	4b12      	ldr	r3, [pc, #72]	; (800e4a0 <USBH_LL_Init+0x74>)
 800e458:	2208      	movs	r2, #8
 800e45a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e45c:	4b10      	ldr	r3, [pc, #64]	; (800e4a0 <USBH_LL_Init+0x74>)
 800e45e:	2201      	movs	r2, #1
 800e460:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e462:	4b0f      	ldr	r3, [pc, #60]	; (800e4a0 <USBH_LL_Init+0x74>)
 800e464:	2200      	movs	r2, #0
 800e466:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e468:	4b0d      	ldr	r3, [pc, #52]	; (800e4a0 <USBH_LL_Init+0x74>)
 800e46a:	2202      	movs	r2, #2
 800e46c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e46e:	4b0c      	ldr	r3, [pc, #48]	; (800e4a0 <USBH_LL_Init+0x74>)
 800e470:	2200      	movs	r2, #0
 800e472:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e474:	480a      	ldr	r0, [pc, #40]	; (800e4a0 <USBH_LL_Init+0x74>)
 800e476:	f7f3 fd45 	bl	8001f04 <HAL_HCD_Init>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e480:	f7ff face 	bl	800da20 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e484:	4806      	ldr	r0, [pc, #24]	; (800e4a0 <USBH_LL_Init+0x74>)
 800e486:	f7f4 f945 	bl	8002714 <HAL_HCD_GetCurrentFrame>
 800e48a:	4603      	mov	r3, r0
 800e48c:	4619      	mov	r1, r3
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7fa fe6a 	bl	8009168 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e494:	2300      	movs	r3, #0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3708      	adds	r7, #8
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	200021d4 	.word	0x200021d4

0800e4a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7f4 f8b2 	bl	8002624 <HAL_HCD_Start>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e4c4:	7bfb      	ldrb	r3, [r7, #15]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f000 f95c 	bl	800e784 <USBH_Get_USB_Status>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e4d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b084      	sub	sp, #16
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7f4 f8ba 	bl	800266a <HAL_HCD_Stop>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e4fa:	7bfb      	ldrb	r3, [r7, #15]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f000 f941 	bl	800e784 <USBH_Get_USB_Status>
 800e502:	4603      	mov	r3, r0
 800e504:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e506:	7bbb      	ldrb	r3, [r7, #14]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3710      	adds	r7, #16
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e518:	2301      	movs	r3, #1
 800e51a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e522:	4618      	mov	r0, r3
 800e524:	f7f4 f904 	bl	8002730 <HAL_HCD_GetCurrentSpeed>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d007      	beq.n	800e53e <USBH_LL_GetSpeed+0x2e>
 800e52e:	2b01      	cmp	r3, #1
 800e530:	d302      	bcc.n	800e538 <USBH_LL_GetSpeed+0x28>
 800e532:	2b02      	cmp	r3, #2
 800e534:	d006      	beq.n	800e544 <USBH_LL_GetSpeed+0x34>
 800e536:	e008      	b.n	800e54a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e538:	2300      	movs	r3, #0
 800e53a:	73fb      	strb	r3, [r7, #15]
    break;
 800e53c:	e008      	b.n	800e550 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e53e:	2301      	movs	r3, #1
 800e540:	73fb      	strb	r3, [r7, #15]
    break;
 800e542:	e005      	b.n	800e550 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e544:	2302      	movs	r3, #2
 800e546:	73fb      	strb	r3, [r7, #15]
    break;
 800e548:	e002      	b.n	800e550 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800e54a:	2301      	movs	r3, #1
 800e54c:	73fb      	strb	r3, [r7, #15]
    break;
 800e54e:	bf00      	nop
  }
  return  speed;
 800e550:	7bfb      	ldrb	r3, [r7, #15]
}
 800e552:	4618      	mov	r0, r3
 800e554:	3710      	adds	r7, #16
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}

0800e55a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b084      	sub	sp, #16
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e562:	2300      	movs	r3, #0
 800e564:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e566:	2300      	movs	r3, #0
 800e568:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e570:	4618      	mov	r0, r3
 800e572:	f7f4 f897 	bl	80026a4 <HAL_HCD_ResetPort>
 800e576:	4603      	mov	r3, r0
 800e578:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800e57a:	7bfb      	ldrb	r3, [r7, #15]
 800e57c:	4618      	mov	r0, r3
 800e57e:	f000 f901 	bl	800e784 <USBH_Get_USB_Status>
 800e582:	4603      	mov	r3, r0
 800e584:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e586:	7bbb      	ldrb	r3, [r7, #14]
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3710      	adds	r7, #16
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	460b      	mov	r3, r1
 800e59a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e5a2:	78fa      	ldrb	r2, [r7, #3]
 800e5a4:	4611      	mov	r1, r2
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7f4 f89f 	bl	80026ea <HAL_HCD_HC_GetXferCount>
 800e5ac:	4603      	mov	r3, r0
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3708      	adds	r7, #8
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}

0800e5b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e5b6:	b590      	push	{r4, r7, lr}
 800e5b8:	b089      	sub	sp, #36	; 0x24
 800e5ba:	af04      	add	r7, sp, #16
 800e5bc:	6078      	str	r0, [r7, #4]
 800e5be:	4608      	mov	r0, r1
 800e5c0:	4611      	mov	r1, r2
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	70fb      	strb	r3, [r7, #3]
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	70bb      	strb	r3, [r7, #2]
 800e5cc:	4613      	mov	r3, r2
 800e5ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800e5de:	787c      	ldrb	r4, [r7, #1]
 800e5e0:	78ba      	ldrb	r2, [r7, #2]
 800e5e2:	78f9      	ldrb	r1, [r7, #3]
 800e5e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e5e6:	9302      	str	r3, [sp, #8]
 800e5e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e5ec:	9301      	str	r3, [sp, #4]
 800e5ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	4623      	mov	r3, r4
 800e5f6:	f7f3 fce7 	bl	8001fc8 <HAL_HCD_HC_Init>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e5fe:	7bfb      	ldrb	r3, [r7, #15]
 800e600:	4618      	mov	r0, r3
 800e602:	f000 f8bf 	bl	800e784 <USBH_Get_USB_Status>
 800e606:	4603      	mov	r3, r0
 800e608:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e60a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3714      	adds	r7, #20
 800e610:	46bd      	mov	sp, r7
 800e612:	bd90      	pop	{r4, r7, pc}

0800e614 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	460b      	mov	r3, r1
 800e61e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e620:	2300      	movs	r3, #0
 800e622:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e624:	2300      	movs	r3, #0
 800e626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e62e:	78fa      	ldrb	r2, [r7, #3]
 800e630:	4611      	mov	r1, r2
 800e632:	4618      	mov	r0, r3
 800e634:	f7f3 fd60 	bl	80020f8 <HAL_HCD_HC_Halt>
 800e638:	4603      	mov	r3, r0
 800e63a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e63c:	7bfb      	ldrb	r3, [r7, #15]
 800e63e:	4618      	mov	r0, r3
 800e640:	f000 f8a0 	bl	800e784 <USBH_Get_USB_Status>
 800e644:	4603      	mov	r3, r0
 800e646:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 800e648:	7bbb      	ldrb	r3, [r7, #14]
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}

0800e652 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e652:	b590      	push	{r4, r7, lr}
 800e654:	b089      	sub	sp, #36	; 0x24
 800e656:	af04      	add	r7, sp, #16
 800e658:	6078      	str	r0, [r7, #4]
 800e65a:	4608      	mov	r0, r1
 800e65c:	4611      	mov	r1, r2
 800e65e:	461a      	mov	r2, r3
 800e660:	4603      	mov	r3, r0
 800e662:	70fb      	strb	r3, [r7, #3]
 800e664:	460b      	mov	r3, r1
 800e666:	70bb      	strb	r3, [r7, #2]
 800e668:	4613      	mov	r3, r2
 800e66a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e66c:	2300      	movs	r3, #0
 800e66e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e670:	2300      	movs	r3, #0
 800e672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 800e67a:	787c      	ldrb	r4, [r7, #1]
 800e67c:	78ba      	ldrb	r2, [r7, #2]
 800e67e:	78f9      	ldrb	r1, [r7, #3]
 800e680:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e684:	9303      	str	r3, [sp, #12]
 800e686:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e688:	9302      	str	r3, [sp, #8]
 800e68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68c:	9301      	str	r3, [sp, #4]
 800e68e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e692:	9300      	str	r3, [sp, #0]
 800e694:	4623      	mov	r3, r4
 800e696:	f7f3 fd53 	bl	8002140 <HAL_HCD_HC_SubmitRequest>
 800e69a:	4603      	mov	r3, r0
 800e69c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e69e:	7bfb      	ldrb	r3, [r7, #15]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f000 f86f 	bl	800e784 <USBH_Get_USB_Status>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e6aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3714      	adds	r7, #20
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd90      	pop	{r4, r7, pc}

0800e6b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	460b      	mov	r3, r1
 800e6be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e6c6:	78fa      	ldrb	r2, [r7, #3]
 800e6c8:	4611      	mov	r1, r2
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7f3 fff8 	bl	80026c0 <HAL_HCD_HC_GetURBState>
 800e6d0:	4603      	mov	r3, r0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3708      	adds	r7, #8
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}

0800e6da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e6da:	b580      	push	{r7, lr}
 800e6dc:	b082      	sub	sp, #8
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d103      	bne.n	800e6f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e6f0:	78fb      	ldrb	r3, [r7, #3]
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f000 f872 	bl	800e7dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e6f8:	20c8      	movs	r0, #200	; 0xc8
 800e6fa:	f7f1 ff61 	bl	80005c0 <HAL_Delay>
  return USBH_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3708      	adds	r7, #8
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e708:	b480      	push	{r7}
 800e70a:	b085      	sub	sp, #20
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	460b      	mov	r3, r1
 800e712:	70fb      	strb	r3, [r7, #3]
 800e714:	4613      	mov	r3, r2
 800e716:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e71e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e720:	78fa      	ldrb	r2, [r7, #3]
 800e722:	68f9      	ldr	r1, [r7, #12]
 800e724:	4613      	mov	r3, r2
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	4413      	add	r3, r2
 800e72a:	00db      	lsls	r3, r3, #3
 800e72c:	440b      	add	r3, r1
 800e72e:	333b      	adds	r3, #59	; 0x3b
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d00a      	beq.n	800e74c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e736:	78fa      	ldrb	r2, [r7, #3]
 800e738:	68f9      	ldr	r1, [r7, #12]
 800e73a:	4613      	mov	r3, r2
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	4413      	add	r3, r2
 800e740:	00db      	lsls	r3, r3, #3
 800e742:	440b      	add	r3, r1
 800e744:	3350      	adds	r3, #80	; 0x50
 800e746:	78ba      	ldrb	r2, [r7, #2]
 800e748:	701a      	strb	r2, [r3, #0]
 800e74a:	e009      	b.n	800e760 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e74c:	78fa      	ldrb	r2, [r7, #3]
 800e74e:	68f9      	ldr	r1, [r7, #12]
 800e750:	4613      	mov	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4413      	add	r3, r2
 800e756:	00db      	lsls	r3, r3, #3
 800e758:	440b      	add	r3, r1
 800e75a:	3351      	adds	r3, #81	; 0x51
 800e75c:	78ba      	ldrb	r2, [r7, #2]
 800e75e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e760:	2300      	movs	r3, #0
}
 800e762:	4618      	mov	r0, r3
 800e764:	3714      	adds	r7, #20
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr

0800e76e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b082      	sub	sp, #8
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f7f1 ff22 	bl	80005c0 <HAL_Delay>
}
 800e77c:	bf00      	nop
 800e77e:	3708      	adds	r7, #8
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}

0800e784 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e784:	b480      	push	{r7}
 800e786:	b085      	sub	sp, #20
 800e788:	af00      	add	r7, sp, #0
 800e78a:	4603      	mov	r3, r0
 800e78c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e78e:	2300      	movs	r3, #0
 800e790:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e792:	79fb      	ldrb	r3, [r7, #7]
 800e794:	2b03      	cmp	r3, #3
 800e796:	d817      	bhi.n	800e7c8 <USBH_Get_USB_Status+0x44>
 800e798:	a201      	add	r2, pc, #4	; (adr r2, 800e7a0 <USBH_Get_USB_Status+0x1c>)
 800e79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e79e:	bf00      	nop
 800e7a0:	0800e7b1 	.word	0x0800e7b1
 800e7a4:	0800e7b7 	.word	0x0800e7b7
 800e7a8:	0800e7bd 	.word	0x0800e7bd
 800e7ac:	0800e7c3 	.word	0x0800e7c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e7b4:	e00b      	b.n	800e7ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e7b6:	2302      	movs	r3, #2
 800e7b8:	73fb      	strb	r3, [r7, #15]
    break;
 800e7ba:	e008      	b.n	800e7ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e7bc:	2301      	movs	r3, #1
 800e7be:	73fb      	strb	r3, [r7, #15]
    break;
 800e7c0:	e005      	b.n	800e7ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e7c2:	2302      	movs	r3, #2
 800e7c4:	73fb      	strb	r3, [r7, #15]
    break;
 800e7c6:	e002      	b.n	800e7ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e7c8:	2302      	movs	r3, #2
 800e7ca:	73fb      	strb	r3, [r7, #15]
    break;
 800e7cc:	bf00      	nop
  }
  return usb_status;
 800e7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3714      	adds	r7, #20
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800e7e6:	79fb      	ldrb	r3, [r7, #7]
 800e7e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e7ea:	79fb      	ldrb	r3, [r7, #7]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d102      	bne.n	800e7f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	73fb      	strb	r3, [r7, #15]
 800e7f4:	e001      	b.n	800e7fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800e7fa:	7bfb      	ldrb	r3, [r7, #15]
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e802:	4803      	ldr	r0, [pc, #12]	; (800e810 <MX_DriverVbusFS+0x34>)
 800e804:	f7f3 fb66 	bl	8001ed4 <HAL_GPIO_WritePin>
}
 800e808:	bf00      	nop
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	48000800 	.word	0x48000800

0800e814 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800e814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e84c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800e818:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800e81a:	e003      	b.n	800e824 <LoopCopyDataInit>

0800e81c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800e81c:	4b0c      	ldr	r3, [pc, #48]	; (800e850 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800e81e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800e820:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800e822:	3104      	adds	r1, #4

0800e824 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800e824:	480b      	ldr	r0, [pc, #44]	; (800e854 <LoopForever+0xa>)
	ldr	r3, =_edata
 800e826:	4b0c      	ldr	r3, [pc, #48]	; (800e858 <LoopForever+0xe>)
	adds	r2, r0, r1
 800e828:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800e82a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800e82c:	d3f6      	bcc.n	800e81c <CopyDataInit>
	ldr	r2, =_sbss
 800e82e:	4a0b      	ldr	r2, [pc, #44]	; (800e85c <LoopForever+0x12>)
	b	LoopFillZerobss
 800e830:	e002      	b.n	800e838 <LoopFillZerobss>

0800e832 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800e832:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800e834:	f842 3b04 	str.w	r3, [r2], #4

0800e838 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800e838:	4b09      	ldr	r3, [pc, #36]	; (800e860 <LoopForever+0x16>)
	cmp	r2, r3
 800e83a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800e83c:	d3f9      	bcc.n	800e832 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800e83e:	f7ff fcad 	bl	800e19c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e842:	f000 f817 	bl	800e874 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800e846:	f7fe fba1 	bl	800cf8c <main>

0800e84a <LoopForever>:

LoopForever:
    b LoopForever
 800e84a:	e7fe      	b.n	800e84a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800e84c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800e850:	0800eb40 	.word	0x0800eb40
	ldr	r0, =_sdata
 800e854:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800e858:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 800e85c:	20000094 	.word	0x20000094
	ldr	r3, = _ebss
 800e860:	2000249c 	.word	0x2000249c

0800e864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800e864:	e7fe      	b.n	800e864 <ADC1_2_IRQHandler>
	...

0800e868 <__errno>:
 800e868:	4b01      	ldr	r3, [pc, #4]	; (800e870 <__errno+0x8>)
 800e86a:	6818      	ldr	r0, [r3, #0]
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	20000030 	.word	0x20000030

0800e874 <__libc_init_array>:
 800e874:	b570      	push	{r4, r5, r6, lr}
 800e876:	4e0d      	ldr	r6, [pc, #52]	; (800e8ac <__libc_init_array+0x38>)
 800e878:	4c0d      	ldr	r4, [pc, #52]	; (800e8b0 <__libc_init_array+0x3c>)
 800e87a:	1ba4      	subs	r4, r4, r6
 800e87c:	10a4      	asrs	r4, r4, #2
 800e87e:	2500      	movs	r5, #0
 800e880:	42a5      	cmp	r5, r4
 800e882:	d109      	bne.n	800e898 <__libc_init_array+0x24>
 800e884:	4e0b      	ldr	r6, [pc, #44]	; (800e8b4 <__libc_init_array+0x40>)
 800e886:	4c0c      	ldr	r4, [pc, #48]	; (800e8b8 <__libc_init_array+0x44>)
 800e888:	f000 f8f6 	bl	800ea78 <_init>
 800e88c:	1ba4      	subs	r4, r4, r6
 800e88e:	10a4      	asrs	r4, r4, #2
 800e890:	2500      	movs	r5, #0
 800e892:	42a5      	cmp	r5, r4
 800e894:	d105      	bne.n	800e8a2 <__libc_init_array+0x2e>
 800e896:	bd70      	pop	{r4, r5, r6, pc}
 800e898:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e89c:	4798      	blx	r3
 800e89e:	3501      	adds	r5, #1
 800e8a0:	e7ee      	b.n	800e880 <__libc_init_array+0xc>
 800e8a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e8a6:	4798      	blx	r3
 800e8a8:	3501      	adds	r5, #1
 800e8aa:	e7f2      	b.n	800e892 <__libc_init_array+0x1e>
 800e8ac:	0800eb38 	.word	0x0800eb38
 800e8b0:	0800eb38 	.word	0x0800eb38
 800e8b4:	0800eb38 	.word	0x0800eb38
 800e8b8:	0800eb3c 	.word	0x0800eb3c

0800e8bc <malloc>:
 800e8bc:	4b02      	ldr	r3, [pc, #8]	; (800e8c8 <malloc+0xc>)
 800e8be:	4601      	mov	r1, r0
 800e8c0:	6818      	ldr	r0, [r3, #0]
 800e8c2:	f000 b86d 	b.w	800e9a0 <_malloc_r>
 800e8c6:	bf00      	nop
 800e8c8:	20000030 	.word	0x20000030

0800e8cc <free>:
 800e8cc:	4b02      	ldr	r3, [pc, #8]	; (800e8d8 <free+0xc>)
 800e8ce:	4601      	mov	r1, r0
 800e8d0:	6818      	ldr	r0, [r3, #0]
 800e8d2:	f000 b817 	b.w	800e904 <_free_r>
 800e8d6:	bf00      	nop
 800e8d8:	20000030 	.word	0x20000030

0800e8dc <memcpy>:
 800e8dc:	b510      	push	{r4, lr}
 800e8de:	1e43      	subs	r3, r0, #1
 800e8e0:	440a      	add	r2, r1
 800e8e2:	4291      	cmp	r1, r2
 800e8e4:	d100      	bne.n	800e8e8 <memcpy+0xc>
 800e8e6:	bd10      	pop	{r4, pc}
 800e8e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8f0:	e7f7      	b.n	800e8e2 <memcpy+0x6>

0800e8f2 <memset>:
 800e8f2:	4402      	add	r2, r0
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d100      	bne.n	800e8fc <memset+0xa>
 800e8fa:	4770      	bx	lr
 800e8fc:	f803 1b01 	strb.w	r1, [r3], #1
 800e900:	e7f9      	b.n	800e8f6 <memset+0x4>
	...

0800e904 <_free_r>:
 800e904:	b538      	push	{r3, r4, r5, lr}
 800e906:	4605      	mov	r5, r0
 800e908:	2900      	cmp	r1, #0
 800e90a:	d045      	beq.n	800e998 <_free_r+0x94>
 800e90c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e910:	1f0c      	subs	r4, r1, #4
 800e912:	2b00      	cmp	r3, #0
 800e914:	bfb8      	it	lt
 800e916:	18e4      	addlt	r4, r4, r3
 800e918:	f000 f8ac 	bl	800ea74 <__malloc_lock>
 800e91c:	4a1f      	ldr	r2, [pc, #124]	; (800e99c <_free_r+0x98>)
 800e91e:	6813      	ldr	r3, [r2, #0]
 800e920:	4610      	mov	r0, r2
 800e922:	b933      	cbnz	r3, 800e932 <_free_r+0x2e>
 800e924:	6063      	str	r3, [r4, #4]
 800e926:	6014      	str	r4, [r2, #0]
 800e928:	4628      	mov	r0, r5
 800e92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e92e:	f000 b8a2 	b.w	800ea76 <__malloc_unlock>
 800e932:	42a3      	cmp	r3, r4
 800e934:	d90c      	bls.n	800e950 <_free_r+0x4c>
 800e936:	6821      	ldr	r1, [r4, #0]
 800e938:	1862      	adds	r2, r4, r1
 800e93a:	4293      	cmp	r3, r2
 800e93c:	bf04      	itt	eq
 800e93e:	681a      	ldreq	r2, [r3, #0]
 800e940:	685b      	ldreq	r3, [r3, #4]
 800e942:	6063      	str	r3, [r4, #4]
 800e944:	bf04      	itt	eq
 800e946:	1852      	addeq	r2, r2, r1
 800e948:	6022      	streq	r2, [r4, #0]
 800e94a:	6004      	str	r4, [r0, #0]
 800e94c:	e7ec      	b.n	800e928 <_free_r+0x24>
 800e94e:	4613      	mov	r3, r2
 800e950:	685a      	ldr	r2, [r3, #4]
 800e952:	b10a      	cbz	r2, 800e958 <_free_r+0x54>
 800e954:	42a2      	cmp	r2, r4
 800e956:	d9fa      	bls.n	800e94e <_free_r+0x4a>
 800e958:	6819      	ldr	r1, [r3, #0]
 800e95a:	1858      	adds	r0, r3, r1
 800e95c:	42a0      	cmp	r0, r4
 800e95e:	d10b      	bne.n	800e978 <_free_r+0x74>
 800e960:	6820      	ldr	r0, [r4, #0]
 800e962:	4401      	add	r1, r0
 800e964:	1858      	adds	r0, r3, r1
 800e966:	4282      	cmp	r2, r0
 800e968:	6019      	str	r1, [r3, #0]
 800e96a:	d1dd      	bne.n	800e928 <_free_r+0x24>
 800e96c:	6810      	ldr	r0, [r2, #0]
 800e96e:	6852      	ldr	r2, [r2, #4]
 800e970:	605a      	str	r2, [r3, #4]
 800e972:	4401      	add	r1, r0
 800e974:	6019      	str	r1, [r3, #0]
 800e976:	e7d7      	b.n	800e928 <_free_r+0x24>
 800e978:	d902      	bls.n	800e980 <_free_r+0x7c>
 800e97a:	230c      	movs	r3, #12
 800e97c:	602b      	str	r3, [r5, #0]
 800e97e:	e7d3      	b.n	800e928 <_free_r+0x24>
 800e980:	6820      	ldr	r0, [r4, #0]
 800e982:	1821      	adds	r1, r4, r0
 800e984:	428a      	cmp	r2, r1
 800e986:	bf04      	itt	eq
 800e988:	6811      	ldreq	r1, [r2, #0]
 800e98a:	6852      	ldreq	r2, [r2, #4]
 800e98c:	6062      	str	r2, [r4, #4]
 800e98e:	bf04      	itt	eq
 800e990:	1809      	addeq	r1, r1, r0
 800e992:	6021      	streq	r1, [r4, #0]
 800e994:	605c      	str	r4, [r3, #4]
 800e996:	e7c7      	b.n	800e928 <_free_r+0x24>
 800e998:	bd38      	pop	{r3, r4, r5, pc}
 800e99a:	bf00      	nop
 800e99c:	20001980 	.word	0x20001980

0800e9a0 <_malloc_r>:
 800e9a0:	b570      	push	{r4, r5, r6, lr}
 800e9a2:	1ccd      	adds	r5, r1, #3
 800e9a4:	f025 0503 	bic.w	r5, r5, #3
 800e9a8:	3508      	adds	r5, #8
 800e9aa:	2d0c      	cmp	r5, #12
 800e9ac:	bf38      	it	cc
 800e9ae:	250c      	movcc	r5, #12
 800e9b0:	2d00      	cmp	r5, #0
 800e9b2:	4606      	mov	r6, r0
 800e9b4:	db01      	blt.n	800e9ba <_malloc_r+0x1a>
 800e9b6:	42a9      	cmp	r1, r5
 800e9b8:	d903      	bls.n	800e9c2 <_malloc_r+0x22>
 800e9ba:	230c      	movs	r3, #12
 800e9bc:	6033      	str	r3, [r6, #0]
 800e9be:	2000      	movs	r0, #0
 800e9c0:	bd70      	pop	{r4, r5, r6, pc}
 800e9c2:	f000 f857 	bl	800ea74 <__malloc_lock>
 800e9c6:	4a21      	ldr	r2, [pc, #132]	; (800ea4c <_malloc_r+0xac>)
 800e9c8:	6814      	ldr	r4, [r2, #0]
 800e9ca:	4621      	mov	r1, r4
 800e9cc:	b991      	cbnz	r1, 800e9f4 <_malloc_r+0x54>
 800e9ce:	4c20      	ldr	r4, [pc, #128]	; (800ea50 <_malloc_r+0xb0>)
 800e9d0:	6823      	ldr	r3, [r4, #0]
 800e9d2:	b91b      	cbnz	r3, 800e9dc <_malloc_r+0x3c>
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	f000 f83d 	bl	800ea54 <_sbrk_r>
 800e9da:	6020      	str	r0, [r4, #0]
 800e9dc:	4629      	mov	r1, r5
 800e9de:	4630      	mov	r0, r6
 800e9e0:	f000 f838 	bl	800ea54 <_sbrk_r>
 800e9e4:	1c43      	adds	r3, r0, #1
 800e9e6:	d124      	bne.n	800ea32 <_malloc_r+0x92>
 800e9e8:	230c      	movs	r3, #12
 800e9ea:	6033      	str	r3, [r6, #0]
 800e9ec:	4630      	mov	r0, r6
 800e9ee:	f000 f842 	bl	800ea76 <__malloc_unlock>
 800e9f2:	e7e4      	b.n	800e9be <_malloc_r+0x1e>
 800e9f4:	680b      	ldr	r3, [r1, #0]
 800e9f6:	1b5b      	subs	r3, r3, r5
 800e9f8:	d418      	bmi.n	800ea2c <_malloc_r+0x8c>
 800e9fa:	2b0b      	cmp	r3, #11
 800e9fc:	d90f      	bls.n	800ea1e <_malloc_r+0x7e>
 800e9fe:	600b      	str	r3, [r1, #0]
 800ea00:	50cd      	str	r5, [r1, r3]
 800ea02:	18cc      	adds	r4, r1, r3
 800ea04:	4630      	mov	r0, r6
 800ea06:	f000 f836 	bl	800ea76 <__malloc_unlock>
 800ea0a:	f104 000b 	add.w	r0, r4, #11
 800ea0e:	1d23      	adds	r3, r4, #4
 800ea10:	f020 0007 	bic.w	r0, r0, #7
 800ea14:	1ac3      	subs	r3, r0, r3
 800ea16:	d0d3      	beq.n	800e9c0 <_malloc_r+0x20>
 800ea18:	425a      	negs	r2, r3
 800ea1a:	50e2      	str	r2, [r4, r3]
 800ea1c:	e7d0      	b.n	800e9c0 <_malloc_r+0x20>
 800ea1e:	428c      	cmp	r4, r1
 800ea20:	684b      	ldr	r3, [r1, #4]
 800ea22:	bf16      	itet	ne
 800ea24:	6063      	strne	r3, [r4, #4]
 800ea26:	6013      	streq	r3, [r2, #0]
 800ea28:	460c      	movne	r4, r1
 800ea2a:	e7eb      	b.n	800ea04 <_malloc_r+0x64>
 800ea2c:	460c      	mov	r4, r1
 800ea2e:	6849      	ldr	r1, [r1, #4]
 800ea30:	e7cc      	b.n	800e9cc <_malloc_r+0x2c>
 800ea32:	1cc4      	adds	r4, r0, #3
 800ea34:	f024 0403 	bic.w	r4, r4, #3
 800ea38:	42a0      	cmp	r0, r4
 800ea3a:	d005      	beq.n	800ea48 <_malloc_r+0xa8>
 800ea3c:	1a21      	subs	r1, r4, r0
 800ea3e:	4630      	mov	r0, r6
 800ea40:	f000 f808 	bl	800ea54 <_sbrk_r>
 800ea44:	3001      	adds	r0, #1
 800ea46:	d0cf      	beq.n	800e9e8 <_malloc_r+0x48>
 800ea48:	6025      	str	r5, [r4, #0]
 800ea4a:	e7db      	b.n	800ea04 <_malloc_r+0x64>
 800ea4c:	20001980 	.word	0x20001980
 800ea50:	20001984 	.word	0x20001984

0800ea54 <_sbrk_r>:
 800ea54:	b538      	push	{r3, r4, r5, lr}
 800ea56:	4c06      	ldr	r4, [pc, #24]	; (800ea70 <_sbrk_r+0x1c>)
 800ea58:	2300      	movs	r3, #0
 800ea5a:	4605      	mov	r5, r0
 800ea5c:	4608      	mov	r0, r1
 800ea5e:	6023      	str	r3, [r4, #0]
 800ea60:	f7ff fb70 	bl	800e144 <_sbrk>
 800ea64:	1c43      	adds	r3, r0, #1
 800ea66:	d102      	bne.n	800ea6e <_sbrk_r+0x1a>
 800ea68:	6823      	ldr	r3, [r4, #0]
 800ea6a:	b103      	cbz	r3, 800ea6e <_sbrk_r+0x1a>
 800ea6c:	602b      	str	r3, [r5, #0]
 800ea6e:	bd38      	pop	{r3, r4, r5, pc}
 800ea70:	20002498 	.word	0x20002498

0800ea74 <__malloc_lock>:
 800ea74:	4770      	bx	lr

0800ea76 <__malloc_unlock>:
 800ea76:	4770      	bx	lr

0800ea78 <_init>:
 800ea78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea7a:	bf00      	nop
 800ea7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea7e:	bc08      	pop	{r3}
 800ea80:	469e      	mov	lr, r3
 800ea82:	4770      	bx	lr

0800ea84 <_fini>:
 800ea84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea86:	bf00      	nop
 800ea88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea8a:	bc08      	pop	{r3}
 800ea8c:	469e      	mov	lr, r3
 800ea8e:	4770      	bx	lr
